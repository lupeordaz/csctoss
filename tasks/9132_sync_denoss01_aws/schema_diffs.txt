75,87d74
< SET search_path = public, pg_catalog;
< 
< --
< -- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: postgres
< --
< 
< CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
<     LANGUAGE c
<     AS '/home/postgres/PGSQL/lib/plpgsql.so', 'plpgsql_call_handler';
< 
< 
< ALTER FUNCTION public.plpgsql_call_handler() OWNER TO postgres;
< 
89c76
< -- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: public; Owner: postgres
---
> -- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
92c79
< CREATE TRUSTED PROCEDURAL LANGUAGE plpgsql HANDLER plpgsql_call_handler;
---
> CREATE OR REPLACE PROCEDURAL LANGUAGE plpgsql;
98,109c85
< -- Name: plsh_handler(); Type: FUNCTION; Schema: public; Owner: postgres
< --
< 
< CREATE FUNCTION plsh_handler() RETURNS language_handler
<     LANGUAGE c
<     AS '/usr/local/INSTALL/postgresql-8.0.14/lib/pgplsh/pgplsh.so', 'plsh_handler';
< 
< 
< ALTER FUNCTION public.plsh_handler() OWNER TO postgres;
< 
< --
< -- Name: plsh_validator(oid); Type: FUNCTION; Schema: public; Owner: postgres
---
> -- Name: plsh; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: postgres
112,123c88
< CREATE FUNCTION plsh_validator(oid) RETURNS void
<     LANGUAGE c
<     AS '/usr/local/INSTALL/postgresql-8.0.14/lib/pgplsh/pgplsh.so', 'plsh_validator';
< 
< 
< ALTER FUNCTION public.plsh_validator(oid) OWNER TO postgres;
< 
< --
< -- Name: plsh; Type: PROCEDURAL LANGUAGE; Schema: public; Owner: postgres
< --
< 
< CREATE PROCEDURAL LANGUAGE plsh HANDLER plsh_handler VALIDATOR plsh_validator;
---
> CREATE OR REPLACE PROCEDURAL LANGUAGE plsh;
478,505d442
< -- Name: my_type1; Type: TYPE; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TYPE my_type1 AS (
< 	equip_id integer,
< 	rad_username text,
< 	uim_value text
< );
< 
< 
< ALTER TYPE csctoss.my_type1 OWNER TO csctoss_owner;
< 
< --
< -- Name: my_type2; Type: TYPE; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TYPE my_type2 AS (
< 	upd_equip_id integer,
< 	correct_min text,
< 	exist_min text,
< 	related_equip_id integer,
< 	related_min text
< );
< 
< 
< ALTER TYPE csctoss.my_type2 OWNER TO csctoss_owner;
< 
< --
875c812
< 	serial text
---
> 	serial integer
4347c4284
< CREATE FUNCTION make_function_strict(text, text) RETURNS integer
---
> CREATE FUNCTION make_function_strict(text, text) RETURNS void
4349a4287,4290
> declare
>    fun alias for $1;
>    parms alias for $2;
>    stmt text;
4351,4353c4292,4294
<    update "pg_catalog"."pg_proc" set proisstrict = 't' where 
<      proname = $1 and pronamespace = (select oid from "pg_catalog"."pg_namespace" where nspname = '_csctoss_repl') and prolang = (select oid from "pg_catalog"."pg_language" where lanname = 'c');
<    return 1 ;
---
>    stmt := 'ALTER FUNCTION "_csctoss_repl".' || fun || ' ' || parms || ' STRICT;';
>    execute stmt;
>    return;
4859c4800
< 	-- Get the tables OID and fully qualified name
---
> 	-- Get the OID and fully qualified name for the table
4874a4816,4822
> 	-- Try using truncate to empty the table and fallback to
> 	-- delete on error.
> 	-- ----
> 	perform "_csctoss_repl".TruncateOnlyTable(v_tab_fqname);
> 	raise notice 'truncate of % succeeded', v_tab_fqname;
> 
> 	-- ----
4882,4887d4829
< 	-- ----
< 	-- Try using truncate to empty the table and fallback to
< 	-- delete on error.
< 	-- ----
< 	perform "_csctoss_repl".TruncateOnlyTable(v_tab_fqname);
< 	raise notice 'truncate of % succeeded', v_tab_fqname;
4891c4833
< 	update pg_class set relhasindex = 'f' where oid = v_tab_oid;
---
> 		update pg_class set relhasindex = 'f' where oid = v_tab_oid;
21205,21632d21146
< -- Name: ops_api_assign(text, text, integer, text, boolean, boolean); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE FUNCTION ops_api_assign(text, text, integer, text, boolean, boolean) RETURNS SETOF ops_api_assign_retval
<     LANGUAGE plpgsql
<     AS $_$
< DECLARE
<     par_esn_hex                        text := $1;
<     par_sales_order                    text := $2;
<     par_billing_entity_id              integer := $3;
<     par_groupname                      text := $4;
<     par_static_ip_boolean              boolean := $5;
<     par_bypass_jbilling                boolean := $6;
<     var_equipment_id                   integer;
<     var_line_id                        integer;
<     var_mdn                            text;
<     var_mdn_min                        text;
<     var_username                       text;
<     var_billing_entity_address_id      integer;
<     var_static_ip                      text;
<     var_conn_string                    text;
<     var_serial_number                  text;
<     var_line_start_date                date;
<     var_line_equip_start_date          date;
<     var_model_id                       integer;
<     var_carrier                        text;
<     var_sql                            text;
<     var_return_row                     ops_api_assign_retval%ROWTYPE;
<     v_return_2                         boolean;
<     v_jbilling_item_code               text; 
<     var_sql_2                          text;
<     v_product_id                       integer;
<     v_plan_type_id                     integer;
<     v_length_days                      integer;
<     v_line_ctr                         integer;
<     v_numrows                          integer;
<     v_count                            integer;
<     v_priority                         integer;
< 
< BEGIN
<     SET client_min_messages TO notice;
<     PERFORM public.set_change_log_staff_id (3);
< 
<     -- Check if the parameters are null
<     IF par_esn_hex = ''
<     OR par_sales_order = ''
<     OR par_billing_entity_id IS NULL
<     OR par_groupname = ''
<     OR par_static_ip_boolean IS NULL
<     THEN
<         RAISE EXCEPTION 'All or some of the input values are null';
<         var_return_row.result_code := false;
<         var_return_row.error_message := 'ERROR:  All or some of the input values are null';
<         RETURN NEXT var_return_row;
<         RETURN;
<     END IF;
< 
<     -- Validate Parameters
<     SELECT equipment_id INTO var_equipment_id
<       FROM unique_identifier
<      WHERE unique_identifier_type = 'ESN HEX'
<        AND value = par_esn_hex;
< 
<     IF NOT FOUND THEN
<         RAISE EXCEPTION 'The ESN HEX value entered doesnt exist';
<         var_return_row.result_code := false;
<         var_return_row.error_message := 'ERROR:  The ESN HEX value entered doesnt exist';
<         RETURN NEXT var_return_row;
<         RETURN;
<     END IF;
< 
<     SELECT equipment_model_id INTO var_model_id
<       FROM equipment
<      WHERE equipment_id = var_equipment_id;
< 
<     IF NOT FOUND THEN
<          RAISE EXCEPTION 'Equipment model doesnt exist.';
<             var_return_row.result_code := false;
<             var_return_row.error_message := 'ERROR:  Equipment model doesnt exist.';
<             RETURN NEXT var_return_row;
<             RETURN;
<     END IF;
< 
<     -- Get carrier name from equipment model table
<     SELECT em.carrier INTO var_carrier
<       FROM unique_identifier ui
<       JOIN equipment e ON ui.equipment_id = e.equipment_id
<       JOIN equipment_model em ON em.equipment_model_id = e.equipment_model_id
<      WHERE ui.value = par_esn_hex
<      LIMIT 1;
< 
<     RAISE NOTICE 'Sales Order: %',par_sales_order;
<     RAISE NOTICE 'ESN: %',par_esn_hex;
<     RAISE NOTICE 'CARRIER: %',var_carrier;
< 
<     -- Retrieve a part of username depending upon carrier and MDN/MIN value.
<     IF (var_carrier = 'USCC')  THEN
<         SELECT value INTO var_mdn_min
<           FROM unique_identifier
<          WHERE unique_identifier_type = 'MIN'
<            AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
<     ELSE
<         SELECT value INTO var_mdn_min
<           FROM unique_identifier
<          WHERE unique_identifier_type = 'MDN'
<            AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
<     END IF;
< 
<     RAISE NOTICE 'MDN/MIN: %',var_mdn_min;
< 
<     -- Retrieve username value using MDN or MIN value
<     SELECT username INTO var_username
<     FROM username
<     WHERE SUBSTR(username, 1, 10) = var_mdn_min;
<     RAISE NOTICE 'USERNAME: % USERGROUP: %',var_username,par_groupname;
< 
<     IF NOT FOUND THEN
<         SELECT username INTO var_username
<         FROM username
<         WHERE 1 = 1
<         AND substr(username, 1, 15) = var_mdn_min ;
< 
<         IF NOT FOUND THEN          
<             RAISE EXCEPTION 'Username does not exist';
<             var_return_row.result_code := false;
<             var_return_row.error_message := 'ERROR:  Username does not exist!';
<             RETURN NEXT var_return_row;
<             RETURN;
<         END IF;
<     END IF;
< 
<     -- Retrieve Serial Number value from unique_identifier
<     SELECT value INTO var_serial_number
<     FROM unique_identifier
<     WHERE unique_identifier_type = 'SERIAL NUMBER'
<     AND equipment_id = var_equipment_id;
< 
<     IF NOT FOUND THEN
<         RAISE EXCEPTION 'Serial Number value does not exist for the Equipment.';
<         var_return_row.result_code := false;
<         var_return_row.error_message := 'ERROR:  Serial Number value does not exist for the Equipment.';
<         RETURN NEXT var_return_row;
<         RETURN;
<     END IF;
< 
<     -- Billing_entity_address_id retrieval
<     SELECT address_id INTO var_billing_entity_address_id
<     FROM billing_entity_address
<     WHERE billing_entity_id = par_billing_entity_id;
< 
<     IF NOT FOUND THEN
<         RAISE EXCEPTION 'Billing Entity Address does not exist';
<         var_return_row.result_code := false;
<         var_return_row.error_message := 'ERROR:  Billing Entity Address does not exist';
<         RETURN NEXT var_return_row;
<         RETURN;
<     ELSE
<         var_line_id := nextval('csctoss.line_line_id_seq');
<         IF EXISTS (SELECT TRUE
<                    FROM line l
<                    JOIN line_equipment le USING (line_id) 
<                    JOIN unique_identifier ui USING (equipment_id)
<                    WHERE ui.unique_identifier_type = 'ESN HEX' 
<                    AND ui.value = par_esn_hex AND le.end_date IS NULL) 
<         THEN
<             RAISE EXCEPTION 'Active Line already exists for the input parameters';
<             var_return_row.result_code := false;
<             var_return_row.error_message := 'ERROR:  Active Line already exists for the input parameters';
<             RETURN NEXT var_return_row;
<             RETURN;
<         ELSE
<             -- Insert required fields values into line table
<             INSERT INTO line (
<                 line_id, line_assignment_type, billing_entity_id, 
<                 billing_entity_address_id, active_flag, line_label, 
<                 start_date, date_created, radius_username, notes)
<             VALUES (
<                 var_line_id, 'CUSTOMER ASSIGNED', par_billing_entity_id, 
<                 var_billing_entity_address_id, TRUE, par_esn_hex, 
<                 current_date, current_date, var_username, par_sales_order);
< 
<             IF NOT FOUND THEN
<                 RAISE EXCEPTION 'Line Insert Failed!';
<                 var_return_row.result_code := false;
<                 var_return_row.error_message := 'ERROR:  Line Insert Failed!';
<                 RETURN NEXT var_return_row;
<                 RETURN;
<             END IF;
< 
<             SELECT start_date INTO var_line_start_date
<             FROM line WHERE line_id = var_line_id;
< 
<             -- Update username table with SO_ORDER and Billing_Entity_ID
<             UPDATE username
<                 SET notes = par_sales_order,
<                     billing_entity_id = par_billing_entity_id
<             WHERE username = var_username;
< 
<             IF NOT FOUND THEN
<                 RAISE EXCEPTION 'Username Update Failed!';
<                 var_return_row.result_code := false;
<                 var_return_row.error_message := 'ERROR:  Username Update Failed!';
<                 RETURN NEXT var_return_row;
<                 RETURN;
<             END IF;
<         END IF;
<     END IF;
< 
<     -- If no active line exists for the equipment then Insert line, equipment details.
<     IF NOT EXISTS (SELECT TRUE FROM line_equipment WHERE equipment_id = var_equipment_id AND end_date IS NULL) THEN
< 
<         -- [BEGIN] NEW CODE TO CHECK IF OWNERSHIP TRANSFER - IF SO, THEN BACK DATE END DATE
<         IF EXISTS (SELECT TRUE FROM line_equipment WHERE equipment_id = var_equipment_id AND end_date = current_date ) THEN
<             UPDATE line_equipment
<             SET 
<             end_date = current_date - 1
<             WHERE equipment_id = var_equipment_id
<             AND   end_date = current_date ;     
<         END IF;
<         -- [END] NEW CODE TO CHECK IF OWNERSHIP TRANSFER - IF SO, THEN BACK DATE END DATE
<            
<         INSERT INTO line_equipment
<             (line_id, equipment_id, start_date, billing_entity_address_id)
<         VALUES 
<             (var_line_id, var_equipment_id, current_date, var_billing_entity_address_id);
< 
<         IF NOT FOUND THEN
<             RAISE EXCEPTION 'Line_Equipment Insert Failed!';
<             var_return_row.result_code := false;
<             var_return_row.error_message := 'ERROR:  Line_Equipment Insert Failed!';
<             RETURN NEXT var_return_row;
<             RETURN;
<         END IF;
< 
<         -- no idea why this is here
<         SELECT start_date INTO var_line_equip_start_date
<         FROM line_equipment
<         WHERE line_id = var_line_id
<         AND equipment_id = var_equipment_id;
< 
<     ELSE
<         RAISE EXCEPTION 'Equipment is already assigned to a line.';
<         var_return_row.result_code := false;
<         var_return_row.error_message := 'ERROR:  Equipment is already assigned to a line.';
<         RETURN NEXT var_return_row;
<         RETURN;
<     END IF;
< 
<     -- Update usergroup table with input groupname.
<     SELECT priority INTO v_priority
<       FROM groupname 
<      WHERE 1 = 1
<        AND groupname = par_groupname;
< 
<     GET DIAGNOSTICS v_numrows = ROW_COUNT;
<     IF v_numrows = 0 THEN
<         RAISE EXCEPTION 'Usergroup not found in GROUPNAME table.';
<         var_return_row.result_code := false;
<         var_return_row.error_message := 'ERROR:  Usergroup not found in GROUPNAME table.';
<         RETURN NEXT var_return_row;
<         RETURN;
<     END IF;
< 
<     DELETE FROM usergroup WHERE username LIKE var_username;
< 
<     INSERT INTO usergroup 
<         (username,groupname,priority) 
<     VALUES
<         (var_username,par_groupname,v_priority) ;
< 
<     -- removed to fix duplicate issue- UPDATE usergroup SET groupname = par_groupname WHERE username LIKE var_username;
< 
<     -- SELECT carrier from equipment model table
< 
<     SELECT em.carrier INTO var_carrier
<     FROM unique_identifier ui
<     JOIN equipment e ON (ui.equipment_id = e.equipment_id)
<     JOIN equipment_model em ON (em.equipment_model_id = e.equipment_model_id)
<     WHERE 1 = 1
<     AND ui.value = par_esn_hex
<     LIMIT 1;
< 
<     -- Assign static ip to radreply table.
<     IF par_static_ip_boolean = FALSE THEN
<         INSERT INTO radreply (username, attribute, op, value, priority)
<         VALUES (var_username, 'Class', '=', var_line_id::text, 10);
< 
<         IF NOT FOUND THEN
<             RAISE EXCEPTION 'Radreply Update Failed!';
<             var_return_row.result_code := false;
<             var_return_row.error_message := 'ERROR:  Radreply Update Failed!';
<             RETURN NEXT var_return_row;
<             RETURN;
<         END IF;
< 
<         RAISE NOTICE 'DYNAMIC IP- STATIC IP NOT ASSIGNED';
<     ELSE
<         SELECT * 
<           INTO var_static_ip 
<           FROM ops_api_static_ip_assign(var_carrier,par_groupname,var_username,var_line_id,par_billing_entity_id);
< 
<         -- Check if ops_api_static_ip_assign failed!        
<         IF substring(var_static_ip from 1 for 3) = 'ERR'
<         THEN
<             RAISE EXCEPTION '%', var_static_ip;
<             var_return_row.result_code := false;
<             var_return_row.error_message := var_static_ip;
<             RETURN NEXT var_return_row;
<             RETURN;
<         ELSE
<             RAISE NOTICE 'STATIC IP: %', var_static_ip;
<         END IF;
< 
<     END IF;
< 
<     -- Get product code from JBilling.
<     var_sql_2 := '
<     SELECT i.internal_number
<     FROM purchase_order po,
<     order_line ol,
<     item i,
<     item_type_map itm
<     WHERE 1=1
<     AND po.public_number = ''' || par_sales_order || '''
<     AND po.id = ol.order_id
<     AND ol.item_id = i.id
<     AND i.id = itm.item_id
<     AND itm.type_id = 301
<     AND internal_number LIKE ''MRC%''
<     LIMIT 1';
< 
<     IF (par_bypass_jbilling = FALSE) THEN
<         RAISE NOTICE 'Calling Jbilling to get Product Name (internal number) from item table.';
< 
<         SELECT prod_code into v_jbilling_item_code FROM public.dblink(fetch_jbilling_conn(), var_sql_2)
<             AS rec_type (prod_code  text);
<         v_count := length(v_jbilling_item_code);
<         RAISE NOTICE 'MRC Product Code from Jbilling: % length: %', v_jbilling_item_code, v_count;
< 
<         SELECT product_id, plan_type_id, length_days INTO v_product_id, v_plan_type_id, v_length_days
<         FROM csctoss.product
<         WHERE 1 = 1
<         AND product_code LIKE v_jbilling_item_code;
< 
<         GET DIAGNOSTICS v_numrows = ROW_COUNT;
<         IF v_numrows = 0 THEN
<             RAISE EXCEPTION 'ERROR: Product code not present in Product table';
<             var_return_row.result_code := false;
<             var_return_row.error_message := 'ERROR:  Product code not present in Product table';
<             RETURN NEXT var_return_row;
<             RETURN;
<         ELSE
<             RAISE NOTICE 'Product Info: prod_id: %  plan_type: % length_days: %',v_product_id,v_plan_type_id,v_length_days;
<         END IF;
< 
<         -- Insert csctoss.plan record.
<         RAISE NOTICE 'Inserting Product Info into plan table';
< 
<         INSERT INTO plan
<         (
<         length_days, plan_type_id, comment , create_timestamp, product_id, 
<         staff_id, line_id , start_date, end_date , prepaid_unit, 
<         prepaid_allowance, prepaid_balance, accounting_start_date , sales_order_number
<         )
<         VALUES
<         (
<         v_length_days, v_plan_type_id , par_sales_order, current_timestamp, v_product_id, 
<         3, var_line_id , current_date, null,  null,
<         null, null,   current_date,   null  
<         );
< 
<         GET DIAGNOSTICS v_numrows = ROW_COUNT;
<         IF v_numrows = 0 THEN
<             RAISE EXCEPTION 'Error: No rows inserted into plan table.';
<             var_return_row.result_code := false;
<             var_return_row.error_message := 'ERROR:  No rows inserted into plan table.';
<             RETURN NEXT var_return_row;
<             RETURN;
<         END IF;
<     END IF;
< 
<     -- Insert csctoss.equipment_warranty record.
<     RAISE NOTICE 'Inserting Warranty Info into equipment_warranty table';
< 
<     INSERT INTO equipment_warranty
<     SELECT
<     var_equipment_id,
<     var_line_start_date,
<     var_line_start_date + (ewr.num_of_months::text || ' month')::interval
<     FROM equipment_warranty_rule ewr
<     WHERE ewr.equipment_model_id = var_model_id
<     AND NOT EXISTS (SELECT * FROM equipment_warranty ew WHERE ew.equipment_id = var_equipment_id);
< 
<     IF (par_bypass_jbilling = FALSE) THEN
<         -- Connect to jbilling and query the function ops_api_prov_line, for provisioning line.
<         var_sql := 'SELECT * FROM oss.assign_device_jbilling( ' || quote_literal(upper(par_sales_order))
<                 || ' , ' || quote_literal(par_esn_hex) || ' , ' || quote_literal(var_serial_number)||' , '
<                 || quote_literal(var_username) || ' ,' || var_line_id || ')';
< 
<         RAISE NOTICE 'Calling oss.assign_device_jbilling in Jbilling';
<         RAISE NOTICE '###  var_sql: %',var_sql;
< 
<         SELECT result_code into v_return_2  FROM public.dblink(fetch_jbilling_conn(), var_sql)
<             AS rec_type (result_code boolean);
< 
<         IF (v_return_2 = FALSE) THEN
<             RAISE EXCEPTION 'Jbilling Provisioning Failed.';
<             var_return_row.result_code := false;
<             var_return_row.error_message := 'ERROR:  Jbilling Provisioning Failed.';
<             RETURN NEXT var_return_row;
<             RETURN;
<         ELSE
<             RAISE NOTICE 'Jbilling Provisioning Successful.';
<         END IF;
<     END IF;
< 
<     var_return_row.result_code := true;
<     var_return_row.error_message := 'Line assignment is done succesfully.';
<     RETURN NEXT var_return_row;
<     RETURN;
< 
<  END;
<   $_$;
< 
< 
< ALTER FUNCTION csctoss.ops_api_assign(text, text, integer, text, boolean, boolean) OWNER TO csctoss_owner;
< 
< --
22095c21609
< -- Name: ops_api_assign_20171219(text, text, integer, text, boolean); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: ops_api_assign_backup_20150219(text, text, integer, text, boolean); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
22098c21612
< CREATE FUNCTION ops_api_assign_20171219(text, text, integer, text, boolean) RETURNS SETOF ops_api_assign_retval
---
> CREATE FUNCTION ops_api_assign_backup_20150219(text, text, integer, text, boolean) RETURNS SETOF ops_api_assign_retval
22122,22131c21636,21646
<    v_return_2                         boolean;
<    v_jbilling_item_code               text; 
<    var_sql_2                          text;
<    v_product_id                       integer;
<    v_plan_type_id                     integer;
<    v_length_days                      integer;
<    v_line_ctr                         integer;
<    v_numrows                          integer;
<    v_count                            integer;
<    v_priority                         integer;
---
>    v_return_2                           boolean;
>    v_jbilling_item_code               text;
>    var_sql_2                            text;
>    v_product_id                         integer;
>    v_plan_type_id                       integer;
>    v_length_days                        integer;
>    v_line_ctr                           integer;
>    v_numrows                           integer;
>    v_count                             integer;
>    v_priority                          integer;
> 
22133a21649
> 
22136a21653
> 
22138,22144c21655,21658
<         OR par_sales_order = ''
<         OR par_billing_entity_id IS NULL
<         OR par_groupname = ''
<         OR par_static_ip_boolean IS NULL
<     THEN
<        RAISE EXCEPTION 'All or some of the input values are null';
<     END IF;
---
>     OR par_sales_order = ''
>     OR par_billing_entity_id IS NULL
>     OR par_groupname = ''
>     OR par_static_ip_boolean IS NULL THEN
22146,22150c21660
<     -- Validate Parameters
<     SELECT equipment_id INTO var_equipment_id
<     FROM unique_identifier
<     WHERE unique_identifier_type = 'ESN HEX'
<     AND value = par_esn_hex;
---
>        RAISE EXCEPTION 'All or some of the input values are null';
22152,22154c21662,21667
<     IF NOT FOUND THEN
<         RAISE EXCEPTION 'The ESN HEX value entered doesnt exist';
<     END IF;
---
>     ELSE
>         -- Validate Parameters
>         SELECT equipment_id INTO var_equipment_id
>         FROM unique_identifier
>         WHERE unique_identifier_type = 'ESN HEX'
>         AND value = par_esn_hex;
22156,22158c21669
<     SELECT equipment_model_id INTO var_model_id
<     FROM equipment
<     WHERE equipment_id = var_equipment_id;
---
>         IF NOT FOUND THEN
22160,22162c21671
<     IF NOT FOUND THEN
<         RAISE EXCEPTION 'Equipment model doesnt exist.';
<     END IF;
---
>            RAISE EXCEPTION 'The ESN HEX value entered doesnt exist';
22164,22170c21673
<     -- Get carrier name from equipment model table
<     SELECT em.carrier INTO var_carrier
<     FROM unique_identifier ui
<     JOIN equipment e ON ui.equipment_id = e.equipment_id
<     JOIN equipment_model em ON em.equipment_model_id = e.equipment_model_id
<     WHERE ui.value = par_esn_hex
<     LIMIT 1;
---
>         END IF;
22172,22174c21675,21677
<     RAISE NOTICE 'Sales Order: %',par_sales_order;
<     RAISE NOTICE 'ESN: %',par_esn_hex;
<     RAISE NOTICE 'CARRIER: %',var_carrier;
---
>         SELECT equipment_model_id INTO var_model_id
>         FROM equipment
>         WHERE equipment_id = var_equipment_id;
22176,22181c21679
<     -- Retrieve a part of username depending upon carrier and MDN/MIN value.
<     IF ( var_carrier = 'SPRINT') THEN
<         SELECT value INTO var_mdn_min
<         FROM unique_identifier
<         WHERE unique_identifier_type = 'MDN'
<         AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
---
>         IF NOT FOUND THEN
22183,22187c21681
<     ELSIF (var_carrier = 'VZW') THEN
<         SELECT value INTO var_mdn_min
<         FROM unique_identifier
<         WHERE unique_identifier_type = 'MDN'
<         AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
---
>             RAISE EXCEPTION 'Equipment model doesnt exist.';
22189,22193c21683,21685
<     ELSIF (var_carrier = 'USCC')  THEN
<         SELECT value INTO var_mdn_min
<         FROM unique_identifier
<         WHERE unique_identifier_type = 'MIN'
<         AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
---
>         END IF;
>         -- Start new username search based on MDN/MIN
>         -- SELECT carrier from equipment model table
22195,22199c21687,21692
<     ELSIF (var_carrier = 'VODAFONE')  THEN
<         SELECT value INTO var_mdn_min
<         FROM unique_identifier
<         WHERE unique_identifier_type = 'MDN'
<         AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
---
>         SELECT em.carrier INTO var_carrier
>         FROM unique_identifier ui
>         JOIN equipment e on ui.equipment_id = e.equipment_id
>         JOIN equipment_model em on em.equipment_model_id = e.equipment_model_id
>         WHERE ui.value = par_esn_hex
>         LIMIT 1;
22201c21694,21696
<     END IF;
---
>         RAISE NOTICE 'Sales Order: %',par_sales_order;
>         RAISE NOTICE 'ESN: %',par_esn_hex;
>         RAISE NOTICE 'CARRIER: %',var_carrier;
22203c21698
<     RAISE NOTICE 'MDN/MIN: %',var_mdn_min;
---
>         -- Retrieve username value depending upon Carrier and MDN/MIN value.
22205,22209c21700
<     -- Retrieve username value using MDN or MIN value
<     SELECT username INTO var_username
<     FROM username
<     WHERE SUBSTR(username, 1, 10) = var_mdn_min;
<     RAISE NOTICE 'USERNAME: % USERGROUP: %',var_username,par_groupname;
---
>         IF ( var_carrier = 'SPRINT') THEN
22211,22215c21702,21705
<     IF NOT FOUND THEN
<         SELECT username INTO var_username
<         FROM username
<         WHERE 1 = 1
<         AND substr(username, 1, 15) = var_mdn_min ;
---
>            SELECT value INTO var_mdn_min
>            FROM unique_identifier
>            WHERE unique_identifier_type = 'MDN'
>            AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
22217,22220c21707
<         IF NOT FOUND THEN          
<             RAISE EXCEPTION 'Username doesnt exist';
<         END IF;
<     END IF;
---
>         ELSIF (var_carrier = 'VZW') THEN
22222,22226c21709,21712
<     -- Retrieve Serial Number value from unique_identifier
<     SELECT value INTO var_serial_number
<     FROM unique_identifier
<     WHERE unique_identifier_type = 'SERIAL NUMBER'
<     AND equipment_id = var_equipment_id;
---
>            SELECT value INTO var_mdn_min
>            FROM unique_identifier
>            WHERE unique_identifier_type = 'MDN'
>            AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
22228,22554c21714
<     IF NOT FOUND THEN
<         RAISE EXCEPTION 'Serial Number value doesnt exist for the Equipment.';
<     END IF;
< 
<     -- Billing_entity_address_id retrieval
<     SELECT address_id INTO var_billing_entity_address_id
<     FROM billing_entity_address
<     WHERE billing_entity_id = par_billing_entity_id;
< 
<     IF NOT FOUND THEN
<         RAISE EXCEPTION 'Billing Entity Address doesnt exist';
<     ELSE
<         var_line_id := nextval('csctoss.line_line_id_seq');
<         IF EXISTS (SELECT TRUE
<                    FROM line l
<                    JOIN line_equipment le USING (line_id) 
<                    JOIN unique_identifier ui USING (equipment_id)
<                    WHERE ui.unique_identifier_type = 'ESN HEX' 
<                    AND ui.value = par_esn_hex AND le.end_date IS NULL) 
<         THEN
<             RAISE EXCEPTION 'Active Line already exists for the input parameters';
<         ELSE
<             -- Insert required fields values into line table
<             INSERT INTO line (
<                 line_id, line_assignment_type, billing_entity_id, 
<                 billing_entity_address_id, active_flag, line_label, 
<                 start_date, date_created, radius_username, notes)
<             VALUES (
<                 var_line_id, 'CUSTOMER ASSIGNED', par_billing_entity_id, 
<                 var_billing_entity_address_id, TRUE, par_esn_hex, 
<                 current_date, current_date, var_username, par_sales_order);
< 
<             SELECT start_date INTO var_line_start_date
<             FROM line WHERE line_id = var_line_id;
< 
<             -- Update username table with SO_ORDER and Billing_Entity_ID
<             UPDATE username
<                 SET notes = par_sales_order,
<                     billing_entity_id = par_billing_entity_id
<             WHERE username = var_username;
< 
<             IF NOT FOUND THEN
<                 RAISE EXCEPTION 'Username Update Failed!';
<             END IF;
<         END IF;
<     END IF;
< 
<     -- If no active line exists for the equipment then Insert line, equipment details.
<     IF NOT EXISTS (SELECT TRUE FROM line_equipment WHERE equipment_id = var_equipment_id AND end_date IS NULL) THEN
< 
<         -- [BEGIN] NEW CODE TO CHECK IF OWNERSHIP TRANSFER - IF SO, THEN BACK DATE END DATE
<         IF EXISTS (SELECT TRUE FROM line_equipment WHERE equipment_id = var_equipment_id AND end_date = current_date ) THEN
<             UPDATE line_equipment
<             SET 
<             end_date = current_date - 1
<             WHERE equipment_id = var_equipment_id
<             AND   end_date = current_date ;     
<         END IF;
<         -- [END] NEW CODE TO CHECK IF OWNERSHIP TRANSFER - IF SO, THEN BACK DATE END DATE
<            
<         INSERT INTO line_equipment
<             (line_id, equipment_id, start_date, billing_entity_address_id)
<         VALUES 
<             (var_line_id, var_equipment_id, current_date, var_billing_entity_address_id);
< 
<         IF NOT FOUND THEN
<             RAISE EXCEPTION 'Line_Equipment Insert Failed!';
<         END IF;
< 
<         -- no idea why this is here
<         SELECT start_date INTO var_line_equip_start_date
<         FROM line_equipment
<         WHERE line_id = var_line_id
<         AND equipment_id = var_equipment_id;
< 
<     ELSE
<         RAISE EXCEPTION 'Equipment is already assigned to a line.';
<     END IF;
< 
<     -- Update usergroup table with input groupname.
<     SELECT priority INTO v_priority
<     FROM groupname 
<     WHERE 1 = 1
<     AND groupname = par_groupname;
< 
<     GET DIAGNOSTICS v_numrows = ROW_COUNT;
<     IF v_numrows = 0 THEN
<         RAISE EXCEPTION 'Usergroup not found in GROUPNAME table.';
<     END IF;
<           
<     DELETE FROM usergroup WHERE username LIKE var_username;
< 
<     INSERT INTO usergroup 
<         (username,groupname,priority) 
<     VALUES
<         (var_username,par_groupname,v_priority) ;
< 
<     -- removed to fix duplicate issue- UPDATE usergroup SET groupname = par_groupname WHERE username LIKE var_username;
< 
<     -- SELECT carrier from equipment model table
< 
<     SELECT em.carrier INTO var_carrier
<     FROM unique_identifier ui
<     JOIN equipment e ON (ui.equipment_id = e.equipment_id)
<     JOIN equipment_model em ON (em.equipment_model_id = e.equipment_model_id)
<     WHERE 1 = 1
<     AND ui.value = par_esn_hex
<     LIMIT 1;
< 
<     -- Assign static ip to radreply table.
<     IF par_static_ip_boolean = FALSE THEN
<         INSERT INTO radreply (username, attribute, op, value, priority)
<         VALUES (var_username, 'Class', '=', var_line_id::text, 10);
< 
<         IF NOT FOUND THEN
<             RAISE EXCEPTION 'Radreply Update Failed!';
<         END IF;
< 
<         RAISE NOTICE 'DYNAMIC IP- STATIC IP NOT ASSIGNED';
<     ELSE
<         SELECT * INTO var_static_ip FROM ops_api_static_ip_assign(var_carrier,par_groupname,var_username,var_line_id,par_billing_entity_id);
<         RAISE NOTICE 'STATIC IP: %',var_static_ip;
<     END IF;
<           
<     -- Get product code from JBilling.
<     var_sql_2 := '
<     SELECT i.internal_number
<     FROM purchase_order po,
<     order_line ol,
<     item i,
<     item_type_map itm
<     WHERE 1=1
<     AND po.public_number = ''' || par_sales_order || '''
<     AND po.id = ol.order_id
<     AND ol.item_id = i.id
<     AND i.id = itm.item_id
<     AND itm.type_id = 301
<     AND internal_number LIKE ''MRC%''
<     LIMIT 1';
< 
<     RAISE NOTICE 'Calling Jbilling to get Product Name (internal number) from item table.';
< 
<     SELECT prod_code into v_jbilling_item_code FROM public.dblink(fetch_jbilling_conn(), var_sql_2)
<         AS rec_type (prod_code  text);
<     v_count := length(v_jbilling_item_code);
<     RAISE NOTICE 'MRC Product Code from Jbilling: % length: %', v_jbilling_item_code, v_count;
< 
<     SELECT product_id, plan_type_id, length_days INTO v_product_id, v_plan_type_id, v_length_days
<     FROM csctoss.product
<     WHERE 1 = 1
<     AND product_code LIKE v_jbilling_item_code;
< 
<     GET DIAGNOSTICS v_numrows = ROW_COUNT;
<     IF v_numrows = 0 THEN
<         RAISE EXCEPTION 'ERROR: Product code not present in Product table';
<     ELSE
<         RAISE NOTICE 'Product Info: prod_id: %  plan_type: % length_days: %',v_product_id,v_plan_type_id,v_length_days;
<     END IF;
< 
<     -- Insert csctoss.plan record.
<     RAISE NOTICE 'Inserting Product Info into plan table';
< 
<     INSERT INTO plan
<     (
<     length_days, plan_type_id, comment , create_timestamp, product_id, 
<     staff_id, line_id , start_date, end_date , prepaid_unit, 
<     prepaid_allowance, prepaid_balance, accounting_start_date , sales_order_number
<     )
<     VALUES
<     (
<     v_length_days, v_plan_type_id , par_sales_order, current_timestamp, v_product_id, 
<     3, var_line_id , current_date, null,  null,
<     null, null,   current_date,   null  
<     );
< 
<     GET DIAGNOSTICS v_numrows = ROW_COUNT;
<     IF v_numrows = 0 THEN
<         RAISE EXCEPTION 'Error: No rows inserted into plan table.';
<     END IF;
< 
<     -- Insert csctoss.equipment_warranty record.
<     RAISE NOTICE 'Inserting Warranty Info into equipment_warranty table';
< 
<     INSERT INTO equipment_warranty
<     SELECT
<     var_equipment_id,
<     var_line_start_date,
<     var_line_start_date + (ewr.num_of_months::text || ' month')::interval
<     FROM equipment_warranty_rule ewr
<     WHERE ewr.equipment_model_id = var_model_id
<     AND NOT EXISTS (SELECT * FROM equipment_warranty ew WHERE ew.equipment_id = var_equipment_id);
< 
<     -- Connect to jbilling and query the function ops_api_prov_line, for provisioning line.
<     var_sql := 'SELECT * FROM oss.assign_device_jbilling( ' || quote_literal(upper(par_sales_order))
<             || ' , ' || quote_literal(par_esn_hex) || ' , ' || quote_literal(var_serial_number)||' , '
<             || quote_literal(var_username) || ' ,' || var_line_id || ')';
< 
<     RAISE NOTICE 'Calling oss.assign_device_jbilling in Jbilling';
<     RAISE NOTICE '###  var_sql: %',var_sql;
< 
<     SELECT result_code into v_return_2  FROM public.dblink(fetch_jbilling_conn(), var_sql)
<         AS rec_type (result_code boolean);
< 
<     IF (v_return_2 = FALSE) THEN
<         RAISE EXCEPTION 'Jbilling Provisioning Failed.';
<     ELSE
<         RAISE NOTICE 'Jbilling Provisioning Successful.';
<     END IF;
< 
<     var_return_row.result_code := true;
<     var_return_row.error_message := 'Line assignment is done succesfully.';
<     RETURN NEXT var_return_row;
<     RETURN;
< 
<  END;
<   $_$;
< 
< 
< ALTER FUNCTION csctoss.ops_api_assign_20171219(text, text, integer, text, boolean) OWNER TO csctoss_owner;
< 
< --
< -- Name: ops_api_assign_backup_20150219(text, text, integer, text, boolean); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE FUNCTION ops_api_assign_backup_20150219(text, text, integer, text, boolean) RETURNS SETOF ops_api_assign_retval
<     LANGUAGE plpgsql
<     AS $_$
< DECLARE
<    par_esn_hex                        text := $1;
<    par_sales_order                    text := $2;
<    par_billing_entity_id              integer := $3;
<    par_groupname                      text := $4;
<    par_static_ip_boolean              boolean := $5;
<    var_equipment_id                   integer;
<    var_line_id                        integer;
<    var_mdn                            text;
<    var_mdn_min                        text;
<    var_username                       text;
<    var_billing_entity_address_id      integer;
<    var_static_ip                      text;
<    var_conn_string                    text;
<    var_serial_number                  text;
<    var_line_start_date                date;
<    var_line_equip_start_date          date;
<    var_model_id                       integer;
<    var_carrier                        text;
<    var_sql                            text;
<    var_return_row                     ops_api_assign_retval%ROWTYPE;
<    v_return_2                           boolean;
<    v_jbilling_item_code               text;
<    var_sql_2                            text;
<    v_product_id                         integer;
<    v_plan_type_id                       integer;
<    v_length_days                        integer;
<    v_line_ctr                           integer;
<    v_numrows                           integer;
<    v_count                             integer;
<    v_priority                          integer;
< 
< 
< BEGIN
< 
<     PERFORM public.set_change_log_staff_id (3);
< 
<     -- Check if the parameters are null
< 
<     IF par_esn_hex = ''
<     OR par_sales_order = ''
<     OR par_billing_entity_id IS NULL
<     OR par_groupname = ''
<     OR par_static_ip_boolean IS NULL THEN
< 
<        RAISE EXCEPTION 'All or some of the input values are null';
< 
<     ELSE
<         -- Validate Parameters
<         SELECT equipment_id INTO var_equipment_id
<         FROM unique_identifier
<         WHERE unique_identifier_type = 'ESN HEX'
<         AND value = par_esn_hex;
< 
<         IF NOT FOUND THEN
< 
<            RAISE EXCEPTION 'The ESN HEX value entered doesnt exist';
< 
<         END IF;
< 
<         SELECT equipment_model_id INTO var_model_id
<         FROM equipment
<         WHERE equipment_id = var_equipment_id;
< 
<         IF NOT FOUND THEN
< 
<             RAISE EXCEPTION 'Equipment model doesnt exist.';
< 
<         END IF;
<         -- Start new username search based on MDN/MIN
<         -- SELECT carrier from equipment model table
< 
<         SELECT em.carrier INTO var_carrier
<         FROM unique_identifier ui
<         JOIN equipment e on ui.equipment_id = e.equipment_id
<         JOIN equipment_model em on em.equipment_model_id = e.equipment_model_id
<         WHERE ui.value = par_esn_hex
<         LIMIT 1;
< 
<         RAISE NOTICE 'Sales Order: %',par_sales_order;
<         RAISE NOTICE 'ESN: %',par_esn_hex;
<         RAISE NOTICE 'CARRIER: %',var_carrier;
< 
<         -- Retrieve username value depending upon Carrier and MDN/MIN value.
< 
<         IF ( var_carrier = 'SPRINT') THEN
< 
<            SELECT value INTO var_mdn_min
<            FROM unique_identifier
<            WHERE unique_identifier_type = 'MDN'
<            AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
< 
<         ELSIF (var_carrier = 'VZW') THEN
< 
<            SELECT value INTO var_mdn_min
<            FROM unique_identifier
<            WHERE unique_identifier_type = 'MDN'
<            AND equipment_id = (SELECT equipment_id FROM unique_identifier WHERE unique_identifier_type = 'ESN HEX' AND value = par_esn_hex);
< 
<         ELSIF (var_carrier = 'USCC') THEN
---
>         ELSIF (var_carrier = 'USCC') THEN
25486c24646
<       v_errmsg := 'Unknown error!'
---
>       v_errmsg := 'Unknown error!';
25695,25714d24854
<   var_return_row                ops_api_expire_retval%ROWTYPE;
< BEGIN
<   select * INTO var_return_row from ops_api_expire_ex($1, false);
<   RETURN NEXT var_return_row;
<   RETURN;
< 
< END;
< $_$;
< 
< 
< ALTER FUNCTION csctoss.ops_api_expire_ex(text) OWNER TO csctoss_owner;
< 
< --
< -- Name: ops_api_expire_ex(text, boolean); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE FUNCTION ops_api_expire_ex(text, boolean) RETURNS SETOF ops_api_expire_retval
<     LANGUAGE plpgsql
<     AS $_$
< DECLARE
25717d24856
<   par_bypass_jbilling           boolean := $2;
25784c24923,24934
< 
---
> /*
>     IF NOT EXISTS( SELECT TRUE FROM usergroup WHERE username LIKE var_username AND groupname LIKE 'disconnected' and priority = 1) THEN
>       INSERT INTO usergroup(username, groupname, priority)
>       VALUES (var_username, 'disconnected', 1);
>       IF NOT FOUND THEN
>         var_return_row.result_code := false;
>         var_return_row.error_message := 'Inserting "disconnected" group failed.';
>         RETURN NEXT var_return_row;
>         RETURN;
>       END IF;
>     END IF;
> */
25791c24941
<       IF NOT EXISTS( SELECT TRUE FROM usergroup WHERE username LIKE var_username AND groupname LIKE '%disconnected' AND priority = 1) THEN
---
>       IF NOT EXISTS( SELECT TRUE FROM usergroup WHERE username LIKE var_username AND groupname LIKE 'disconnected' AND priority = 1) THEN
25825,25838c24975,24986
<   IF (par_bypass_jbilling = FALSE) THEN
<     var_sql := 'SELECT * FROM oss.archive_equipment(' || quote_literal(par_esn_hex) || ')';
<     FOR var_return_row IN
<       SELECT * FROM public.dblink(fetch_jbilling_conn(), var_sql) AS rec_type (result_code boolean)
<     LOOP
<       IF (var_return_row.result_code = 'FALSE') THEN
<         var_return_row.result_code := false;
<         var_return_row.error_message := 'Jbilling Provisioning Failed.';
<         RETURN NEXT var_return_row;
<         RETURN;
<       END IF;
<     END LOOP;
<   END IF;
<   
---
>   var_sql := 'SELECT * FROM oss.archive_equipment(' || quote_literal(par_esn_hex) || ')';
>   FOR var_return_row IN
>     SELECT * FROM public.dblink(fetch_jbilling_conn(), var_sql) AS rec_type (result_code boolean)
>   LOOP
>     IF (var_return_row.result_code = 'FALSE') THEN
>       var_return_row.result_code := false;
>       var_return_row.error_message := 'Jbilling Provisioning Failed.';
>       RETURN NEXT var_return_row;
>       RETURN;
>     END IF;
>   END LOOP;
> 
25854c25002
< ALTER FUNCTION csctoss.ops_api_expire_ex(text, boolean) OWNER TO csctoss_owner;
---
> ALTER FUNCTION csctoss.ops_api_expire_ex(text) OWNER TO csctoss_owner;
26685c25833
< CREATE FUNCTION ops_api_modify(text, text, text) RETURNS SETOF ops_api_modify_retval
---
> CREATE FUNCTION ops_api_modify(text, text, text) RETURNS SETOF ops_api_retval
26695c25843,25846
<   var_return_row                ops_api_modify_retval%ROWTYPE;
---
>   v_numrows                     integer;
>   v_errmsg                      text;
> 
>   var_return_row                ops_api_retval%ROWTYPE;
26698,26706c25849,25858
<      
<         IF par_unique_identifier_type = ''
< 	OR par_old_value = ''
< 	OR par_new_value = '' THEN 
< 	    
<            RAISE EXCEPTION 'All or some of the input values are null ';
<     
<     ELSE 
<   -- Validate parameters.
---
> 
>   v_errmsg := 'ERROR - All or some of the input values are null.';
>   IF par_unique_identifier_type = ''
>                OR par_old_value = ''
>                OR par_new_value = '' THEN 
> 
>       RAISE EXCEPTION '';
>   ELSE 
>       -- Validate parameters.
>       v_errmsg := 'ERROR - Old value does not exist:  ' || par_old_value;
26708,26710c25860,25862
<       FROM unique_identifier
<       WHERE unique_identifier_type = par_unique_identifier_type
<       AND value = par_old_value ;
---
>         FROM unique_identifier
>        WHERE unique_identifier_type = par_unique_identifier_type
>          AND value = par_old_value ;
26713,26715c25865
<         
<          RAISE EXCEPTION 'Old value doesnt exists' ;
<         
---
>           RAISE EXCEPTION '' ;
26718,26719c25868,25869
<  -- check to see if MDN and MIN have the same values (only if the input type is MDN/MIN)
<      IF par_unique_identifier_type IN ('MDN', 'MIN') THEN
---
>       -- check to see if MDN and MIN have the same values (only if the input type is MDN/MIN)
>       IF par_unique_identifier_type IN ('MDN', 'MIN') THEN
26721,26733c25871,25876
<         UPDATE csctoss.unique_identifier 
<         SET value = par_new_value
<         WHERE equipment_id = var_equipment_id
<         AND unique_identifier_type = 'MDN'
<         AND value = par_old_value ;
<       
<         UPDATE csctoss.unique_identifier 
<         SET value = par_new_value
<         WHERE equipment_id = var_equipment_id
<         AND unique_identifier_type = 'MIN'
<         AND value = par_old_value ;
<     
<           IF NOT FOUND THEN
---
>           v_errmsg := 'ERROR - MDN update failed, old value ' || par_old_value || ', new value ' || par_new_value;
>           UPDATE csctoss.unique_identifier 
>           SET value = par_new_value
>           WHERE equipment_id = var_equipment_id
>           AND unique_identifier_type = 'MDN'
>           AND value = par_old_value ;
26735c25878,25881
<             RAISE EXCEPTION 'Update Failed';
---
>           GET DIAGNOSTICS v_numrows = ROW_COUNT;
>           IF v_numrows = 0 THEN
>               RAISE EXCEPTION '';
>           END IF;
26737,26748c25883,25888
<           END IF ;
<     
<    -- Also update the username/usergroup/radcheck tables for the username column
<         SELECT username INTO var_username
<         FROM username
<         WHERE (SUBSTR(username,1,10)) = par_old_value; 
<  
<          IF NOT FOUND THEN
<             
<              RAISE EXCEPTION 'Username doesnt match with MDN/MIN value' ;
<            
<          END IF;
---
>           v_errmsg := 'ERROR - MIN update failed, old value ' || par_old_value || ', new value ' || par_new_value;
>           UPDATE csctoss.unique_identifier 
>           SET value = par_new_value
>           WHERE equipment_id = var_equipment_id
>           AND unique_identifier_type = 'MIN'
>           AND value = par_old_value ;
26750,26781c25890,25893
<          UPDATE username 
<          SET username = replace(var_username, par_old_value, par_new_value)
<          WHERE SUBSTR(username,1,10) = par_old_value; 
< 	    
<          IF NOT FOUND THEN
< 
<            RAISE EXCEPTION 'Update Failed';
< 
<          END IF ;
< 	   
<          UPDATE usergroup
<          SET username = replace(var_username, par_old_value, par_new_value)
<          WHERE SUBSTR(username,1,10) = par_old_value;
< 	   
< 	 IF NOT FOUND THEN
< 
<            RAISE EXCEPTION 'Update Failed';
< 
<          END IF ;
<   
<         UPDATE radcheck
<         SET username = replace(var_username, par_old_value, par_new_value)
<         WHERE SUBSTR(username,1,10) = par_old_value;
<   
<          IF NOT FOUND THEN
<           
<             RAISE EXCEPTION 'Update Failed';
< 
<          END IF ;    
< 
<   ELSE
<   -- Update unique identifier value from old to new for other types.
---
>           GET DIAGNOSTICS v_numrows = ROW_COUNT;
>           IF v_numrows = 0 THEN
>               RAISE EXCEPTION '';
>           END IF;
26783,26787c25895,25899
<      UPDATE csctoss.unique_identifier
<      SET value = par_new_value
<      WHERE equipment_id = var_equipment_id
<      AND unique_identifier_type = par_unique_identifier_type
<      AND value = par_old_value ;
---
>           -- Also update the username/usergroup/radcheck tables for the username column
>           v_errmsg := 'ERROR - Username ' || var_username || ' does not match with MDN/MIN value.';
>           SELECT username INTO var_username
>           FROM username
>           WHERE (SUBSTR(username,1,10)) = par_old_value; 
26789c25901,25923
<        IF NOT FOUND THEN
---
>           IF NOT FOUND THEN
>               RAISE EXCEPTION '' ;
>           END IF;
>         
>           v_errmsg := 'ERROR - Update failed for username:  ' || var_username;
>           UPDATE username 
>           SET username = replace(var_username, par_old_value, par_new_value)
>           WHERE SUBSTR(username,1,10) = par_old_value; 
>   	    
>           GET DIAGNOSTICS v_numrows = ROW_COUNT;
>           IF v_numrows = 0 THEN
>               RAISE EXCEPTION '';
>           END IF;
>   	   
>           v_errmsg := 'ERROR - Update failed for usergroup; username:  ' || var_username;
>           UPDATE usergroup
>           SET username = replace(var_username, par_old_value, par_new_value)
>           WHERE SUBSTR(username,1,10) = par_old_value;
>   	   
>           GET DIAGNOSTICS v_numrows = ROW_COUNT;
>           IF v_numrows = 0 THEN
>               RAISE EXCEPTION '';
>           END IF;
26791c25925,25933
<           RAISE EXCEPTION 'Update Failed';
---
>           v_errmsg := 'ERROR - Update failed for radcheck; username:  ' || var_username;
>           UPDATE radcheck
>           SET username = replace(var_username, par_old_value, par_new_value)
>           WHERE SUBSTR(username,1,10) = par_old_value;
>     
>           GET DIAGNOSTICS v_numrows = ROW_COUNT;
>           IF v_numrows = 0 THEN
>               RAISE EXCEPTION '';
>           END IF;
26793c25935,25942
<        END IF ;
---
>       ELSE
>           -- Update unique identifier value from old to new for other types.
>           v_errmsg := 'ERROR - Update failed, unique_identifier_type ' || par_unique_identifier_type || ' value ' || par_new_value;
>           UPDATE csctoss.unique_identifier
>           SET value = par_new_value
>           WHERE equipment_id = var_equipment_id
>           AND unique_identifier_type = par_unique_identifier_type
>           AND value = par_old_value ;
26794a25944,25948
>           GET DIAGNOSTICS v_numrows = ROW_COUNT;
>           IF v_numrows = 0 THEN
>               RAISE EXCEPTION '';
>           END IF;
>       END IF;
26802c25956,25961
< END IF;
---
>   EXCEPTION
>     WHEN raise_exception THEN
>       var_return_row.result_code := false;
>       var_return_row.error_message := v_errmsg;
>       RETURN NEXT var_return_row;
>       RETURN;
26803a25963,25968
>     WHEN others THEN
>       var_return_row.result_code := false;
>       var_return_row.error_message:=v_errmsg;
>       RAISE NOTICE 'OTHER EXCEPTION:  %', v_errmsg;
>       RETURN NEXT var_return_row;
>       RETURN;
26814c25979
< CREATE FUNCTION ops_api_restore(text) RETURNS SETOF ops_api_restore_retval
---
> CREATE FUNCTION ops_api_restore(text) RETURNS SETOF ops_api_retval
26823c25988,25989
<   var_return_row                ops_api_restore_retval%ROWTYPE;
---
>   var_return_row                ops_api_retval%ROWTYPE;
>   v_errmsg                      text;
26827a25994
>   v_errmsg := 'ERROR:  Input ESN HEX Is Null. Please enter a value.';
26829c25996
<     RAISE EXCEPTION 'Input ESN HEX Is Null. Please enter a value ';
---
>     RAISE EXCEPTION '';
26831a25999
>     v_errmsg := 'ERROR:  ESN HEX value does not exist.';
26838c26006
<       RAISE EXCEPTION 'ESN HEX value doesnt exists' ;
---
>       RAISE EXCEPTION '' ;
26859,26860c26027,26038
<     IF EXISTS(SELECT TRUE FROM unique_identifier JOIN line_equipment le USING (equipment_id) WHERE value = var_mdn AND le.end_date IS NULL) THEN
<       IF EXISTS( SELECT TRUE FROM usergroup WHERE username LIKE var_username AND (groupname LIKE 'disconnected' OR groupname LIKE 'SERVICE-vzwretail_wallgarden_cnione')) THEN
---
>     v_errmsg := 'ERROR:  Cannot restore a canceled device.';
>     IF EXISTS(SELECT TRUE 
>                 FROM unique_identifier 
>                 JOIN line_equipment le USING (equipment_id) 
>                WHERE value = var_mdn 
>                  AND le.end_date IS NULL) THEN
>       v_errmsg := 'ERROR:  Device is not suspended and can not be restored.';
>       IF EXISTS( SELECT TRUE 
>                    FROM usergroup 
>                   WHERE username LIKE var_username 
>                     AND (groupname LIKE 'disconnected' OR 
>                          groupname LIKE 'SERVICE-vzwretail_wallgarden_cnione')) THEN
26870c26048
<         RAISE EXCEPTION 'Device is not suspended and can not be restored';
---
>         RAISE EXCEPTION '';
26873c26051
<       RAISE EXCEPTION 'Cannot restore a canceled device';
---
>       RAISE EXCEPTION '';
26881a26060,26073
>   EXCEPTION
>     WHEN raise_exception THEN
>       var_return_row.result_code := false;
>       var_return_row.error_message:=v_errmsg;
>       RETURN NEXT var_return_row;
>       RETURN;
> 
>     WHEN others THEN
>       var_return_row.result_code := false;
>       var_return_row.error_message:=v_errmsg;
>       RAISE NOTICE 'OTHER EXCEPTION:  %', v_errmsg;
>       RETURN NEXT var_return_row;
>       RETURN;
> 
27528,27531c26720,26735
< 			  --Update rad_reply IP
< 			    INSERT INTO radreply (username, attribute, op, value, priority)
< 			    	VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<                 RAISE NOTICE 'Inserted Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
---
> 	        	RAISE NOTICE 'Processing radreply: Username: %, static_ip: %.', par_username, var_static_ip;
> 				--Insert Framed IP Address to rad_reply
> 				IF (select true from radreply where attribute = 'Framed-IP-Address' and username = par_username) THEN
> 			        var_static_ip = 'ERROR - Framed-IP INSERT Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 			        RETURN var_static_ip;
> 			    ELSE
> 					INSERT INTO radreply (username, attribute, op, value, priority)
> 					              VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
> 					GET DIAGNOSTICS v_numrows = ROW_COUNT;
> 		    		IF v_numrows <> 1 then
> 			        	var_static_ip = 'ERROR - Framed-IP INSERT 2 Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 				        RETURN var_static_ip;
> 				    ELSE
> 				    	RAISE NOTICE 'Inserted Framed-IP attribute value into radreply table. [IP=%]', var_static_ip;
> 				    END IF;
> 				END IF;
27533,27544c26737,26767
< 	            --Update rad_reply Class
< 	            RAISE NOTICE 'Inserting Class attribute value into radreply table. [line_id=%]', par_line_id;
< 			    INSERT INTO radreply (username, attribute, op, value, priority)
< 			    	VALUES (par_username, 'Class', '=', par_line_id::text, 10);
< 				RAISE NOTICE 'Inserted Class attribute value into radreply table. [line_id=%]', par_line_id;
< 
< 	             --Update rad_reply IP
< 	            RAISE NOTICE 'Inserting Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
< 			    INSERT INTO radreply (username, attribute, op, value, priority)
< 			    	VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<                 RAISE NOTICE 'Inserted Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
<                        
---
> 				--Insert into rad_reply Class
> 				IF (select true from radreply where attribute = 'Class' and username = par_username) THEN
> 			        var_static_ip = 'ERROR - Class INSERT Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 			        RETURN var_static_ip;
> 			    ELSE
> 					INSERT INTO radreply (username, attribute, op, value, priority)
> 								VALUES (par_username, 'Class', '=', par_line_id::text, 10);
> 					GET DIAGNOSTICS v_numrows = ROW_COUNT;
> 		    		IF v_numrows <> 1 then
> 			        	var_static_ip = 'ERROR - Class INSERT 2 Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 				        RETURN var_static_ip;
> 				    ELSE
> 				    	RAISE NOTICE 'Inserted Class attribute value into radreply table. [IP=%]', var_static_ip;
> 				    END IF;
> 				END IF;
> 
> 				--Insert into rad_reply Framed-IP-Address
> 				IF (select true from radreply where attribute = 'Framed-IP-Address' and username = par_username) THEN
> 			        var_static_ip = 'ERROR - Framed-IP INSERT Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 			        RETURN var_static_ip;
> 			    ELSE
> 					INSERT INTO radreply (username, attribute, op, value, priority)
> 					 			VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
> 					GET DIAGNOSTICS v_numrows = ROW_COUNT;
> 		    		IF v_numrows <> 1 then
> 			        	var_static_ip = 'ERROR - Framed-IP INSERT 2 Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 				        RETURN var_static_ip;
> 				    ELSE
> 				    	RAISE NOTICE 'Inserted Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
> 				    END IF;
> 				END IF;
27556c26779
<                RAISE EXCEPTION 'OSS: Radreply Update Failed.';
---
>             RAISE EXCEPTION 'OSS: Radreply Update Failed.';
27584d26806
<         	RAISE NOTICE 'Processing radreply: Username: %, static_ip: %.', par_username, var_static_ip;
27586,27595c26808,26823
< 
< 				--Update rad_reply IP
< 				INSERT INTO radreply (username, attribute, op, value, priority)
< 				              VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
< 				GET DIAGNOSTICS v_numrows = ROW_COUNT;
< 	    		IF v_numrows <> 1 then
< 			        RAISE NOTICE 'INSERT Failed for radreply, Framed-IP : username - %, var_static_ip - %', par_username, var_static_ip;
< 			        RAISE EXCEPTION  '';
< 			    END IF;
< 
---
> 	        	RAISE NOTICE 'Processing radreply: Username: %, static_ip: %.', par_username, var_static_ip;
> 				--Insert Framed IP Address to rad_reply
> 				IF (select true from radreply where attribute = 'Framed-IP-Address' and username = par_username) THEN
> 			        var_static_ip = 'ERROR - Framed-IP INSERT Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 			        RETURN var_static_ip;
> 			    ELSE
> 					INSERT INTO radreply (username, attribute, op, value, priority)
> 					              VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
> 					GET DIAGNOSTICS v_numrows = ROW_COUNT;
> 		    		IF v_numrows <> 1 then
> 			        	var_static_ip = 'ERROR - Framed-IP INSERT 2 Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 				        RETURN var_static_ip;
> 				    ELSE
> 				    	RAISE NOTICE 'Inserted Framed-IP attribute value into radreply table. [IP=%]', var_static_ip;
> 				    END IF;
> 				END IF;
27596a26825,26839
> 				--Insert into rad_reply Class
> 				IF (select true from radreply where attribute = 'Class' and username = par_username) THEN
> 			        var_static_ip = 'ERROR - Class INSERT Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 			        RETURN var_static_ip;
> 			    ELSE
> 					INSERT INTO radreply (username, attribute, op, value, priority)
> 								VALUES (par_username, 'Class', '=', par_line_id::text, 10);
> 					GET DIAGNOSTICS v_numrows = ROW_COUNT;
> 		    		IF v_numrows <> 1 then
> 			        	var_static_ip = 'ERROR - Class INSERT 2 Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 				        RETURN var_static_ip;
> 				    ELSE
> 				    	RAISE NOTICE 'Inserted Class attribute value into radreply table. [IP=%]', var_static_ip;
> 				    END IF;
> 				END IF;
27598,27614c26841,26855
<                 --Update rad_reply Class
< 				INSERT INTO radreply (username, attribute, op, value, priority)
< 							VALUES (par_username, 'Class', '=', par_line_id::text, 10);
< 				GET DIAGNOSTICS v_numrows = ROW_COUNT;
< 	    		IF v_numrows <> 1 then
< 			        RAISE NOTICE 'INSERT Failed for radreply Class: username - %, var_static_ip - %', par_username, var_static_ip;
< 			        RAISE EXCEPTION  '';
< 			    END IF;
< 
< 				--Update rad_reply IP
< 				INSERT INTO radreply (username, attribute, op, value, priority)
< 				 			VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
< 				GET DIAGNOSTICS v_numrows = ROW_COUNT;
< 	    		IF v_numrows <> 1 then
< 			        RAISE NOTICE 'INSERT Failed for radreply 2nd Framed IP: username - %, var_static_ip - %', par_username, var_static_ip;
< 			        RAISE EXCEPTION  '';
< 			    END IF;
---
> 				--Insert into rad_reply Framed-IP-Address
> 				IF (select true from radreply where attribute = 'Framed-IP-Address' and username = par_username) THEN
> 			        var_static_ip = 'ERROR - Framed-IP INSERT Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 			        RETURN var_static_ip;
> 			    ELSE
> 					INSERT INTO radreply (username, attribute, op, value, priority)
> 					 			VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
> 					GET DIAGNOSTICS v_numrows = ROW_COUNT;
> 		    		IF v_numrows <> 1 then
> 			        	var_static_ip = 'ERROR - Framed-IP INSERT 2 Failed: username: '|| par_username || ', var_static_ip: '|| var_static_ip ||'.';
> 				        RETURN var_static_ip;
> 				    ELSE
> 				    	RAISE NOTICE 'Inserted Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
> 				    END IF;
> 				END IF;
27660,27661c26901,26902
<  END;
<   $_$;
---
> END;
> $_$;
27667c26908
< -- Name: ops_api_static_ip_assign_20171219(text, text, text, integer, integer); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: ops_api_static_ip_assign_v2(text, text, text, integer, integer, integer, integer); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
27670c26911
< CREATE FUNCTION ops_api_static_ip_assign_20171219(text, text, text, integer, integer) RETURNS text
---
> CREATE FUNCTION ops_api_static_ip_assign_v2(text, text, text, integer, integer, integer, integer) RETURNS boolean
27679a26921,26922
>   par_reservation_id            integer := $6;
>   par_staff_id                  integer := $7;
27681,27682c26924,26925
<   var_check_if_has_range        text;
< 
---
>   var_num_affected	        integer;
>   
27684,27687c26927
<     SET client_min_messages TO notice;
<     RAISE NOTICE 'ops_api_static_ip_assign_20171219 is called: parameters => [carrier=%][vrf=%][username=%][line_id=%][billing_entity_id=%]', par_carrier, par_vrf, par_username, par_line_id, par_billing_entity_id;
< 
< 	PERFORM public.set_change_log_staff_id(3);
---
>   PERFORM public.set_change_log_staff_id (par_staff_id);
27689,27703c26929
< 	IF  par_carrier IS NULL THEN
< 	 RAISE EXCEPTION 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP: CARRIER ID IS NULL';
< 	END IF;
< 	IF  par_username IS NULL THEN
< 	 RAISE EXCEPTION 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP: USERNAME ID IS NULL';
< 	END IF;
< 	IF  par_line_id IS NULL THEN
< 	 RAISE EXCEPTION 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP: LINE ID IS NULL';
< 	END IF;
< 	IF  par_billing_entity_id IS NULL THEN
< 	 RAISE EXCEPTION 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP : BILLING ENTITY IS NULL';
< 	END IF;
< 	IF  par_vrf IS NULL THEN
< 	 RAISE EXCEPTION 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP : GROUP NAME IS NULL';
< 	END IF;
---
>    --CHECK THE PARAMITERS
27705,27715c26931,26953
< 	SELECT static_ip
< 	INTO var_check_if_has_range
< 	FROM static_ip_pool sip
< 	JOIN static_ip_carrier_def sid
< 	ON (sid.carrier_def_id = sip.carrier_id)
< 	WHERE groupname = par_vrf
< 	AND carrier LIKE '%'||par_carrier||'%'
< 	AND billing_entity_id = par_billing_entity_id
< 	--AND static_ip not like '166.%'
< 	ORDER BY billing_entity_id
< 	LIMIT 1;
---
>    --CHECK CARRIER
>    IF  par_carrier IS NULL THEN
>     RAISE EXCEPTION 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP: CARRIER ID IS NULL'; 
>    END IF;
>    IF ((SELECT true FROM static_ip_carrier_def where carrier = par_carrier limit 1) IS NULL) THEN
>       RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: INVALID CARRIER'; 
>    END IF;
>    
>    --CHECK USERNAME
>    IF  par_username IS NULL THEN
>      RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: INVALID USERNAME'; 
>    END IF;
>    IF  par_username = '' THEN
>      RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: INVALID USERNAME'; 
>    END IF;
>    IF ((SELECT TRUE FROM username WHERE username = par_username LIMIT 1) IS NULL) THEN
>       RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR:USERNAME NOT IN USERNAME TABLE'; 
>    END IF;
>    
>    --CHECK LINE ID
>    IF  par_line_id IS NULL THEN
>     RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: LINE ID IS REQUIRED'; 
>    END IF;
27717,27718c26955,26962
< 	IF(var_check_if_has_range is not null)THEN
<             RAISE NOTICE 'We found IP pool.';
---
>    --CHECK BILLING ENTITY ID
>    IF  par_billing_entity_id IS NULL THEN
>     RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: BILLING ENTITY ID IS REQUIRED'; 
>    END IF;
>    IF ((SELECT TRUE FROM billing_entity WHERE billing_entity_id = par_billing_entity_id LIMIT 1) IS NULL) THEN
>       RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: BILLING ENITY ID IS NOT A VALID BILLING ENITY'; 
>    END IF;
>    
27720,27732c26964,26972
< 		SELECT static_ip
< 		INTO var_static_ip
< 		FROM static_ip_pool sip
< 		JOIN static_ip_carrier_def sid
< 		ON (sid.carrier_def_id = sip.carrier_id)
< 		WHERE groupname = par_vrf
< 		AND is_assigned = FALSE
< 		AND carrier LIKE '%'||par_carrier||'%'
< 		AND billing_entity_id = par_billing_entity_id
< 		--AND static_ip NOT LIKE '166.%'
< 		ORDER BY billing_entity_id , static_ip
< 		LIMIT 1
< 		FOR UPDATE;
---
>    IF  par_vrf IS NULL THEN
>     RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: GROUPNAME IS REQUIRED'; 
>    END IF;
>    IF  par_vrf = '' THEN
>     RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: INVALID GROUPNAME'; 
>    END IF;
>    IF ((SELECT TRUE FROM groupname WHERE groupname = par_vrf LIMIT 1) IS NULL) THEN
>       RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR:INVALID USERGROUP/VRF'; 
>    END IF;
27734,28133c26974,26979
< 		     IF (var_static_ip IS NOT NULL) THEN
<                          RAISE NOTICE 'We found an available IP address in the IP pool. [IP=%]', var_static_ip;
< 
<                        IF ( SELECT TRUE FROM radreply WHERE username = par_username AND attribute = 'Class') THEN
< 
< 			  --Update rad_reply IP
< 			    INSERT INTO radreply (username, attribute, op, value, priority)
< 			      VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<                             RAISE NOTICE 'Inserted Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
< 
<                        ELSE 
< 
<                             --Update rad_reply Class
<                             RAISE NOTICE 'Inserting Class attribute value into radreply table. [line_id=%]', par_line_id;
< 			    INSERT INTO radreply (username, attribute, op, value, priority)
< 			      VALUES (par_username, 'Class', '=', par_line_id::text, 10);
<                             RAISE NOTICE 'Inserted Class attribute value into radreply table. [line_id=%]', par_line_id;
< 
<                              --Update rad_reply IP
<                             RAISE NOTICE 'Inserting Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
< 			    INSERT INTO radreply (username, attribute, op, value, priority)
< 			       VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<                             RAISE NOTICE 'Inserted Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
<                        
<                        END IF; 
< 
<                         RAISE NOTICE 'Updating static_ip_pool table for [IP=% / VRF=%]', var_static_ip, par_vrf;
< 
< 			--Update static_ip_pool
< 			UPDATE static_ip_pool
< 			 SET is_assigned = 'TRUE' ,
<                          line_id = par_line_id
< 			WHERE static_ip = var_static_ip
< 			AND groupname = par_vrf;
< 
<                         IF NOT FOUND THEN
<                            RAISE EXCEPTION 'OSS: Radreply Update Failed.';
< 			ELSE
< 			   RETURN var_static_ip;
<                         END IF;
< 		    ELSE
< 			RAISE EXCEPTION 'OSS: No avalible staic IPs for ip block selected';
< 		    END IF;
< 
< 	    ELSE
< 		--no billing entity id
< 		SELECT static_ip
< 		INTO var_static_ip
< 		FROM static_ip_pool sip
< 		JOIN static_ip_carrier_def sid
< 		 ON (sid.carrier_def_id = sip.carrier_id)
< 		WHERE groupname = par_vrf
< 		AND is_assigned = FALSE
< 		AND carrier LIKE '%'||par_carrier||'%'
< 		AND billing_entity_id is null
< 		--AND static_ip NOT LIKE '166.%'
< 		ORDER BY static_ip
< 		LIMIT 1
< 		FOR UPDATE;
< 
< 		IF (var_static_ip IS NOT NULL) THEN
< 
<                      IF( SELECT TRUE FROM radreply WHERE username = par_username AND attribute = 'Class') THEN
< 
< 			--Update rad_reply IP
< 			INSERT INTO radreply (username, attribute, op, value, priority)
< 			 VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
< 
<                       ELSE 
< 
<                           --Update rad_reply Class
< 			INSERT INTO radreply (username, attribute, op, value, priority)
< 			 VALUES (par_username, 'Class', '=', par_line_id::text, 10);
< 
<                            --Update rad_reply IP
< 			INSERT INTO radreply (username, attribute, op, value, priority)
< 			 VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<                        
<                        END IF; 
< 			--Update static_ip_pool
< 			UPDATE static_ip_pool
< 			 SET is_assigned = 'TRUE' ,
<                          line_id = par_line_id
< 			WHERE static_ip = var_static_ip
< 			AND groupname = par_vrf;
< 
<                         IF NOT FOUND THEN
<                            RAISE EXCEPTION 'OSS: Radreply Update Failed.';
< 			ELSE
< 			   RETURN var_static_ip;
<                         END IF;
< 
< 		ELSE
< 			--check input paramiters for a valid range
< 			SELECT static_ip
< 			INTO var_static_ip
< 			FROM static_ip_pool sip
< 			JOIN static_ip_carrier_def sid
< 			 ON (sid.carrier_def_id = sip.carrier_id)
< 			WHERE groupname = par_vrf
< 			AND carrier LIKE '%'||par_carrier||'%'
< 			AND billing_entity_id is null
< 			--AND static_ip NOT LIKE '166.%'
< 			ORDER BY static_ip
< 			LIMIT 1;
< 
< 			IF (var_static_ip IS NOT NULL) THEN
< 				RAISE EXCEPTION 'OSS: No avalible staic ips for ip block selected';
< 			ELSE
< 				RAISE EXCEPTION 'OSS: No IP Block For given VRF/CARRIER combination.';
< 			END IF;
< 
< 		END IF;
< 	END IF;
< 
<  END;
<   $_$;
< 
< 
< ALTER FUNCTION csctoss.ops_api_static_ip_assign_20171219(text, text, text, integer, integer) OWNER TO csctoss_owner;
< 
< --
< -- Name: ops_api_static_ip_assign_lo(text, text, text, integer, integer); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE FUNCTION ops_api_static_ip_assign_lo(text, text, text, integer, integer) RETURNS text
<     LANGUAGE plpgsql
<     AS $_$
< DECLARE
< 
<     par_carrier                   text := $1;
<     par_vrf                       text := $2;
<     par_username                  text := $3;
<     par_line_id                   integer := $4;
<     par_billing_entity_id         integer := $5;
<     var_static_ip                 text;
<     var_check_if_has_range        text;
< 
< BEGIN
<     SET client_min_messages TO notice;
<     RAISE NOTICE 'ops_api_static_ip_assign_lo is called: parameters => [carrier=%][vrf=%][username=%][line_id=%][billing_entity_id=%]', par_carrier, par_vrf, par_username, par_line_id, par_billing_entity_id;
< 
<     PERFORM public.set_change_log_staff_id(3);
< 
<     IF  par_carrier IS NULL THEN
<         RAISE NOTICE 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP: CARRIER ID IS NULL';
<         var_static_ip = 'ERROR:  OSS - NOT ENOUGH PARAMETERS TO ASSIGN IP: CARRIER ID IS NULL';
<         RETURN var_static_ip;
<     END IF;
<     IF  par_username IS NULL THEN
<         RAISE NOTICE 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP: USERNAME ID IS NULL';
<         var_static_ip = 'ERROR:  OSS - NOT ENOUGH PARAMETERS TO ASSIGN IP: USERNAME ID IS NULL';
<         RETURN var_static_ip;
<     END IF;
<     IF  par_line_id IS NULL THEN
<         RAISE NOTICE 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP: LINE ID IS NULL';
<         var_static_ip = 'ERROR:  OSS - NOT ENOUGH PARAMETERS TO ASSIGN IP: USERNAME ID IS NULL';
<         RETURN var_static_ip;
<     END IF;
<     IF  par_billing_entity_id IS NULL THEN
<         RAISE NOTICE 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP : BILLING ENTITY IS NULL';
<         var_static_ip = 'ERROR:  OSS - NOT ENOUGH PARAMETERS TO ASSIGN IP : BILLING ENTITY IS NULL';
<         RETURN var_static_ip;
<     END IF;
<     IF  par_vrf IS NULL THEN
<         RAISE NOTICE 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP : GROUP NAME IS NULL';
<         var_static_ip = 'ERROR:  OSS - NOT ENOUGH PARAMETERS TO ASSIGN IP : GROUP NAME IS NULL';
<         RETURN var_static_ip;
<     END IF;
< 
<     SELECT static_ip
<     INTO var_check_if_has_range
<     FROM static_ip_pool sip
<     JOIN static_ip_carrier_def sid
<     ON (sid.carrier_def_id = sip.carrier_id)
<     WHERE groupname = par_vrf
<     AND carrier LIKE '%'||par_carrier||'%'
<     AND billing_entity_id = par_billing_entity_id
<     --AND static_ip not like '166.%'
<     ORDER BY billing_entity_id
<     LIMIT 1;
< 
<     IF FOUND THEN
<         RAISE NOTICE 'We found IP pool.';
<         SELECT static_ip
<           INTO var_static_ip
<           FROM static_ip_pool sip
<           JOIN static_ip_carrier_def sid
<             ON (sid.carrier_def_id = sip.carrier_id)
<          WHERE groupname = par_vrf
<            AND is_assigned = FALSE
<            AND carrier LIKE '%'||par_carrier||'%'
<            AND billing_entity_id = par_billing_entity_id
<          ORDER BY billing_entity_id , static_ip
<          LIMIT 1
<            FOR UPDATE;
<         IF FOUND THEN
< 
<             RAISE NOTICE 'Available address in the IP pool. [IP=%]', var_static_ip;
< 
<             IF ( SELECT TRUE 
<                    FROM radreply 
<                   WHERE username = par_username 
<                     AND attribute = 'Class') THEN
< 
<                 INSERT INTO radreply (username, attribute, op, value, priority)
<                      VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<                 RAISE NOTICE 'Inserted Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
< 
<             ELSE 
< 
<                 --Update rad_reply Class
<                 RAISE NOTICE 'Inserting Class attribute value into radreply table. [line_id=%]', par_line_id;
<                 INSERT INTO radreply (username, attribute, op, value, priority)
<                      VALUES (par_username, 'Class', '=', par_line_id::text, 10);
<                 RAISE NOTICE 'Inserted Class attribute value into radreply table. [line_id=%]', par_line_id;
< 
<                  --Update rad_reply IP
<                 RAISE NOTICE 'Inserting Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
<                 INSERT INTO radreply (username, attribute, op, value, priority)
<                     VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<                 RAISE NOTICE 'Inserted Framed-IP-Address attribute value into radreply table. [IP=%]', var_static_ip;
<                            
<             END IF; 
< 
<             RAISE NOTICE 'Updating static_ip_pool table for [IP=% / VRF=%]', var_static_ip, par_vrf;
< 
<             --Update static_ip_pool
<             UPDATE static_ip_pool
<                SET is_assigned = 'TRUE' 
<                   ,line_id = par_line_id
<              WHERE static_ip = var_static_ip
<                AND groupname = par_vrf;
< 
<             -- Check if static_ip is valid.
<             IF NOT FOUND THEN
<                 RAISE NOTICE 'UPDATE failure to static_ip_pool.';
<                 var_static_ip = 'ERROR:  UPDATE failure to static_ip_pool.';
<                 RETURN var_static_ip;
<             ELSE
<                 RETURN var_static_ip;
<             END IF;
<         ELSE
<             RAISE NOTICE 'OSS: No avalible staic IPs for ip block selected';
<             var_static_ip = 'ERROR:  No avalible static IPs for ip block selected.';
<             RETURN var_static_ip;
<         END IF;
<     ELSE
<         --no billing entity id
<         SELECT static_ip
<         INTO var_static_ip
<         FROM static_ip_pool sip
<         JOIN static_ip_carrier_def sid
<          ON (sid.carrier_def_id = sip.carrier_id)
<         WHERE groupname = par_vrf
<         AND is_assigned = FALSE
<         AND carrier LIKE '%'||par_carrier||'%'
<         AND billing_entity_id is null
<         --AND static_ip NOT LIKE '166.%'
<         ORDER BY static_ip
<         LIMIT 1
<         FOR UPDATE;
< 
<         IF FOUND THEN
< 
<             IF( SELECT TRUE FROM radreply WHERE username = par_username AND attribute = 'Class') THEN
< 
<                 --Update rad_reply IP
<                 INSERT INTO radreply (username, attribute, op, value, priority)
<                      VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<             ELSE 
< 
<                 --Update rad_reply Class
<                 INSERT INTO radreply (username, attribute, op, value, priority)
<                  VALUES (par_username, 'Class', '=', par_line_id::text, 10);
< 
<                 --Update rad_reply IP
<                 INSERT INTO radreply (username, attribute, op, value, priority)
<                  VALUES (par_username, 'Framed-IP-Address', '=', var_static_ip::text, 10);
<                        
<             END IF; 
<             --Update static_ip_pool
<             UPDATE static_ip_pool
<              SET is_assigned = 'TRUE' ,
<                                line_id = par_line_id
<             WHERE static_ip = var_static_ip
<             AND groupname = par_vrf;
< 
<             IF NOT FOUND THEN
<                 RAISE NOTICE 'OSS: Radreply Update Failed.';
<                 var_static_ip = 'ERROR:  OSS: Radreply Update Failed.';
<                 RETURN var_static_ip;
<             ELSE
<                RETURN var_static_ip;
<             END IF;
< 
<         ELSE
<             --check input paramiters for a valid range
<             SELECT static_ip
<             INTO var_static_ip
<             FROM static_ip_pool sip
<             JOIN static_ip_carrier_def sid
<              ON (sid.carrier_def_id = sip.carrier_id)
<             WHERE groupname = par_vrf
<             AND carrier LIKE '%'||par_carrier||'%'
<             AND billing_entity_id is null
<             --AND static_ip NOT LIKE '166.%'
<             ORDER BY static_ip
<             LIMIT 1;
< 
<             IF (var_static_ip IS NOT NULL) THEN
<                 RAISE NOTICE 'OSS: No avalible staic ips for ip block selected';
<                 var_static_ip = 'ERROR:  OSS: No avalible staic ips for ip block selected.';
<                 RETURN var_static_ip;
<             ELSE
<                 RAISE NOTICE 'OSS: No IP Block For given VRF/CARRIER combination.';
<                 var_static_ip = 'ERROR:  OSS: No IP Block For given VRF/CARRIER combination.';
<                 RETURN var_static_ip;
<             END IF;
<         END IF;
<     END IF;
< END;
<   $_$;
< 
< 
< ALTER FUNCTION csctoss.ops_api_static_ip_assign_lo(text, text, text, integer, integer) OWNER TO csctoss_owner;
< 
< --
< -- Name: ops_api_static_ip_assign_v2(text, text, text, integer, integer, integer, integer); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE FUNCTION ops_api_static_ip_assign_v2(text, text, text, integer, integer, integer, integer) RETURNS boolean
<     LANGUAGE plpgsql
<     AS $_$
< DECLARE
< 
<   par_carrier                   text := $1;
<   par_vrf                       text := $2;
<   par_username                  text := $3;
<   par_line_id			integer := $4;
<   par_billing_entity_id         integer := $5;
<   par_reservation_id            integer := $6;
<   par_staff_id                  integer := $7;
<   var_static_ip                 text;
<   var_num_affected	        integer;
<   
< BEGIN
<   PERFORM public.set_change_log_staff_id (par_staff_id);
< 
<    --CHECK THE PARAMITERS
< 
<    --CHECK CARRIER
<    IF  par_carrier IS NULL THEN
<     RAISE EXCEPTION 'OSS: NOT ENOUGH PARAMETERS TO ASSIGN IP: CARRIER ID IS NULL'; 
<    END IF;
<    IF ((SELECT true FROM static_ip_carrier_def where carrier = par_carrier limit 1) IS NULL) THEN
<       RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: INVALID CARRIER'; 
<    END IF;
<    
<    --CHECK USERNAME
<    IF  par_username IS NULL THEN
<      RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: INVALID USERNAME'; 
<    END IF;
<    IF  par_username = '' THEN
<      RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: INVALID USERNAME'; 
<    END IF;
<    IF ((SELECT TRUE FROM username WHERE username = par_username LIMIT 1) IS NULL) THEN
<       RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR:USERNAME NOT IN USERNAME TABLE'; 
<    END IF;
<    
<    --CHECK LINE ID
<    IF  par_line_id IS NULL THEN
<     RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: LINE ID IS REQUIRED'; 
<    END IF;
< 
<    --CHECK BILLING ENTITY ID
<    IF  par_billing_entity_id IS NULL THEN
<     RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: BILLING ENTITY ID IS REQUIRED'; 
<    END IF;
<    IF ((SELECT TRUE FROM billing_entity WHERE billing_entity_id = par_billing_entity_id LIMIT 1) IS NULL) THEN
<       RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: BILLING ENITY ID IS NOT A VALID BILLING ENITY'; 
<    END IF;
<    
< 
<    IF  par_vrf IS NULL THEN
<     RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: GROUPNAME IS REQUIRED'; 
<    END IF;
<    IF  par_vrf = '' THEN
<     RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR: INVALID GROUPNAME'; 
<    END IF;
<    IF ((SELECT TRUE FROM groupname WHERE groupname = par_vrf LIMIT 1) IS NULL) THEN
<       RAISE EXCEPTION 'OSS: IP ASSIGNMENT ERROR:INVALID USERGROUP/VRF'; 
<    END IF;
< 
<     RAISE NOTICE 'reservation_id = %',par_reservation_id;
<     --Assigning the device to a reserved IP, if a reservation ID is passed to the function. 
<     IF par_reservation_id IS NOT NULL THEN
<       --GET IP FROM RESERVATION
<       RAISE NOTICE 'par_reservation_id (reservation) = %',par_reservation_id;
<       SELECT static_ip INTO  var_static_ip from static_ip_active_reservations_vw where reservation_id = par_reservation_id AND carrier = par_carrier AND groupname = par_vrf;
---
>     RAISE NOTICE 'reservation_id = %',par_reservation_id;
>     --Assigning the device to a reserved IP, if a reservation ID is passed to the function. 
>     IF par_reservation_id IS NOT NULL THEN
>       --GET IP FROM RESERVATION
>       RAISE NOTICE 'par_reservation_id (reservation) = %',par_reservation_id;
>       SELECT static_ip INTO  var_static_ip from static_ip_active_reservations_vw where reservation_id = par_reservation_id AND carrier = par_carrier AND groupname = par_vrf;
28233c27079
< CREATE FUNCTION ops_api_suspend(text) RETURNS SETOF ops_api_suspend_retval
---
> CREATE FUNCTION ops_api_suspend(text) RETURNS SETOF ops_api_retval
28244c27090,27093
<   var_return_row                ops_api_suspend_retval%ROWTYPE;
---
>   v_numrows                     integer;
>   v_errmsg                      text;
> 
>   var_return_row                ops_api_retval%ROWTYPE;
28248a27098
>   v_errmsg := 'ERROR:  Input ESN HEX Is Null. Please enter a value.';
28250c27100
<     RAISE EXCEPTION 'Input ESN HEX Is Null. Please enter a value ';
---
>     RAISE EXCEPTION '';
28253a27104
>   v_errmsg := 'ERROR:  ESN HEX value does not exist - ' || par_esn_hex;
28260c27111
<     RAISE EXCEPTION 'ESN HEX value doesnt exists' ;
---
>     RAISE EXCEPTION '' ;
28267a27119
>     v_errmsg := 'ERROR:  Username does not exist for the device ' || var_equipment_id;
28273c27125
<       RAISE EXCEPTION 'Username doesnt exists for the device';
---
>       RAISE EXCEPTION '';
28278c27130,27133
<   IF EXISTS (SELECT TRUE FROM line WHERE radius_username LIKE var_username AND line_label LIKE par_esn_hex AND end_date IS NULL) THEN
---
>   IF EXISTS (SELECT TRUE 
>                FROM line 
>               WHERE radius_username LIKE var_username 
>                 AND line_label LIKE par_esn_hex AND end_date IS NULL) THEN
28280c27135,27138
<       IF NOT EXISTS( SELECT TRUE FROM usergroup WHERE username LIKE var_username AND groupname LIKE 'SERVICE-vzwretail_wallgarden_cnione') THEN
---
>       IF NOT EXISTS( SELECT TRUE 
>                        FROM usergroup 
>                       WHERE username LIKE var_username 
>                         AND groupname LIKE 'SERVICE-vzwretail_wallgarden_cnione') THEN
28285c27143,27146
<       IF NOT EXISTS( SELECT TRUE FROM usergroup WHERE username LIKE var_username AND groupname LIKE 'userdisconnected') THEN
---
>       IF NOT EXISTS( SELECT TRUE 
>                        FROM usergroup 
>                       WHERE username LIKE var_username 
>                         AND groupname LIKE 'userdisconnected') THEN
28289c27150
< 
---
>     END IF;
28294c27155,27159
<         IF NOT EXISTS( SELECT TRUE FROM usergroup WHERE username LIKE var_username AND groupname LIKE 'SERVICE-vzwretail_wallgarden_cnione' AND priority = 1) THEN
---
>         IF NOT EXISTS( SELECT TRUE 
>                          FROM usergroup 
>                         WHERE username LIKE var_username 
>                           AND groupname LIKE 'SERVICE-vzwretail_wallgarden_cnione' 
>                           AND priority = 1) THEN
28299c27164,27168
<         IF NOT EXISTS( SELECT TRUE FROM usergroup WHERE username LIKE var_username AND groupname LIKE 'disconnected' AND priority = 1) THEN
---
>         IF NOT EXISTS( SELECT TRUE 
>                          FROM usergroup 
>                         WHERE username LIKE var_username 
>                           AND groupname LIKE 'disconnected' 
>                           AND priority = 1) THEN
28313a27183,27196
>   EXCEPTION
>     WHEN raise_exception THEN
>       var_return_row.result_code := false;
>       var_return_row.error_message:=v_errmsg;
>       RETURN NEXT var_return_row;
>       RETURN;
> 
>     WHEN others THEN
>       var_return_row.result_code := false;
>       var_return_row.error_message:=v_errmsg;
>       RAISE NOTICE 'OTHER EXCEPTION:  %', v_errmsg;
>       RETURN NEXT var_return_row;
>       RETURN;
> 
29223c28106
< CREATE FUNCTION ops_change_static_ip(integer, text, text) RETURNS ops_change_static_ip_retval
---
> CREATE FUNCTION ops_change_static_ip(integer, text, text) RETURNS ops_api_retval
29234c28117,28120
<   var_return_row                ops_change_static_ip_retval%ROWTYPE;
---
>   v_numrows                     integer;
>   var_return_row                ops_api_retval%ROWTYPE;
> 
>   v_errmsg                      text;  
29237,29251d28122
<   IF par_line_id IS NULL THEN
<     var_return_row.result_code := false;
<     var_return_row.error_message := 'LINE ID CAN NOT BE NULL';
<     RETURN var_return_row;
<   END IF;
<   IF par_old_ip IS NULL THEN
<     var_return_row.result_code := false;
<     var_return_row.error_message := 'OLD IP CAN NOT BE NULL';
<     RETURN var_return_row;
<   END IF;
<   IF par_new_ip IS NULL THEN
<     var_return_row.result_code := false;
<     var_return_row.error_message := 'NEW IP CAN NOT BE NULL';
<     RETURN var_return_row;
<   END IF;
29252a28124,28130
>   IF par_line_id IS NULL
>     OR par_old_ip IS NULL
>     OR par_new_ip IS NULL
>   THEN
>       v_errmsg  := 'All or some of the input parameters are NULL or empty';
>       RAISE EXCEPTION 'ERROR: No parameters';
>   END IF;
29263,29266c28141,28143
<   IF var_username IS NULL THEN
<     var_return_row.result_code := false;
<     var_return_row.error_message := 'ERROR: radius_username not found on line table. [line_id=' || par_line_id || ']';
<     RETURN var_return_row;
---
>   IF NOT FOUND THEN
>       v_errmsg := 'ERROR: radius_username not found on line table. [line_id=' || par_line_id || ']';
>       RAISE EXCEPTION '';
29277,29280c28154,28156
<   IF var_old_rad_reply_id IS NULL THEN
<     var_return_row.result_code := false;
<     var_return_row.error_message := 'ERROR: Old IP address was not assigned in radreply table.';
<     RETURN var_return_row;
---
>   IF NOT FOUND THEN
>       v_errmsg := 'ERROR: Old IP address was not assigned in radreply table.';
>       RAISE EXCEPTION '';
29291a28168,28172
>   IF NOT FOUND THEN
>       v_errmsg := 'ERROR: New IP address was not retrieved from static_ip_pool table.';
>       RAISE EXCEPTION '';
>   END IF;
> 
29300,29303c28181,28184
<   IF var_static_ip_pool_id_new IS NULL AND par_new_ip NOT LIKE '166.%' THEN
<     var_return_row.result_code := false;
<     var_return_row.error_message := 'ERROR: New IP address is not available in static_ip_pool table.';
<     RETURN var_return_row;
---
>   IF NOT FOUND THEN
>       v_errmsg := 'ERROR: Old IP address was not retrieved from static_ip_pool table.';
>       RAISE EXCEPTION '';
>   END IF;
29304a28186,28188
>   IF var_static_ip_pool_id_new IS NULL AND par_new_ip NOT LIKE '166.%' THEN
>     v_errmsg := 'ERROR: New IP address is not available in static_ip_pool table.';
>     RAISE EXCEPTION '';
29307,29310c28191,28192
<       var_return_row.result_code := false;
<       var_return_row.error_message := 'ERROR: Could not find old IP address in static_ip_pool table.';
<       RETURN var_return_row;
< 
---
>       v_errmsg := 'ERROR: Could not find old IP address in static_ip_pool table.';
>       RAISE EXCEPTION '';
29313a28196
>         v_errmsg := 'ERROR: Failure in update of old static_ip_pool';
29315,29319c28198,28207
<           SET
<            is_assigned = false,
<            line_id = NULL
<         WHERE id = var_static_ip_pool_id_old
<         AND static_ip = par_old_ip;
---
>            SET is_assigned = false
>               ,line_id = NULL
>          WHERE id = var_static_ip_pool_id_old
>            AND static_ip = par_old_ip;
> 
>         GET DIAGNOSTICS v_numrows = ROW_COUNT;
>         IF v_numrows = 0 THEN
>             RAISE EXCEPTION '';
>         END IF;
> 
29324,29329c28212,28221
<         UPDATE
<           static_ip_pool
<         SET
<           is_assigned = true,
<           line_id = par_line_id
<         WHERE static_ip = par_new_ip;
---
>         v_errmsg := 'ERROR: Failure in update of new static_ip_pool';
>         UPDATE static_ip_pool
>            SET is_assigned = true
>               ,line_id = par_line_id
>          WHERE static_ip = par_new_ip;
> 
>         GET DIAGNOSTICS v_numrows = ROW_COUNT;
>         IF v_numrows = 0 THEN
>             RAISE EXCEPTION '';
>         END IF;
29333,29338c28225,28234
<       UPDATE
<         radreply
<       SET
<         value = par_new_ip
<       WHERE username = var_username
<       AND id  = var_old_rad_reply_id;
---
>       v_errmsg := 'ERROR: Failure in update of new static_ip_pool';
>       UPDATE radreply
>          SET value = par_new_ip
>        WHERE username = var_username
>         AND id  = var_old_rad_reply_id;
> 
>       GET DIAGNOSTICS v_numrows = ROW_COUNT;
>       IF v_numrows = 0 THEN
>           RAISE EXCEPTION '';
>       END IF;
29341a28238,28239
>   v_errmsg := 'Static IP address has been changed from ' || par_old_ip || ' to ' || par_new_ip || ' for line_id=' || par_line_id;
> 
29343c28241
<   var_return_row.error_message := 'Static IP address has been changed from ' || par_old_ip || ' to ' || par_new_ip || ' for line_id=' || par_line_id;
---
>   var_return_row.error_message := v_errmsg;
29345a28244,28256
> EXCEPTION
>   WHEN raise_exception THEN
>       var_return_row.result_code := false;
>       var_return_row.error_message:=v_errmsg;
>       RAISE NOTICE 'rt_oss_rma: when raise_exception:  % ',v_errmsg;
>       RETURN var_return_row;
> 
>   WHEN others THEN
>       v_errmsg := 'Unknown error!';
>       var_return_row.result_code := false;
>       var_return_row.error_message := v_errmsg;
>       RAISE NOTICE 'ERROR:  Unknown Error! ';
>       RETURN var_return_row;
32102,32116c31013,31019
<      IF NOT FOUND THEN
<         RAISE NOTICE 'TEST FAILED: %',v_errmsg;
<         RAISE EXCEPTION '';
<      END IF;
<      RAISE NOTICE '-------------------------------------------------------------------------------------------------';
<      RAISE NOTICE 'Billing Entity: %: %', v_beid,v_bename;
<      RAISE NOTICE '-------------------------------------------------------------------------------------------------';
< ---
< 
<      v_errmsg:='A serial number for replacement equipment must be present in UI table';
<      SELECT value INTO v_old_sn
<      FROM unique_identifier
<      WHERE 1=1
<        AND equipment_id = v_oequipid
<        AND unique_identifier_type = 'SERIAL NUMBER';
---
>     IF NOT FOUND THEN
>       RAISE NOTICE 'TEST FAILED: %',v_errmsg;
>       RAISE EXCEPTION '';
>     END IF;
>     RAISE NOTICE '-------------------------------------------------------------------------------------------------';
>     RAISE NOTICE 'Billing Entity: %: %', v_beid,v_bename;
>     RAISE NOTICE '-------------------------------------------------------------------------------------------------';
32117a31021,31026
>     v_errmsg:='A serial number for replacement equipment must be present in UI table';
>     SELECT value INTO v_old_sn
>     FROM unique_identifier
>     WHERE 1=1
>       AND equipment_id = v_oequipid
>       AND unique_identifier_type = 'SERIAL NUMBER';
32251d31159
< --
32265,32310c31173,31218
<       RAISE NOTICE '----- Begin Function data ----------';
<       RAISE NOTICE 'old ESN           : %',in_old_esn;
<       RAISE NOTICE 'old ip            : %',v_old_ip;
<       RAISE NOTICE 'old username      : %',v_old_username;
<       RAISE NOTICE 'old groupname     : %',v_old_groupname;
<       RAISE NOTICE 'old equipment id  : %',v_oequipid;
<       RAISE NOTICE 'old model         : %',v_old_model;
<       RAISE NOTICE 'new ESN           : %',in_new_esn;
<       RAISE NOTICE 'new equipment id  : %',v_nequipid;
<       RAISE NOTICE 'new model         : %',v_new_model;
<       RAISE NOTICE 'carrier           : %',v_carrier;
<       RAISE NOTICE 'billing entity    : %',v_beid;
<       RAISE NOTICE 'billing entity nm : %',v_bename;
<       RAISE NOTICE 'new username      : %',v_new_username;
<       RAISE NOTICE 'new groupname     : %',v_new_groupname;
<       RAISE NOTICE 'static ip?        : %',v_static_ip;
<       RAISE NOTICE '----- End of Function data ----------';
< 
<       v_errmsg:='Update line equipment to set end date on Original equipment';
<       RAISE NOTICE 'Update line_equipment for equipment_id: %',v_oequipid;
<       UPDATE line_equipment set end_date = current_date
<       where 1=1
<         and equipment_id = v_oequipid
<         and line_id = v_line_id
<         and end_date is null;
<       GET DIAGNOSTICS v_numrows = ROW_COUNT;
<       IF v_numrows = 0 THEN
<           RAISE NOTICE 'Update failed: %',v_errmsg;
<           RAISE EXCEPTION '';
<       END IF;
<       RAISE NOTICE 'DIAG v_numrows: %',v_numrows;
< --
<       v_errmsg:='Unassign old static IP in static_ip_pool';
<       IF v_old_ip IS NOT null
<       THEN
<           UPDATE static_ip_pool
<              SET is_assigned = false,
<              line_id = null
<           WHERE 1=1
<             AND static_ip = v_old_ip;
<           GET DIAGNOSTICS v_numrows = ROW_COUNT;
<           IF v_numrows = 0 THEN
<               RAISE NOTICE 'Update failed: %',v_errmsg;
<               RAISE EXCEPTION '';
<           END IF;
<      END IF;
---
>     RAISE NOTICE '----- Begin Function data ----------';
>     RAISE NOTICE 'old ESN           : %',in_old_esn;
>     RAISE NOTICE 'old ip            : %',v_old_ip;
>     RAISE NOTICE 'old username      : %',v_old_username;
>     RAISE NOTICE 'old groupname     : %',v_old_groupname;
>     RAISE NOTICE 'old equipment id  : %',v_oequipid;
>     RAISE NOTICE 'old model         : %',v_old_model;
>     RAISE NOTICE 'new ESN           : %',in_new_esn;
>     RAISE NOTICE 'new equipment id  : %',v_nequipid;
>     RAISE NOTICE 'new model         : %',v_new_model;
>     RAISE NOTICE 'carrier           : %',v_carrier;
>     RAISE NOTICE 'billing entity    : %',v_beid;
>     RAISE NOTICE 'billing entity nm : %',v_bename;
>     RAISE NOTICE 'new username      : %',v_new_username;
>     RAISE NOTICE 'new groupname     : %',v_new_groupname;
>     RAISE NOTICE 'static ip?        : %',v_static_ip;
>     RAISE NOTICE '----- End of Function data ----------';
> 
>     v_errmsg:='Update line equipment to set end date on Original equipment';
>     RAISE NOTICE 'Update line_equipment for equipment_id: %',v_oequipid;
>     UPDATE line_equipment set end_date = current_date
>     where 1=1
>       and equipment_id = v_oequipid
>       and line_id = v_line_id
>       and end_date is null;
>     GET DIAGNOSTICS v_numrows = ROW_COUNT;
>     IF v_numrows = 0 THEN
>         RAISE NOTICE 'Update failed: %',v_errmsg;
>         RAISE EXCEPTION '';
>     END IF;
>     RAISE NOTICE 'DIAG v_numrows: %',v_numrows;
> 
>     v_errmsg:='Unassign old static IP in static_ip_pool';
>     IF v_old_ip IS NOT null
>     THEN
>         UPDATE static_ip_pool
>            SET is_assigned = false,
>            line_id = null
>         WHERE 1=1
>           AND static_ip = v_old_ip;
>         GET DIAGNOSTICS v_numrows = ROW_COUNT;
>         IF v_numrows = 0 THEN
>             RAISE NOTICE 'Update failed: %',v_errmsg;
>             RAISE EXCEPTION '';
>         END IF;
>     END IF;
32424c31332
<     RAISE NOTICE '[rt_oss_rma] Inserted into line_equipment succeeded.';
---
>     RAISE NOTICE '[rt_oss_rma] Inserted into line_equipment succeeded. Move on to static IP handling.';
32428d31335
<     RAISE NOTICE 'Processing equipment_warranty for new equipment id: %', v_nequipid;
32449d31355
<         RAISE NOTICE 'Calling function ops_api_static_ip(%,%,%,%,%)',v_carrier, v_new_groupname, v_new_username, v_line_id, v_beid;
36803c35709
< CREATE FUNCTION update_unique_identifier_value(integer, text, text, text) RETURNS SETOF update_unique_identifier_value_retval
---
> CREATE FUNCTION update_unique_identifier_value(integer, text, text, text) RETURNS SETOF ops_api_retval
36812c35718,35721
<   var_return_row                update_unique_identifier_value_retval%ROWTYPE;
---
>   v_numrows                     integer;
>   var_return_row                ops_api_retval%ROWTYPE;
> 
>   v_errmsg                      text;
36826,36829c35735,35736
<     var_return_row.result_code := false ;
<     var_return_row.error_message := 'Old value does not exist.' ;
<     RETURN NEXT var_return_row ;
<     RETURN ;
---
>     v_errmsg := 'Old value does not exist.';
>     RAISE EXCEPTION '';
36831a35739,35746
>   IF ( SELECT TRUE 
>          FROM unique_identifier 
>         WHERE unique_identifier_type = par_unique_identifier_type
>           AND value = par_new_value ) THEN
>     v_errmsg := 'Unique identifier type ' || par_unique_identifier_type || ' with value ' || par_new_value || ' already exists';
>     RAISE EXCEPTION '';
>   END IF;
> 
36839,36844c35754,35758
<   IF NOT FOUND THEN
<     var_return_row.result_code := false ;
<     var_return_row.error_message := 'Update failed.' ;
<     RETURN NEXT var_return_row ;
<     RETURN ;
<   END IF ;
---
>   GET DIAGNOSTICS v_numrows = ROW_COUNT;
>   IF v_numrows = 0 THEN
>     v_errmsg := 'Update Failed!';
>     RAISE EXCEPTION '';
>   END IF;
36847c35761
<   var_return_row.error_message := '' ;
---
>   var_return_row.error_message := 'Successful Update!' ;
36850a35765,35780
> EXCEPTION
>   WHEN raise_exception THEN
>     var_return_row.result_code := false;
>     var_return_row.error_message:=v_errmsg;
>     RAISE NOTICE 'rt_oss_rma: when raise_exception:  % ',v_errmsg;
>     RETURN NEXT var_return_row;
>     RETURN;
> 
>   WHEN others THEN
>     v_errmsg := 'Unknown error!';
>     var_return_row.result_code := false;
>     var_return_row.error_message := v_errmsg;
>     RAISE NOTICE 'OTHER EXCEPTION:  %', v_errmsg;
>     RETURN NEXT var_return_row;
>     RETURN;
> 
37787,37852d36716
< -- Name: username_check(); Type: FUNCTION; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE FUNCTION username_check() RETURNS SETOF my_type2
<     LANGUAGE plpgsql STABLE SECURITY DEFINER
<     AS $$
< DECLARE
<   c_staff_id              	integer:=3;
<   var_myrow					my_type1%ROWTYPE;
<   var_myrow2				my_type2%ROWTYPE;
<   var_equipment_id			int;
<   var_min_value				text;
<   var_status				int;
<   v_result                	integer;
<   v_numrows               	integer;
< 
< BEGIN
< 
< --select * INTO v_result public.set_change_log_staff_id(c_staff_id);
< 
< FOR var_myrow IN 
<   SELECT DISTINCT ui.equipment_id
<       ,substring(l.radius_username,1,(position('@' IN l.radius_username) - 1))
<       ,uim.value 
<   FROM line l
<   JOIN line_equipment le ON le.line_id = l.line_id
<   JOIN unique_identifier ui ON le.equipment_id = ui.equipment_id
<   JOIN unique_identifier uim ON le.equipment_id = uim.equipment_id AND uim.unique_identifier_type = 'MIN'
<  WHERE l.end_date is NULL
<    AND l.radius_username LIKE '%@uscc.net'
<    AND substring(l.radius_username,1,(position('@' IN l.radius_username) - 1)) <> uim.value
<  ORDER BY 2
< 
< 	LOOP
< 
< 		RAISE NOTICE 'EQUIPMENT_ID:    %', var_myrow.equip_id;
< 		RAISE NOTICE 'Username    :    %', var_myrow.rad_username;
< 		RAISE NOTICE 'UIM Value   :    %', var_myrow.uim_value;
< 
< 		select equipment_id 
< 		      ,value
< 		  INTO var_equipment_id
< 		      ,var_min_value 
< 		  from unique_identifier 
< 		 where unique_identifier_type = 'MIN' 
< 		   and value = var_myrow.rad_username;
< 
< 		var_myrow2.upd_equip_id 	:= var_myrow.equip_id;
< 		var_myrow2.correct_min		:= var_myrow.rad_username;
< 		var_myrow2.exist_min		:= var_myrow.uim_value;
< 		var_myrow2.related_equip_id := var_equipment_id;
< 		var_myrow2.related_min		:= var_min_value;
< 
< 		RETURN NEXT var_myrow2;
< 
< 	END LOOP;
< 
< RAISE NOTICE 'Finished Function';
< RETURN;
< END ;
< $$;
< 
< 
< ALTER FUNCTION csctoss.username_check() OWNER TO csctoss_owner;
< 
< --
37969,37979d36832
< -- Name: database_size(name); Type: FUNCTION; Schema: public; Owner: postgres
< --
< 
< CREATE FUNCTION database_size(name) RETURNS bigint
<     LANGUAGE c STRICT
<     AS '$libdir/dbsize', 'database_size';
< 
< 
< ALTER FUNCTION public.database_size(name) OWNER TO postgres;
< 
< --
38671,38678c37524
<     IF rec_mrac.username like '%uscc%' THEN
<       var_pos := ( select position('@' in rec_mrac.username ));
<       var_username := (select substring(rec_mrac.username from 1 for var_pos)) || con_sprintname;  
<     ELSE  
<       var_username := rec_mrac.username;
<     END IF;
< 
<     var_string := var_username                         ||','||
---
>     var_string := rec_mrac.username                    ||','||
38753,38796d37598
< -- Name: pg_database_size(oid); Type: FUNCTION; Schema: public; Owner: postgres
< --
< 
< CREATE FUNCTION pg_database_size(oid) RETURNS bigint
<     LANGUAGE c STRICT
<     AS '$libdir/dbsize', 'pg_database_size';
< 
< 
< ALTER FUNCTION public.pg_database_size(oid) OWNER TO postgres;
< 
< --
< -- Name: pg_relation_size(oid); Type: FUNCTION; Schema: public; Owner: postgres
< --
< 
< CREATE FUNCTION pg_relation_size(oid) RETURNS bigint
<     LANGUAGE c STRICT
<     AS '$libdir/dbsize', 'pg_relation_size';
< 
< 
< ALTER FUNCTION public.pg_relation_size(oid) OWNER TO postgres;
< 
< --
< -- Name: pg_size_pretty(bigint); Type: FUNCTION; Schema: public; Owner: postgres
< --
< 
< CREATE FUNCTION pg_size_pretty(bigint) RETURNS text
<     LANGUAGE c STRICT
<     AS '$libdir/dbsize', 'pg_size_pretty';
< 
< 
< ALTER FUNCTION public.pg_size_pretty(bigint) OWNER TO postgres;
< 
< --
< -- Name: pg_tablespace_size(oid); Type: FUNCTION; Schema: public; Owner: postgres
< --
< 
< CREATE FUNCTION pg_tablespace_size(oid) RETURNS bigint
<     LANGUAGE c STRICT
<     AS '$libdir/dbsize', 'pg_tablespace_size';
< 
< 
< ALTER FUNCTION public.pg_tablespace_size(oid) OWNER TO postgres;
< 
< --
39037,39047d37838
< -- Name: relation_size(text); Type: FUNCTION; Schema: public; Owner: postgres
< --
< 
< CREATE FUNCTION relation_size(text) RETURNS bigint
<     LANGUAGE c STRICT
<     AS '$libdir/dbsize', 'relation_size';
< 
< 
< ALTER FUNCTION public.relation_size(text) OWNER TO postgres;
< 
< --
40088,40089d38878
< SET default_with_oids = true;
< 
40116,40117d38904
< SET default_with_oids = false;
< 
40610c39397
<     nl_conncnt integer DEFAULT nextval('_csctoss_repl.sl_nodelock_nl_conncnt_seq'::text) NOT NULL,
---
>     nl_conncnt integer NOT NULL,
41034c39821
<     SELECT e.ev_origin AS st_origin, c.con_received AS st_received, e.ev_seqno AS st_last_event, e.ev_timestamp AS st_last_event_ts, c.con_seqno AS st_last_received, c.con_timestamp AS st_last_received_ts, ce.ev_timestamp AS st_last_received_event_ts, (e.ev_seqno - c.con_seqno) AS st_lag_num_events, (('now'::text)::timestamp(6) with time zone - (ce.ev_timestamp)::timestamp with time zone) AS st_lag_time FROM sl_event e, sl_confirm c, sl_event ce WHERE (((((e.ev_origin = c.con_origin) AND (ce.ev_origin = e.ev_origin)) AND (ce.ev_seqno = c.con_seqno)) AND ((e.ev_origin, e.ev_seqno) IN (SELECT sl_event.ev_origin, max(sl_event.ev_seqno) AS max FROM sl_event WHERE (sl_event.ev_origin = getlocalnodeid('_csctoss_repl'::name)) GROUP BY sl_event.ev_origin))) AND ((c.con_origin, c.con_received, c.con_seqno) IN (SELECT sl_confirm.con_origin, sl_confirm.con_received, max(sl_confirm.con_seqno) AS max FROM sl_confirm WHERE (sl_confirm.con_origin = getlocalnodeid('_csctoss_repl'::name)) GROUP BY sl_confirm.con_origin, sl_confirm.con_received)));
---
>     SELECT e.ev_origin AS st_origin, c.con_received AS st_received, e.ev_seqno AS st_last_event, e.ev_timestamp AS st_last_event_ts, c.con_seqno AS st_last_received, c.con_timestamp AS st_last_received_ts, ce.ev_timestamp AS st_last_received_event_ts, (e.ev_seqno - c.con_seqno) AS st_lag_num_events, (now() - (ce.ev_timestamp)::timestamp with time zone) AS st_lag_time FROM sl_event e, sl_confirm c, sl_event ce WHERE (((((e.ev_origin = c.con_origin) AND (ce.ev_origin = e.ev_origin)) AND (ce.ev_seqno = c.con_seqno)) AND ((e.ev_origin, e.ev_seqno) IN (SELECT sl_event.ev_origin, max(sl_event.ev_seqno) AS max FROM sl_event WHERE (sl_event.ev_origin = getlocalnodeid('_csctoss_repl'::name)) GROUP BY sl_event.ev_origin))) AND ((c.con_origin, c.con_received, c.con_seqno) IN (SELECT sl_confirm.con_origin, sl_confirm.con_received, max(sl_confirm.con_seqno) AS max FROM sl_confirm WHERE (sl_confirm.con_origin = getlocalnodeid('_csctoss_repl'::name)) GROUP BY sl_confirm.con_origin, sl_confirm.con_received)));
41224c40011
<     api_activity_log bigint DEFAULT nextval('carrier.api_activity_log_api_activity_log_seq'::text) NOT NULL,
---
>     api_activity_log bigint NOT NULL,
41263c40050
<     app_config_id integer DEFAULT nextval('carrier.app_config_app_config_id_seq'::text) NOT NULL,
---
>     app_config_id integer NOT NULL,
41298c40085
<     request_id integer DEFAULT nextval('carrier.request_request_id_seq'::text) NOT NULL,
---
>     request_id integer NOT NULL,
41323c40110
<     request_carrier_id integer DEFAULT nextval('carrier.request_carrier_request_carrier_id_seq'::text) NOT NULL,
---
>     request_carrier_id integer NOT NULL,
41375c40162
<     request_status_id integer DEFAULT nextval('carrier.request_status_request_status_id_seq'::text) NOT NULL,
---
>     request_status_id integer NOT NULL,
41407c40194
<     request_type_id integer DEFAULT nextval('carrier.request_type_request_type_id_seq'::text) NOT NULL,
---
>     request_type_id integer NOT NULL,
41441c40228
<     billing_entity_id integer DEFAULT nextval('csctoss.billing_entity_billing_entity_id_seq'::text) NOT NULL,
---
>     billing_entity_id integer NOT NULL,
41470c40257
<     equipment_id integer DEFAULT nextval('csctoss.equipment_equipment_id_seq'::text) NOT NULL,
---
>     equipment_id integer NOT NULL,
41495c40282
<     equipment_model_id integer DEFAULT nextval('csctoss.equipment_model_equipment_model_id_seq'::text) NOT NULL,
---
>     equipment_model_id integer NOT NULL,
41529c40316
<     line_id integer DEFAULT nextval('csctoss.line_line_id_seq'::text) NOT NULL,
---
>     line_id integer NOT NULL,
41622c40409
<     id integer DEFAULT nextval('csctoss.radreply_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
41670c40457
<     id integer DEFAULT nextval('csctoss.usergroup_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
41691c40478,40488
<     SELECT be.billing_entity_id, be.name AS billing_entity_name, line.line_id, line.radius_username, (line.start_date)::date AS line_start_date, (line.end_date)::date AS line_end_date, le.equipment_id, le.start_date AS equip_start_date, le.end_date AS equip_end_date, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text))) AS sn, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'MDN'::text))) AS mdn, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'MIN'::text))) AS min, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'ESN HEX'::text))) AS esn_hex, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'ESN DEC'::text))) AS esn_dec, em.model_number1 AS equipment_model, em.model_note, em.vendor, loc.id AS location_id, loc."owner" AS location_owner, loc.name AS location_name, loc.address AS location_address, loc.processor AS location_processor, array_to_string(ARRAY(SELECT usergroup.groupname FROM usergroup WHERE ((usergroup.username)::text = line.radius_username)), ':'::text) AS groupname, (SELECT radreply.value FROM radreply WHERE (((radreply.username)::text = line.radius_username) AND ((radreply.attribute)::text = 'Framed-IP-Address'::text))) AS static_ip_address, timezone('EST'::text, mrad.last_connected_timestamp_for_last30_days_est) AS last_connected_timestamp_for_last30_days_est, mrad.usage_mb_for_last30_days FROM ((((((billing_entity be JOIN line ON ((be.billing_entity_id = line.billing_entity_id))) JOIN line_equipment le ON ((line.line_id = le.line_id))) JOIN equipment eq ON ((le.equipment_id = eq.equipment_id))) JOIN equipment_model em ON ((eq.equipment_model_id = em.equipment_model_id))) LEFT JOIN location_labels loc ON ((loc.line_id = line.line_id))) LEFT JOIN public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn()), '\012SET TimeZone TO EST5EDT;\012SELECT\012  username,\012  MAX(acctstarttime::timestamp(0)) AS last_connected_timestamp_for_last30_days_est,\012  TRUNC(SUM(acctinputoctets + acctoutputoctets) / 1024 / 1024, 2) AS usage_mb_for_last30_days\012FROM csctlog.master_radacct mrad\012WHERE 1 = 1\012AND acctstarttime >= (now() - ''30 days''::INTERVAL)\012GROUP BY username\012'::text) mrad(username text, last_connected_timestamp_for_last30_days_est timestamp with time zone, usage_mb_for_last30_days numeric) ON ((line.radius_username = mrad.username))) WHERE (((1 = 1) AND (line.end_date IS NULL)) AND (le.end_date IS NULL));
---
>     SELECT be.billing_entity_id, be.name AS billing_entity_name, line.line_id, line.radius_username, (line.start_date)::date AS line_start_date, (line.end_date)::date AS line_end_date, le.equipment_id, le.start_date AS equip_start_date, le.end_date AS equip_end_date, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text))) AS sn, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'MDN'::text))) AS mdn, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'MIN'::text))) AS min, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'ESN HEX'::text))) AS esn_hex, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'ESN DEC'::text))) AS esn_dec, em.model_number1 AS equipment_model, em.model_note, em.vendor, loc.id AS location_id, loc."owner" AS location_owner, loc.name AS location_name, loc.address AS location_address, loc.processor AS location_processor, array_to_string(ARRAY(SELECT usergroup.groupname FROM usergroup WHERE ((usergroup.username)::text = line.radius_username)), ':'::text) AS groupname, (SELECT radreply.value FROM radreply WHERE (((radreply.username)::text = line.radius_username) AND ((radreply.attribute)::text = 'Framed-IP-Address'::text))) AS static_ip_address, timezone('EST'::text, mrad.last_connected_timestamp_for_last30_days_est) AS last_connected_timestamp_for_last30_days_est, mrad.usage_mb_for_last30_days FROM ((((((billing_entity be JOIN line ON ((be.billing_entity_id = line.billing_entity_id))) JOIN line_equipment le ON ((line.line_id = le.line_id))) JOIN equipment eq ON ((le.equipment_id = eq.equipment_id))) JOIN equipment_model em ON ((eq.equipment_model_id = em.equipment_model_id))) LEFT JOIN location_labels loc ON ((loc.line_id = line.line_id))) LEFT JOIN public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn() fetch_csctlog_conn(fetch_csctlog_conn)), '
> SET TimeZone TO EST5EDT;
> SELECT
>   username,
>   MAX(acctstarttime::timestamp(0)) AS last_connected_timestamp_for_last30_days_est,
>   TRUNC(SUM(acctinputoctets + acctoutputoctets) / 1024 / 1024, 2) AS usage_mb_for_last30_days
> FROM csctlog.master_radacct mrad
> WHERE 1 = 1
> AND acctstarttime >= (now() - ''30 days''::INTERVAL)
> GROUP BY username
> '::text) mrad(username text, last_connected_timestamp_for_last30_days_est timestamp with time zone, usage_mb_for_last30_days numeric) ON ((line.radius_username = mrad.username))) WHERE (((1 = 1) AND (line.end_date IS NULL)) AND (le.end_date IS NULL));
41701c40498
<     address_id integer DEFAULT nextval('csctoss.address_address_id_seq'::text) NOT NULL,
---
>     address_id integer NOT NULL,
41767c40564
<     id integer DEFAULT nextval('csctoss.agreement_table_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
41801c40598
<     alert_activity_id integer DEFAULT nextval('csctoss.alert_activity_alert_activity_id_seq'::text) NOT NULL,
---
>     alert_activity_id integer NOT NULL,
41848c40645
<     alert_definition_id integer DEFAULT nextval('csctoss.alert_definition_alert_definition_id_seq'::text) NOT NULL,
---
>     alert_definition_id integer NOT NULL,
41960c40757
<     alert_type_id integer DEFAULT nextval('csctoss.alert_type_alert_type_id_seq'::text) NOT NULL,
---
>     alert_type_id integer NOT NULL,
42015c40812
<     alert_id integer DEFAULT nextval('csctoss.alerts_alert_id_seq'::text) NOT NULL,
---
>     alert_id integer NOT NULL,
42053c40850
<     device_login_id integer DEFAULT nextval('csctoss.api_device_login_device_login_id_seq'::text) NOT NULL,
---
>     device_login_id integer NOT NULL,
42101c40898
<     api_key_id integer DEFAULT nextval('csctoss.api_key_api_key_id_seq'::text) NOT NULL,
---
>     api_key_id integer NOT NULL,
42143c40940
<     parser_id integer DEFAULT nextval('csctoss.api_parser_parser_id_seq'::text) NOT NULL,
---
>     parser_id integer NOT NULL,
42214c41011
<     device_id integer DEFAULT nextval('csctoss.api_supported_device_device_id_seq'::text) NOT NULL,
---
>     device_id integer NOT NULL,
42247c41044
<     app_config_id integer DEFAULT nextval('csctoss.app_config_app_config_id_seq'::text) NOT NULL,
---
>     app_config_id integer NOT NULL,
42474c41271
<     bp_aggregate_usage_plan_id integer DEFAULT nextval('csctoss.bp_aggregate_usage_plan_bp_aggregate_usage_plan_id_seq'::text) NOT NULL,
---
>     bp_aggregate_usage_plan_id integer NOT NULL,
42546c41343
<     bp_billing_calendar_id integer DEFAULT nextval('csctoss.bp_billing_calendar_bp_billing_calendar_id_seq'::text) NOT NULL,
---
>     bp_billing_calendar_id integer NOT NULL,
42585c41382
<     bp_billing_period_id integer DEFAULT nextval('csctoss.bp_billing_period_bp_billing_period_id_seq'::text) NOT NULL,
---
>     bp_billing_period_id integer NOT NULL,
42624c41421
<     bp_billing_charge_id integer DEFAULT nextval('csctoss.bp_billing_charge_bp_billing_charge_id_seq'::text) NOT NULL,
---
>     bp_billing_charge_id integer NOT NULL,
42673c41470
<     bp_billing_charge_discount_id integer DEFAULT nextval('csctoss.bp_billing_charge_discount_bp_billing_charge_discount_id_seq'::text) NOT NULL,
---
>     bp_billing_charge_discount_id integer NOT NULL,
42721c41518
<     bp_billing_charge_onetime_id integer DEFAULT nextval('csctoss.bp_billing_charge_onetime_bp_billing_charge_onetime_id_seq'::text) NOT NULL,
---
>     bp_billing_charge_onetime_id integer NOT NULL,
42763c41560
<     bp_billing_charge_static_id integer DEFAULT nextval('csctoss.bp_billing_charge_static_bp_billing_charge_static_id_seq'::text) NOT NULL,
---
>     bp_billing_charge_static_id integer NOT NULL,
42846c41643
<     bp_billing_charge_usage_id integer DEFAULT nextval('csctoss.bp_billing_charge_usage_bp_billing_charge_usage_id_seq'::text) NOT NULL,
---
>     bp_billing_charge_usage_id integer NOT NULL,
42892c41689
<     bp_master_billing_plan_id integer DEFAULT nextval('csctoss.bp_master_billing_plan_bp_master_billing_plan_id_seq'::text) NOT NULL,
---
>     bp_master_billing_plan_id integer NOT NULL,
42982c41779
<     bp_billing_equipment_assignment_id integer DEFAULT nextval('csctoss.bp_billing_equipment_assignme_bp_billing_equipment_assignme_seq'::text) NOT NULL,
---
>     bp_billing_equipment_assignment_id integer NOT NULL,
43102c41899
<     bp_past_due_charge_id integer DEFAULT nextval('csctoss.bp_past_due_charge_bp_past_due_charge_id_seq'::text) NOT NULL,
---
>     bp_past_due_charge_id integer NOT NULL,
43146c41943
<     bp_period_billing_summary_id integer DEFAULT nextval('csctoss.bp_period_billing_summary_bp_period_billing_summary_id_seq'::text) NOT NULL,
---
>     bp_period_billing_summary_id integer NOT NULL,
43208c42005
<     bp_period_charge_summary_id integer DEFAULT nextval('csctoss.bp_period_charge_summary_bp_period_charge_summary_id_seq'::text) NOT NULL,
---
>     bp_period_charge_summary_id integer NOT NULL,
43281c42078
<     bp_period_usage_summary_id integer DEFAULT nextval('csctoss.bp_period_usage_summary_bp_period_usage_summary_id_seq'::text) NOT NULL,
---
>     bp_period_usage_summary_id integer NOT NULL,
43326c42123
<     bp_usage_allotment_id integer DEFAULT nextval('csctoss.bp_usage_allotment_bp_usage_allotment_id_seq'::text) NOT NULL,
---
>     bp_usage_allotment_id integer NOT NULL,
43449c42246
<     broadcast_message_id integer DEFAULT nextval('csctoss.broadcast_message_broadcast_message_id_seq'::text) NOT NULL,
---
>     broadcast_message_id integer NOT NULL,
43496c42293
<     broadcast_id integer DEFAULT nextval('csctoss.broadcast_message_data_broadcast_id_seq'::text) NOT NULL,
---
>     broadcast_id integer NOT NULL,
43548c42345
<     broadcast_message_level_id integer DEFAULT nextval('csctoss.broadcast_message_level_broadcast_message_level_id_seq'::text) NOT NULL,
---
>     broadcast_message_level_id integer NOT NULL,
43590c42387
<     broadcast_message_type_id integer DEFAULT nextval('csctoss.broadcast_message_type_broadcast_message_type_id_seq'::text) NOT NULL,
---
>     broadcast_message_type_id integer NOT NULL,
43629c42426
<     plan_id integer DEFAULT nextval('csctoss.plan_plan_id_seq'::text) NOT NULL,
---
>     plan_id integer NOT NULL,
43720c42517
<     api_activity_log bigint DEFAULT nextval('csctoss.carrier_api_activity_log_api_activity_log_seq'::text) NOT NULL,
---
>     api_activity_log bigint NOT NULL,
43772c42569
<     cc_auth_log_id integer DEFAULT nextval('csctoss.cc_auth_log_cc_auth_log_id_seq'::text) NOT NULL,
---
>     cc_auth_log_id integer NOT NULL,
43817c42614
<     cc_encrypt_key_id integer DEFAULT nextval('csctoss.cc_encrypt_key_cc_encrypt_key_id_seq'::text) NOT NULL,
---
>     cc_encrypt_key_id integer NOT NULL,
43859c42656
<     change_log_id integer DEFAULT nextval('csctoss.change_log_change_log_id_seq'::text) NOT NULL,
---
>     change_log_id integer NOT NULL,
43906c42703
<     id integer DEFAULT nextval('csctoss.config_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
43923c42720
<     id integer DEFAULT nextval('csctoss.config_equipment_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
43976c42773
<     contact_id integer DEFAULT nextval('csctoss.contact_contact_id_seq'::text) NOT NULL,
---
>     contact_id integer NOT NULL,
44091c42888
<     currency_id integer DEFAULT nextval('csctoss.currency_currency_id_seq'::text) NOT NULL,
---
>     currency_id integer NOT NULL,
44146c42943,42952
<     SELECT be.billing_entity_id, be.name AS billing_entity_name, line.line_id, line.radius_username, (line.start_date)::date AS line_start_date, (line.end_date)::date AS line_end_date, le.equipment_id, le.start_date AS equip_start_date, le.end_date AS equip_end_date, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text))) AS sn, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'MDN'::text))) AS mdn, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'MIN'::text))) AS min, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'ESN HEX'::text))) AS esn_hex, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'ESN DEC'::text))) AS esn_dec, em.model_number1 AS equipment_model, em.model_note, em.vendor, loc.id AS location_id, loc."owner" AS location_owner, loc.name AS location_name, loc.address AS location_address, loc.processor AS location_processor, ARRAY(SELECT usergroup.groupname FROM usergroup WHERE ((usergroup.username)::text = line.radius_username)) AS groupname, (SELECT radreply.value FROM radreply WHERE (((radreply.username)::text = line.radius_username) AND ((radreply.attribute)::text = 'Framed-IP-Address'::text))) AS static_ip_address, mrad.total_usage_bytes_data_for_last30days AS last_connected_timestamp_for_last30days FROM ((((((billing_entity be JOIN line ON ((be.billing_entity_id = line.billing_entity_id))) JOIN line_equipment le ON ((line.line_id = le.line_id))) JOIN equipment eq ON ((le.equipment_id = eq.equipment_id))) JOIN equipment_model em ON ((eq.equipment_model_id = em.equipment_model_id))) LEFT JOIN location_labels loc ON ((loc.line_id = line.line_id))) LEFT JOIN public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn()), '\012SELECT\012  username,\012  MAX(acctstarttime::timestamp(0)) AS last_connected_timestamp,\012  SUM(acctinputoctets + acctoutputoctets) AS total_usage_data_for_last30days\012FROM csctlog.master_radacct mrad\012WHERE 1 = 1\012AND acctstarttime >= (now() - ''30 days''::INTERVAL)\012GROUP BY username\012'::text) mrad(username text, last_connected_timestamp timestamp with time zone, total_usage_bytes_data_for_last30days bigint) ON ((line.radius_username = mrad.username))) WHERE ((1 = 1) AND (eq.equipment_id IN (SELECT unique_identifier.equipment_id FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text) AND (unique_identifier.value IN (SELECT device_monitor.serial_number FROM device_monitor))))));
---
>     SELECT be.billing_entity_id, be.name AS billing_entity_name, line.line_id, line.radius_username, (line.start_date)::date AS line_start_date, (line.end_date)::date AS line_end_date, le.equipment_id, le.start_date AS equip_start_date, le.end_date AS equip_end_date, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text))) AS sn, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'MDN'::text))) AS mdn, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'MIN'::text))) AS min, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'ESN HEX'::text))) AS esn_hex, (SELECT unique_identifier.value FROM unique_identifier WHERE ((le.equipment_id = unique_identifier.equipment_id) AND (unique_identifier.unique_identifier_type = 'ESN DEC'::text))) AS esn_dec, em.model_number1 AS equipment_model, em.model_note, em.vendor, loc.id AS location_id, loc."owner" AS location_owner, loc.name AS location_name, loc.address AS location_address, loc.processor AS location_processor, ARRAY(SELECT usergroup.groupname FROM usergroup WHERE ((usergroup.username)::text = line.radius_username)) AS groupname, (SELECT radreply.value FROM radreply WHERE (((radreply.username)::text = line.radius_username) AND ((radreply.attribute)::text = 'Framed-IP-Address'::text))) AS static_ip_address, mrad.total_usage_bytes_data_for_last30days AS last_connected_timestamp_for_last30days FROM ((((((billing_entity be JOIN line ON ((be.billing_entity_id = line.billing_entity_id))) JOIN line_equipment le ON ((line.line_id = le.line_id))) JOIN equipment eq ON ((le.equipment_id = eq.equipment_id))) JOIN equipment_model em ON ((eq.equipment_model_id = em.equipment_model_id))) LEFT JOIN location_labels loc ON ((loc.line_id = line.line_id))) LEFT JOIN public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn() fetch_csctlog_conn(fetch_csctlog_conn)), '
> SELECT
>   username,
>   MAX(acctstarttime::timestamp(0)) AS last_connected_timestamp,
>   SUM(acctinputoctets + acctoutputoctets) AS total_usage_data_for_last30days
> FROM csctlog.master_radacct mrad
> WHERE 1 = 1
> AND acctstarttime >= (now() - ''30 days''::INTERVAL)
> GROUP BY username
> '::text) mrad(username text, last_connected_timestamp timestamp with time zone, total_usage_bytes_data_for_last30days bigint) ON ((line.radius_username = mrad.username))) WHERE ((1 = 1) AND (eq.equipment_id IN (SELECT unique_identifier.equipment_id FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text) AND (unique_identifier.value IN (SELECT device_monitor.serial_number FROM device_monitor))))));
44177c42983
<     equipment_credential_id integer DEFAULT nextval('csctoss.equipment_credential_equipment_credential_id_seq'::text) NOT NULL,
---
>     equipment_credential_id integer NOT NULL,
44242c43048
<     equipment_firmware_id integer DEFAULT nextval('csctoss.equipment_firmware_equipment_firmware_id_seq'::text) NOT NULL,
---
>     equipment_firmware_id integer NOT NULL,
44567c43373
<     id integer DEFAULT nextval('csctoss.firmware_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
44585c43391
<     id integer DEFAULT nextval('csctoss.firmware_equipment_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
44618c43424
<     firmware_gmu_id integer DEFAULT nextval('csctoss.firmware_gmu_firmware_gmu_id_seq'::text) NOT NULL,
---
>     firmware_gmu_id integer NOT NULL,
44721c43527
<     groupname_default_key_id integer DEFAULT nextval('csctoss.groupname_default_groupname_default_key_id_seq'::text) NOT NULL,
---
>     groupname_default_key_id integer NOT NULL,
45173c43979
<     master_radacctid bigint DEFAULT nextval('csctoss.master_radacct_master_radacctid_seq'::text) NOT NULL,
---
>     master_radacctid bigint NOT NULL,
45253c44059
<     master_radpostauth_id bigint DEFAULT nextval('csctoss.master_radpostauth_master_radpostauth_id_seq'::text) NOT NULL,
---
>     master_radpostauth_id bigint NOT NULL,
45297c44103
<     message_priority_id integer DEFAULT nextval('csctoss.message_priority_message_priority_id_seq'::text) NOT NULL,
---
>     message_priority_id integer NOT NULL,
45433c44239
<     id integer DEFAULT nextval('csctoss.nas_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
45488c44294
<     config_id integer DEFAULT nextval('csctoss.soup_config_info_config_id_seq'::text) NOT NULL,
---
>     config_id integer NOT NULL,
45526c44332,44351
<     SELECT be.billing_entity_id AS oss_billing_entity_id, be.name AS oss_billing_entity_name, line.line_id, line.radius_username AS oss_radius_username, line.start_date AS line_start_date, line.end_date AS line_end_date, prd.product_code AS oss_product_code, jbill.internal_number AS jbill_product_code, jbill.public_number AS jbill_public_number, jbill.order_internal_number FROM (((((billing_entity be JOIN line ON ((be.billing_entity_id = line.billing_entity_id))) JOIN line_equipment le ON ((line.line_id = le.line_id))) JOIN plan ON ((line.line_id = plan.line_id))) JOIN product prd ON ((prd.product_id = plan.product_id))) LEFT JOIN public.dblink((SELECT fetch_jbilling_conn.fetch_jbilling_conn FROM fetch_jbilling_conn()), '\012SELECT\012  pl.line_id,\012  pl.item_id,\012  item.internal_number,\012  po.public_number,\012  (SELECT internal_number FROM order_line ol\012   JOIN item i ON (ol.item_id = i.id)\012   JOIN item_type_map itm2 ON (itm2.item_id = ol.item_id)\012   WHERE ol.order_id = po.id\012   AND itm2.type_id = 301\012   AND i.internal_number LIKE ''MRC-%'') AS order_internal_number\012FROM purchase_order po\012JOIN prov_line pl ON (po.id = pl.order_id)\012JOIN item ON (pl.item_id = item.id)\012JOIN item_type_map itm ON (item.id = itm.item_id)\012WHERE 1 = 1\012AND itm.type_id = 301\012AND archived is null\012'::text) jbill(line_id integer, item_id integer, internal_number text, public_number text, order_internal_number text) ON ((line.line_id = jbill.line_id))) WHERE ((1 = 1) AND (le.end_date IS NULL)) ORDER BY be.billing_entity_id, line.line_id;
---
>     SELECT be.billing_entity_id AS oss_billing_entity_id, be.name AS oss_billing_entity_name, line.line_id, line.radius_username AS oss_radius_username, line.start_date AS line_start_date, line.end_date AS line_end_date, prd.product_code AS oss_product_code, jbill.internal_number AS jbill_product_code, jbill.public_number AS jbill_public_number, jbill.order_internal_number FROM (((((billing_entity be JOIN line ON ((be.billing_entity_id = line.billing_entity_id))) JOIN line_equipment le ON ((line.line_id = le.line_id))) JOIN plan ON ((line.line_id = plan.line_id))) JOIN product prd ON ((prd.product_id = plan.product_id))) LEFT JOIN public.dblink((SELECT fetch_jbilling_conn.fetch_jbilling_conn FROM fetch_jbilling_conn() fetch_jbilling_conn(fetch_jbilling_conn)), '
> SELECT
>   pl.line_id,
>   pl.item_id,
>   item.internal_number,
>   po.public_number,
>   (SELECT internal_number FROM order_line ol
>    JOIN item i ON (ol.item_id = i.id)
>    JOIN item_type_map itm2 ON (itm2.item_id = ol.item_id)
>    WHERE ol.order_id = po.id
>    AND itm2.type_id = 301
>    AND i.internal_number LIKE ''MRC-%'') AS order_internal_number
> FROM purchase_order po
> JOIN prov_line pl ON (po.id = pl.order_id)
> JOIN item ON (pl.item_id = item.id)
> JOIN item_type_map itm ON (item.id = itm.item_id)
> WHERE 1 = 1
> AND itm.type_id = 301
> AND archived is null
> '::text) jbill(line_id integer, item_id integer, internal_number text, public_number text, order_internal_number text) ON ((line.line_id = jbill.line_id))) WHERE ((1 = 1) AND (le.end_date IS NULL)) ORDER BY be.billing_entity_id, line.line_id;
45546c44371,44378
<     SELECT rec_type.acctstarttime, rec_type.acctstoptime, rec_type.framedipaddress, rec_type."class" FROM public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn()), 'select acctstarttime::timestamp, acctstoptime::timestamp, framedipaddress, class\012                          from csctlog.master_radacct\012                         where acctstarttime  > current_timestamp - interval ''26 hours''\012                           and (  acctstarttime > current_timestamp - interval ''2 hours''\012                               or acctstoptime  > current_timestamp - interval ''2 hours''\012                               or acctstoptime is null\012                               )\012                      order by acctstarttime'::text) rec_type(acctstarttime timestamp without time zone, acctstoptime timestamp without time zone, framedipaddress inet, "class" character varying);
---
>     SELECT rec_type.acctstarttime, rec_type.acctstoptime, rec_type.framedipaddress, rec_type."class" FROM public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn() fetch_csctlog_conn(fetch_csctlog_conn)), 'select acctstarttime::timestamp, acctstoptime::timestamp, framedipaddress, class
>                           from csctlog.master_radacct
>                          where acctstarttime  > current_timestamp - interval ''26 hours''
>                            and (  acctstarttime > current_timestamp - interval ''2 hours''
>                                or acctstoptime  > current_timestamp - interval ''2 hours''
>                                or acctstoptime is null
>                                )
>                       order by acctstarttime'::text) rec_type(acctstarttime timestamp without time zone, acctstoptime timestamp without time zone, framedipaddress inet, "class" character varying);
45556c44388,44398
<     SELECT rec_type.master_radacctid, rec_type."class", rec_type.acctstarttime, rec_type.acctstoptime, rec_type.framedipaddress FROM public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn()), 'select master_radacctid, class::integer, acctstarttime, acctstoptime, framedipaddress\012                          from csctlog.master_radacct\012                         where master_radacctid in\012                               (select max(master_radacctid)\012                                  from master_radacct\012                                 where class > ''0''\012                                   and class <> ''classtest''\012                                   and connectinfo_start is not null\012                                   and acctstarttime >= current_date-2\012                                   and acctstarttime <= current_date+1\012                              group by class)'::text) rec_type(master_radacctid bigint, "class" integer, acctstarttime timestamp with time zone, acctstoptime timestamp with time zone, framedipaddress inet);
---
>     SELECT rec_type.master_radacctid, rec_type."class", rec_type.acctstarttime, rec_type.acctstoptime, rec_type.framedipaddress FROM public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn() fetch_csctlog_conn(fetch_csctlog_conn)), 'select master_radacctid, class::integer, acctstarttime, acctstoptime, framedipaddress
>                           from csctlog.master_radacct
>                          where master_radacctid in
>                                (select max(master_radacctid)
>                                   from master_radacct
>                                  where class > ''0''
>                                    and class <> ''classtest''
>                                    and connectinfo_start is not null
>                                    and acctstarttime >= current_date-2
>                                    and acctstarttime <= current_date+1
>                               group by class)'::text) rec_type(master_radacctid bigint, "class" integer, acctstarttime timestamp with time zone, acctstoptime timestamp with time zone, framedipaddress inet);
45566c44408
<     usage_monthly_summary_id integer DEFAULT nextval('csctoss.otaps_monthly_usage_summary_usage_monthly_summary_id_seq'::text) NOT NULL,
---
>     usage_monthly_summary_id integer NOT NULL,
45655c44497
<     parser_log_id integer DEFAULT nextval('csctoss.parser_log_parser_log_id_seq'::text) NOT NULL,
---
>     parser_log_id integer NOT NULL,
45699c44541
<     plan_log_id integer DEFAULT nextval('csctoss.plan_log_plan_log_id_seq'::text) NOT NULL,
---
>     plan_log_id integer NOT NULL,
45825c44667
<     SELECT line.line_id, (line.start_date)::date AS line_start_date, (line.end_date)::date AS line_end_date, line.radius_username, em.model_number1 AS equipment_model_number, em.carrier AS equipment_carrier, em.make AS equipment_maker, em.vendor AS equipment_vendor, prd.product_code, plan."comment" AS sales_order_number, (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'ESN HEX'::text) AND (unique_identifier.equipment_id = lieq.equipment_id))) AS esn_hex, (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text) AND (unique_identifier.equipment_id = lieq.equipment_id))) AS serial_number, liloc."owner" AS location_owner, liloc.id AS location_id, liloc.address AS location_address, liloc.name AS location_name, liloc.processor AS location_processor, (SELECT soup_cellsignal.cellsignal FROM soup_cellsignal WHERE ((soup_cellsignal.esn1 = (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'ESN HEX'::text) AND (unique_identifier.equipment_id = lieq.equipment_id)))) OR (soup_cellsignal.esn2 = (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'ESN HEX'::text) AND (unique_identifier.equipment_id = lieq.equipment_id))))) ORDER BY soup_cellsignal."timestamp" DESC LIMIT 1) AS cellsignal, CASE WHEN (line.radius_username IS NOT NULL) THEN (COALESCE((SELECT radreply.value FROM radreply WHERE (((radreply.attribute)::text = 'Framed-IP-Address'::text) AND ((radreply.username)::text = line.radius_username))), ('N/A'::text)::character varying))::text ELSE 'IP Not Avalible'::text END AS static_ip_address, be.name, (SELECT ops_get_connection_status.ops_get_connection_status FROM ops_get_connection_status(line.radius_username)) AS connection_status, COALESCE((SELECT (max(master_radacct.acctstarttime))::text AS max FROM master_radacct WHERE ((master_radacct.username)::text = line.radius_username) GROUP BY master_radacct.username), 'No connections in last 3 months'::text) AS last_connected_timestamp, (SELECT soup_device_stats_table.firmware FROM soup_device_stats_table WHERE (soup_device_stats_table.serial_number = (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text) AND (unique_identifier.equipment_id = lieq.equipment_id)))) ORDER BY soup_device_stats_table.datetime DESC LIMIT 1) AS firmware_version, (ew.warranty_start_date)::date AS warranty_start_date, (ew.warranty_end_date)::date AS warranty_end_date, CASE WHEN ((ew.warranty_end_date)::date >= ('now'::text)::date) THEN 'In warranty'::text ELSE 'Out of warranty'::text END AS warranty_status, sci.config_name AS soup_config_name, (SELECT CASE WHEN ((SELECT count(*) AS count FROM master_radacct WHERE ((master_radacct.username)::text = line.radius_username)) = 0) THEN 'NO'::text ELSE CASE WHEN ((SELECT count(*) AS count FROM master_radacct mrad WHERE (((((mrad.username)::text = line.radius_username) AND (mrad.acctstarttime >= (('now'::text)::timestamp(6) with time zone - '1 mon'::interval))) AND (mrad.master_radacctid = (SELECT max(mrad2.master_radacctid) AS max FROM master_radacct mrad2 WHERE ((mrad2.username)::text = (mrad.username)::text)))) AND (mrad.acctstoptime IS NULL))) = 1) THEN 'YES'::text ELSE 'NO'::text END END AS "case") AS is_connected, (SELECT ops_get_config_status.ops_get_config_status FROM ops_get_config_status(sci.config_name)) AS config_status, (SELECT ops_get_firmware_status.ops_get_firmware_status FROM ops_get_firmware_status((SELECT soup_device_stats_table.firmware FROM soup_device_stats_table WHERE (soup_device_stats_table.serial_number = (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text) AND (unique_identifier.equipment_id = lieq.equipment_id)))) ORDER BY soup_device_stats_table.datetime DESC LIMIT 1))) AS firmware_status, be.billing_entity_id, be.parent_billing_entity_id FROM ((((((((((line JOIN billing_entity be ON ((line.billing_entity_id = be.billing_entity_id))) LEFT JOIN plan ON ((line.line_id = plan.line_id))) LEFT JOIN product prd ON ((plan.product_id = prd.product_id))) LEFT JOIN line_equipment lieq ON ((line.line_id = lieq.line_id))) LEFT JOIN equipment eq ON ((lieq.equipment_id = eq.equipment_id))) LEFT JOIN equipment_model em ON ((eq.equipment_model_id = em.equipment_model_id))) LEFT JOIN location_labels liloc ON ((line.line_id = liloc.line_id))) LEFT JOIN usergroup ug ON ((((ug.username)::text = line.radius_username) AND ((ug.groupname)::text = 'userdisconnected'::text)))) LEFT JOIN equipment_warranty ew ON ((eq.equipment_id = ew.equipment_id))) LEFT JOIN soup_config_info sci ON ((sci.equipment_id = eq.equipment_id))) WHERE ((((1 = 1) AND (lieq.end_date IS NULL)) AND (line.end_date IS NULL)) AND (line.radius_username IS NOT NULL));
---
>     SELECT line.line_id, (line.start_date)::date AS line_start_date, (line.end_date)::date AS line_end_date, line.radius_username, em.model_number1 AS equipment_model_number, em.carrier AS equipment_carrier, em.make AS equipment_maker, em.vendor AS equipment_vendor, prd.product_code, plan."comment" AS sales_order_number, (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'ESN HEX'::text) AND (unique_identifier.equipment_id = lieq.equipment_id))) AS esn_hex, (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text) AND (unique_identifier.equipment_id = lieq.equipment_id))) AS serial_number, liloc."owner" AS location_owner, liloc.id AS location_id, liloc.address AS location_address, liloc.name AS location_name, liloc.processor AS location_processor, (SELECT soup_cellsignal.cellsignal FROM soup_cellsignal WHERE ((soup_cellsignal.esn1 = (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'ESN HEX'::text) AND (unique_identifier.equipment_id = lieq.equipment_id)))) OR (soup_cellsignal.esn2 = (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'ESN HEX'::text) AND (unique_identifier.equipment_id = lieq.equipment_id))))) ORDER BY soup_cellsignal."timestamp" DESC LIMIT 1) AS cellsignal, CASE WHEN (line.radius_username IS NOT NULL) THEN (COALESCE((SELECT radreply.value FROM radreply WHERE (((radreply.attribute)::text = 'Framed-IP-Address'::text) AND ((radreply.username)::text = line.radius_username))), ('N/A'::text)::character varying))::text ELSE 'IP Not Avalible'::text END AS static_ip_address, be.name, (SELECT ops_get_connection_status.ops_get_connection_status FROM ops_get_connection_status(line.radius_username) ops_get_connection_status(ops_get_connection_status)) AS connection_status, COALESCE((SELECT (max(master_radacct.acctstarttime))::text AS max FROM master_radacct WHERE ((master_radacct.username)::text = line.radius_username) GROUP BY master_radacct.username), 'No connections in last 3 months'::text) AS last_connected_timestamp, (SELECT soup_device_stats_table.firmware FROM soup_device_stats_table WHERE (soup_device_stats_table.serial_number = (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text) AND (unique_identifier.equipment_id = lieq.equipment_id)))) ORDER BY soup_device_stats_table.datetime DESC LIMIT 1) AS firmware_version, (ew.warranty_start_date)::date AS warranty_start_date, (ew.warranty_end_date)::date AS warranty_end_date, CASE WHEN ((ew.warranty_end_date)::date >= ('now'::text)::date) THEN 'In warranty'::text ELSE 'Out of warranty'::text END AS warranty_status, sci.config_name AS soup_config_name, (SELECT CASE WHEN ((SELECT count(*) AS count FROM master_radacct WHERE ((master_radacct.username)::text = line.radius_username)) = 0) THEN 'NO'::text ELSE CASE WHEN ((SELECT count(*) AS count FROM master_radacct mrad WHERE (((((mrad.username)::text = line.radius_username) AND (mrad.acctstarttime >= (now() - '1 mon'::interval))) AND (mrad.master_radacctid = (SELECT max(mrad2.master_radacctid) AS max FROM master_radacct mrad2 WHERE ((mrad2.username)::text = (mrad.username)::text)))) AND (mrad.acctstoptime IS NULL))) = 1) THEN 'YES'::text ELSE 'NO'::text END END AS "case") AS is_connected, (SELECT ops_get_config_status.ops_get_config_status FROM ops_get_config_status(sci.config_name) ops_get_config_status(ops_get_config_status)) AS config_status, (SELECT ops_get_firmware_status.ops_get_firmware_status FROM ops_get_firmware_status((SELECT soup_device_stats_table.firmware FROM soup_device_stats_table WHERE (soup_device_stats_table.serial_number = (SELECT unique_identifier.value FROM unique_identifier WHERE ((unique_identifier.unique_identifier_type = 'SERIAL NUMBER'::text) AND (unique_identifier.equipment_id = lieq.equipment_id)))) ORDER BY soup_device_stats_table.datetime DESC LIMIT 1)) ops_get_firmware_status(ops_get_firmware_status)) AS firmware_status, be.billing_entity_id, be.parent_billing_entity_id FROM ((((((((((line JOIN billing_entity be ON ((line.billing_entity_id = be.billing_entity_id))) LEFT JOIN plan ON ((line.line_id = plan.line_id))) LEFT JOIN product prd ON ((plan.product_id = prd.product_id))) LEFT JOIN line_equipment lieq ON ((line.line_id = lieq.line_id))) LEFT JOIN equipment eq ON ((lieq.equipment_id = eq.equipment_id))) LEFT JOIN equipment_model em ON ((eq.equipment_model_id = em.equipment_model_id))) LEFT JOIN location_labels liloc ON ((line.line_id = liloc.line_id))) LEFT JOIN usergroup ug ON ((((ug.username)::text = line.radius_username) AND ((ug.groupname)::text = 'userdisconnected'::text)))) LEFT JOIN equipment_warranty ew ON ((eq.equipment_id = ew.equipment_id))) LEFT JOIN soup_config_info sci ON ((sci.equipment_id = eq.equipment_id))) WHERE ((((1 = 1) AND (lieq.end_date IS NULL)) AND (line.end_date IS NULL)) AND (line.radius_username IS NOT NULL));
45895c44737
<     purchase_log_id integer DEFAULT nextval('csctoss.purchase_log_purchase_log_id_seq'::text) NOT NULL,
---
>     purchase_log_id integer NOT NULL,
45946c44788
<     id integer DEFAULT nextval('csctoss.radcheck_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
45988c44830
<     id integer DEFAULT nextval('csctoss.radgroupcheck_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
46030c44872
<     id integer DEFAULT nextval('csctoss.radgroupreply_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
46072c44914
<     op_id integer DEFAULT nextval('csctoss.radius_operator_op_id_seq'::text) NOT NULL,
---
>     op_id integer NOT NULL,
46171c45013
<     receiving_lot_id integer DEFAULT nextval('csctoss.receiving_lot_receiving_lot_id_seq'::text) NOT NULL,
---
>     receiving_lot_id integer NOT NULL,
46221c45063
<     replication_failure_id integer DEFAULT nextval('csctoss.replication_failure_replication_failure_id_seq'::text) NOT NULL,
---
>     replication_failure_id integer NOT NULL,
46270c45112
<     report_id integer DEFAULT nextval('csctoss.report_report_id_seq'::text) NOT NULL,
---
>     report_id integer NOT NULL,
46320c45162
<     id integer DEFAULT nextval('csctoss.rma_form_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
46413c45255,45262
<     SELECT be.name AS billing_entity_name, line.radius_username AS username, mrad.acctterminatecause, sum(mrad.num_of_conn) AS num_of_conn FROM ((billing_entity be JOIN line ON ((be.billing_entity_id = line.billing_entity_id))) JOIN public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn()), '\012SELECT\012  username, acctterminatecause, COUNT(*) AS num_of_conn\012FROM csctlog.master_radacct\012WHERE 1 = 1\012AND acctstarttime >= (current_timestamp - ''30 days''::interval)\012GROUP BY username, acctterminatecause\012'::text) mrad(username text, acctterminatecause text, num_of_conn bigint) ON ((line.radius_username = mrad.username))) GROUP BY be.name, line.radius_username, mrad.acctterminatecause ORDER BY be.name, line.radius_username, mrad.acctterminatecause;
---
>     SELECT be.name AS billing_entity_name, line.radius_username AS username, mrad.acctterminatecause, sum(mrad.num_of_conn) AS num_of_conn FROM ((billing_entity be JOIN line ON ((be.billing_entity_id = line.billing_entity_id))) JOIN public.dblink((SELECT fetch_csctlog_conn.fetch_csctlog_conn FROM fetch_csctlog_conn() fetch_csctlog_conn(fetch_csctlog_conn)), '
> SELECT
>   username, acctterminatecause, COUNT(*) AS num_of_conn
> FROM csctlog.master_radacct
> WHERE 1 = 1
> AND acctstarttime >= (current_timestamp - ''30 days''::interval)
> GROUP BY username, acctterminatecause
> '::text) mrad(username text, acctterminatecause text, num_of_conn bigint) ON ((line.radius_username = mrad.username))) GROUP BY be.name, line.radius_username, mrad.acctterminatecause ORDER BY be.name, line.radius_username, mrad.acctterminatecause;
46423c45272
<     shipment_id integer DEFAULT nextval('csctoss.shipment_shipment_id_seq'::text) NOT NULL,
---
>     shipment_id integer NOT NULL,
46496c45345
<     software_id integer DEFAULT nextval('csctoss.software_software_id_seq'::text) NOT NULL,
---
>     software_id integer NOT NULL,
46559c45408
<     soup_config_id integer DEFAULT nextval('csctoss.soup_config_soup_config_id_seq'::text) NOT NULL,
---
>     soup_config_id integer NOT NULL,
46654c45503
<     soup_dirnames_id integer DEFAULT nextval('csctoss.soup_dirnames_soup_dirnames_id_seq'::text) NOT NULL,
---
>     soup_dirnames_id integer NOT NULL,
46722c45571
<     sprint_assignment_id integer DEFAULT nextval('csctoss.sprint_assignment_sprint_assignment_id_seq'::text) NOT NULL,
---
>     sprint_assignment_id integer NOT NULL,
46762c45611
<     id bigint DEFAULT nextval('csctoss.sprint_csa_id_seq'::text) NOT NULL,
---
>     id bigint NOT NULL,
46801c45650
<     sprint_master_radacctid bigint DEFAULT nextval('csctoss.sprint_master_radacct_sprint_master_radacctid_seq'::text) NOT NULL,
---
>     sprint_master_radacctid bigint NOT NULL,
46990c45839
<     id integer DEFAULT nextval('csctoss.static_ip_pool_id_seq'::text) NOT NULL,
---
>     id integer NOT NULL,
47014c45863
<     reservation_id integer DEFAULT nextval('csctoss.static_ip_reservation_reservation_id_seq'::text) NOT NULL,
---
>     reservation_id integer NOT NULL,
47158c46007
<     throw_away_min_id integer DEFAULT nextval('csctoss.throw_away_minutes_throw_away_min_id_seq'::text) NOT NULL,
---
>     throw_away_min_id integer NOT NULL,
47220c46069
<     unique_identifier_history_id integer DEFAULT nextval('csctoss.unique_identifier_history_unique_identifier_history_id_seq'::text) NOT NULL,
---
>     unique_identifier_history_id integer NOT NULL,
47336c46185
<     usergroup_error_log_id integer DEFAULT nextval('csctoss.usergroup_error_log_usergroup_error_log_id_seq'::text) NOT NULL,
---
>     usergroup_error_log_id integer NOT NULL,
47422,47488c46271
< -- Name: v_contact_id; Type: TABLE; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE TABLE v_contact_id (
<     nextval bigint
< );
< 
< 
< ALTER TABLE csctoss.v_contact_id OWNER TO csctoss_owner;
< 
< --
< -- Name: v_count; Type: TABLE; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE TABLE v_count (
<     count bigint
< );
< 
< 
< ALTER TABLE csctoss.v_count OWNER TO csctoss_owner;
< 
< --
< -- Name: v_new_sn; Type: TABLE; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE TABLE v_new_sn (
<     value text
< );
< 
< 
< ALTER TABLE csctoss.v_new_sn OWNER TO csctoss_owner;
< 
< --
< -- Name: v_old_ip; Type: TABLE; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE TABLE v_old_ip (
<     value character varying(253)
< );
< 
< 
< ALTER TABLE csctoss.v_old_ip OWNER TO csctoss_owner;
< 
< --
< -- Name: var_equipment_id; Type: TABLE; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE TABLE var_equipment_id (
<     equipment_id integer
< );
< 
< 
< ALTER TABLE csctoss.var_equipment_id OWNER TO csctoss_owner;
< 
< --
< -- Name: var_username; Type: TABLE; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE TABLE var_username (
<     username character varying(64)
< );
< 
< 
< ALTER TABLE csctoss.var_username OWNER TO csctoss_owner;
< 
< --
< -- Name: webui_users; Type: TABLE; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
---
> -- Name: webui_users; Type: TABLE; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
47492c46275
<     id integer DEFAULT nextval('csctoss_users_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('csctoss_users_id_seq'::text)::regclass) NOT NULL,
47542c46325
<     app_config_id integer DEFAULT nextval('invoice.app_config_app_config_id_seq'::text) NOT NULL,
---
>     app_config_id integer NOT NULL,
47575c46358
<     billing_entity_id integer DEFAULT nextval('invoice.billing_entity_billing_entity_id_seq'::text) NOT NULL,
---
>     billing_entity_id integer NOT NULL,
47616c46399
<     document_id integer DEFAULT nextval('invoice.file_system_document_id_seq'::text) NOT NULL,
---
>     document_id integer NOT NULL,
47903c46686
<     id integer DEFAULT nextval('acl_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('acl_id_seq'::text)::regclass) NOT NULL,
47934c46717
<     id integer DEFAULT nextval('attachments_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('attachments_id_seq'::text)::regclass) NOT NULL,
47969c46752
<     id integer DEFAULT nextval('attributes_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('attributes_id_seq'::text)::regclass) NOT NULL,
48003c46786
<     id integer DEFAULT nextval('cachedgroupmembers_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('cachedgroupmembers_id_seq'::text)::regclass) NOT NULL,
48032c46815
<     id integer DEFAULT nextval('customfields_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('customfields_id_seq'::text)::regclass) NOT NULL,
48069c46852
<     id integer DEFAULT nextval('customfieldvalues_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('customfieldvalues_id_seq'::text)::regclass) NOT NULL,
48101c46884
<     id integer DEFAULT nextval('groupmembers_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('groupmembers_id_seq'::text)::regclass) NOT NULL,
48127c46910
<     id integer DEFAULT nextval('groups_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('groups_id_seq'::text)::regclass) NOT NULL,
48156c46939
<     id integer DEFAULT nextval('links_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('links_id_seq'::text)::regclass) NOT NULL,
48189c46972
<     id integer DEFAULT nextval('objectcustomfields_id_s'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('objectcustomfields_id_s'::text)::regclass) NOT NULL,
48220c47003
<     id integer DEFAULT nextval('objectcustomfieldvalues_id_s'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('objectcustomfieldvalues_id_s'::text)::regclass) NOT NULL,
48257c47040
<     id integer DEFAULT nextval('principals_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('principals_id_seq'::text)::regclass) NOT NULL,
48284c47067
<     id integer DEFAULT nextval('queues_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('queues_id_seq'::text)::regclass) NOT NULL,
48320c47103
<     id integer DEFAULT nextval('tickets_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('tickets_id_seq'::text)::regclass) NOT NULL,
48355c47138
<     id integer DEFAULT nextval('users_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('users_id_seq'::text)::regclass) NOT NULL,
48409c47192
<     id integer DEFAULT nextval('scripactions_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('scripactions_id_seq'::text)::regclass) NOT NULL,
48441c47224
<     id integer DEFAULT nextval('scripconditions_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('scripconditions_id_seq'::text)::regclass) NOT NULL,
48474c47257
<     id integer DEFAULT nextval('scrips_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('scrips_id_seq'::text)::regclass) NOT NULL,
48526c47309
<     id integer DEFAULT nextval('templates_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('templates_id_seq'::text)::regclass) NOT NULL,
48574c47357
<     id integer DEFAULT nextval('transactions_id_seq'::text) NOT NULL,
---
>     id integer DEFAULT nextval(('transactions_id_seq'::text)::regclass) NOT NULL,
48621a47405,48042
> -- Name: nl_conncnt; Type: DEFAULT; Schema: _csctoss_repl; Owner: slony
> --
> 
> ALTER TABLE ONLY sl_nodelock ALTER COLUMN nl_conncnt SET DEFAULT nextval('sl_nodelock_nl_conncnt_seq'::regclass);
> 
> 
> SET search_path = carrier, pg_catalog;
> 
> --
> -- Name: api_activity_log; Type: DEFAULT; Schema: carrier; Owner: carrier_owner
> --
> 
> ALTER TABLE ONLY api_activity_log ALTER COLUMN api_activity_log SET DEFAULT nextval('api_activity_log_api_activity_log_seq'::regclass);
> 
> 
> --
> -- Name: app_config_id; Type: DEFAULT; Schema: carrier; Owner: carrier_owner
> --
> 
> ALTER TABLE ONLY app_config ALTER COLUMN app_config_id SET DEFAULT nextval('app_config_app_config_id_seq'::regclass);
> 
> 
> --
> -- Name: request_id; Type: DEFAULT; Schema: carrier; Owner: carrier_owner
> --
> 
> ALTER TABLE ONLY request ALTER COLUMN request_id SET DEFAULT nextval('request_request_id_seq'::regclass);
> 
> 
> --
> -- Name: request_carrier_id; Type: DEFAULT; Schema: carrier; Owner: carrier_owner
> --
> 
> ALTER TABLE ONLY request_carrier ALTER COLUMN request_carrier_id SET DEFAULT nextval('request_carrier_request_carrier_id_seq'::regclass);
> 
> 
> --
> -- Name: request_status_id; Type: DEFAULT; Schema: carrier; Owner: carrier_owner
> --
> 
> ALTER TABLE ONLY request_status ALTER COLUMN request_status_id SET DEFAULT nextval('request_status_request_status_id_seq'::regclass);
> 
> 
> --
> -- Name: request_type_id; Type: DEFAULT; Schema: carrier; Owner: carrier_owner
> --
> 
> ALTER TABLE ONLY request_type ALTER COLUMN request_type_id SET DEFAULT nextval('request_type_request_type_id_seq'::regclass);
> 
> 
> SET search_path = csctoss, pg_catalog;
> 
> --
> -- Name: address_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY address ALTER COLUMN address_id SET DEFAULT nextval('address_address_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: postgres
> --
> 
> ALTER TABLE ONLY agreement_table ALTER COLUMN id SET DEFAULT nextval('agreement_table_id_seq'::regclass);
> 
> 
> --
> -- Name: alert_activity_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY alert_activity ALTER COLUMN alert_activity_id SET DEFAULT nextval('alert_activity_alert_activity_id_seq'::regclass);
> 
> 
> --
> -- Name: alert_definition_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY alert_definition ALTER COLUMN alert_definition_id SET DEFAULT nextval('alert_definition_alert_definition_id_seq'::regclass);
> 
> 
> --
> -- Name: alert_type_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY alert_type ALTER COLUMN alert_type_id SET DEFAULT nextval('alert_type_alert_type_id_seq'::regclass);
> 
> 
> --
> -- Name: alert_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY alerts ALTER COLUMN alert_id SET DEFAULT nextval('alerts_alert_id_seq'::regclass);
> 
> 
> --
> -- Name: device_login_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY api_device_login ALTER COLUMN device_login_id SET DEFAULT nextval('api_device_login_device_login_id_seq'::regclass);
> 
> 
> --
> -- Name: api_key_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY api_key ALTER COLUMN api_key_id SET DEFAULT nextval('api_key_api_key_id_seq'::regclass);
> 
> 
> --
> -- Name: parser_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY api_parser ALTER COLUMN parser_id SET DEFAULT nextval('api_parser_parser_id_seq'::regclass);
> 
> 
> --
> -- Name: device_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY api_supported_device ALTER COLUMN device_id SET DEFAULT nextval('api_supported_device_device_id_seq'::regclass);
> 
> 
> --
> -- Name: app_config_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY app_config ALTER COLUMN app_config_id SET DEFAULT nextval('app_config_app_config_id_seq'::regclass);
> 
> 
> --
> -- Name: billing_entity_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY billing_entity ALTER COLUMN billing_entity_id SET DEFAULT nextval('billing_entity_billing_entity_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_aggregate_usage_plan_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_aggregate_usage_plan ALTER COLUMN bp_aggregate_usage_plan_id SET DEFAULT nextval('bp_aggregate_usage_plan_bp_aggregate_usage_plan_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_billing_calendar_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_billing_calendar ALTER COLUMN bp_billing_calendar_id SET DEFAULT nextval('bp_billing_calendar_bp_billing_calendar_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_billing_charge_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_billing_charge ALTER COLUMN bp_billing_charge_id SET DEFAULT nextval('bp_billing_charge_bp_billing_charge_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_billing_charge_discount_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_billing_charge_discount ALTER COLUMN bp_billing_charge_discount_id SET DEFAULT nextval('bp_billing_charge_discount_bp_billing_charge_discount_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_billing_charge_onetime_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_billing_charge_onetime ALTER COLUMN bp_billing_charge_onetime_id SET DEFAULT nextval('bp_billing_charge_onetime_bp_billing_charge_onetime_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_billing_charge_static_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_billing_charge_static ALTER COLUMN bp_billing_charge_static_id SET DEFAULT nextval('bp_billing_charge_static_bp_billing_charge_static_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_billing_charge_usage_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_billing_charge_usage ALTER COLUMN bp_billing_charge_usage_id SET DEFAULT nextval('bp_billing_charge_usage_bp_billing_charge_usage_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_billing_equipment_assignment_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_billing_equipment_assignment ALTER COLUMN bp_billing_equipment_assignment_id SET DEFAULT nextval('bp_billing_equipment_assignme_bp_billing_equipment_assignme_seq'::regclass);
> 
> 
> --
> -- Name: bp_billing_period_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_billing_period ALTER COLUMN bp_billing_period_id SET DEFAULT nextval('bp_billing_period_bp_billing_period_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_master_billing_plan_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_master_billing_plan ALTER COLUMN bp_master_billing_plan_id SET DEFAULT nextval('bp_master_billing_plan_bp_master_billing_plan_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_past_due_charge_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_past_due_charge ALTER COLUMN bp_past_due_charge_id SET DEFAULT nextval('bp_past_due_charge_bp_past_due_charge_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_period_billing_summary_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_period_billing_summary ALTER COLUMN bp_period_billing_summary_id SET DEFAULT nextval('bp_period_billing_summary_bp_period_billing_summary_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_period_charge_summary_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_period_charge_summary ALTER COLUMN bp_period_charge_summary_id SET DEFAULT nextval('bp_period_charge_summary_bp_period_charge_summary_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_period_usage_summary_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_period_usage_summary ALTER COLUMN bp_period_usage_summary_id SET DEFAULT nextval('bp_period_usage_summary_bp_period_usage_summary_id_seq'::regclass);
> 
> 
> --
> -- Name: bp_usage_allotment_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY bp_usage_allotment ALTER COLUMN bp_usage_allotment_id SET DEFAULT nextval('bp_usage_allotment_bp_usage_allotment_id_seq'::regclass);
> 
> 
> --
> -- Name: broadcast_message_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY broadcast_message ALTER COLUMN broadcast_message_id SET DEFAULT nextval('broadcast_message_broadcast_message_id_seq'::regclass);
> 
> 
> --
> -- Name: broadcast_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY broadcast_message_data ALTER COLUMN broadcast_id SET DEFAULT nextval('broadcast_message_data_broadcast_id_seq'::regclass);
> 
> 
> --
> -- Name: broadcast_message_level_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY broadcast_message_level ALTER COLUMN broadcast_message_level_id SET DEFAULT nextval('broadcast_message_level_broadcast_message_level_id_seq'::regclass);
> 
> 
> --
> -- Name: broadcast_message_type_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY broadcast_message_type ALTER COLUMN broadcast_message_type_id SET DEFAULT nextval('broadcast_message_type_broadcast_message_type_id_seq'::regclass);
> 
> 
> --
> -- Name: api_activity_log; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY carrier_api_activity_log ALTER COLUMN api_activity_log SET DEFAULT nextval('carrier_api_activity_log_api_activity_log_seq'::regclass);
> 
> 
> --
> -- Name: cc_auth_log_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY cc_auth_log ALTER COLUMN cc_auth_log_id SET DEFAULT nextval('cc_auth_log_cc_auth_log_id_seq'::regclass);
> 
> 
> --
> -- Name: cc_encrypt_key_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY cc_encrypt_key ALTER COLUMN cc_encrypt_key_id SET DEFAULT nextval('cc_encrypt_key_cc_encrypt_key_id_seq'::regclass);
> 
> 
> --
> -- Name: change_log_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY change_log ALTER COLUMN change_log_id SET DEFAULT nextval('change_log_change_log_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY config ALTER COLUMN id SET DEFAULT nextval('config_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY config_equipment ALTER COLUMN id SET DEFAULT nextval('config_equipment_id_seq'::regclass);
> 
> 
> --
> -- Name: contact_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY contact ALTER COLUMN contact_id SET DEFAULT nextval('contact_contact_id_seq'::regclass);
> 
> 
> --
> -- Name: currency_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY currency ALTER COLUMN currency_id SET DEFAULT nextval('currency_currency_id_seq'::regclass);
> 
> 
> --
> -- Name: equipment_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY equipment ALTER COLUMN equipment_id SET DEFAULT nextval('equipment_equipment_id_seq'::regclass);
> 
> 
> --
> -- Name: equipment_credential_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY equipment_credential ALTER COLUMN equipment_credential_id SET DEFAULT nextval('equipment_credential_equipment_credential_id_seq'::regclass);
> 
> 
> --
> -- Name: equipment_firmware_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY equipment_firmware ALTER COLUMN equipment_firmware_id SET DEFAULT nextval('equipment_firmware_equipment_firmware_id_seq'::regclass);
> 
> 
> --
> -- Name: equipment_model_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY equipment_model ALTER COLUMN equipment_model_id SET DEFAULT nextval('equipment_model_equipment_model_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY firmware ALTER COLUMN id SET DEFAULT nextval('firmware_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY firmware_equipment ALTER COLUMN id SET DEFAULT nextval('firmware_equipment_id_seq'::regclass);
> 
> 
> --
> -- Name: firmware_gmu_id; Type: DEFAULT; Schema: csctoss; Owner: slony
> --
> 
> ALTER TABLE ONLY firmware_gmu ALTER COLUMN firmware_gmu_id SET DEFAULT nextval('firmware_gmu_firmware_gmu_id_seq'::regclass);
> 
> 
> --
> -- Name: groupname_default_key_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY groupname_default ALTER COLUMN groupname_default_key_id SET DEFAULT nextval('groupname_default_groupname_default_key_id_seq'::regclass);
> 
> 
> --
> -- Name: line_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY line ALTER COLUMN line_id SET DEFAULT nextval('line_line_id_seq'::regclass);
> 
> 
> --
> -- Name: master_radacctid; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY master_radacct ALTER COLUMN master_radacctid SET DEFAULT nextval('master_radacct_master_radacctid_seq'::regclass);
> 
> 
> --
> -- Name: master_radpostauth_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY master_radpostauth ALTER COLUMN master_radpostauth_id SET DEFAULT nextval('master_radpostauth_master_radpostauth_id_seq'::regclass);
> 
> 
> --
> -- Name: message_priority_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY message_priority ALTER COLUMN message_priority_id SET DEFAULT nextval('message_priority_message_priority_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY nas ALTER COLUMN id SET DEFAULT nextval('nas_id_seq'::regclass);
> 
> 
> --
> -- Name: usage_monthly_summary_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY otaps_monthly_usage_summary ALTER COLUMN usage_monthly_summary_id SET DEFAULT nextval('otaps_monthly_usage_summary_usage_monthly_summary_id_seq'::regclass);
> 
> 
> --
> -- Name: parser_log_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY parser_log ALTER COLUMN parser_log_id SET DEFAULT nextval('parser_log_parser_log_id_seq'::regclass);
> 
> 
> --
> -- Name: plan_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY plan ALTER COLUMN plan_id SET DEFAULT nextval('plan_plan_id_seq'::regclass);
> 
> 
> --
> -- Name: plan_log_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY plan_log ALTER COLUMN plan_log_id SET DEFAULT nextval('plan_log_plan_log_id_seq'::regclass);
> 
> 
> --
> -- Name: purchase_log_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY purchase_log ALTER COLUMN purchase_log_id SET DEFAULT nextval('purchase_log_purchase_log_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY radcheck ALTER COLUMN id SET DEFAULT nextval('radcheck_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY radgroupcheck ALTER COLUMN id SET DEFAULT nextval('radgroupcheck_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY radgroupreply ALTER COLUMN id SET DEFAULT nextval('radgroupreply_id_seq'::regclass);
> 
> 
> --
> -- Name: op_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY radius_operator ALTER COLUMN op_id SET DEFAULT nextval('radius_operator_op_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY radreply ALTER COLUMN id SET DEFAULT nextval('radreply_id_seq'::regclass);
> 
> 
> --
> -- Name: receiving_lot_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY receiving_lot ALTER COLUMN receiving_lot_id SET DEFAULT nextval('receiving_lot_receiving_lot_id_seq'::regclass);
> 
> 
> --
> -- Name: replication_failure_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY replication_failure ALTER COLUMN replication_failure_id SET DEFAULT nextval('replication_failure_replication_failure_id_seq'::regclass);
> 
> 
> --
> -- Name: report_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY report ALTER COLUMN report_id SET DEFAULT nextval('report_report_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY rma_form ALTER COLUMN id SET DEFAULT nextval('rma_form_id_seq'::regclass);
> 
> 
> --
> -- Name: shipment_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY shipment ALTER COLUMN shipment_id SET DEFAULT nextval('shipment_shipment_id_seq'::regclass);
> 
> 
> --
> -- Name: software_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY software ALTER COLUMN software_id SET DEFAULT nextval('software_software_id_seq'::regclass);
> 
> 
> --
> -- Name: soup_config_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY soup_config ALTER COLUMN soup_config_id SET DEFAULT nextval('soup_config_soup_config_id_seq'::regclass);
> 
> 
> --
> -- Name: config_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY soup_config_info ALTER COLUMN config_id SET DEFAULT nextval('soup_config_info_config_id_seq'::regclass);
> 
> 
> --
> -- Name: soup_dirnames_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY soup_dirnames ALTER COLUMN soup_dirnames_id SET DEFAULT nextval('soup_dirnames_soup_dirnames_id_seq'::regclass);
> 
> 
> --
> -- Name: sprint_assignment_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY sprint_assignment ALTER COLUMN sprint_assignment_id SET DEFAULT nextval('sprint_assignment_sprint_assignment_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY sprint_csa ALTER COLUMN id SET DEFAULT nextval('sprint_csa_id_seq'::regclass);
> 
> 
> --
> -- Name: sprint_master_radacctid; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY sprint_master_radacct ALTER COLUMN sprint_master_radacctid SET DEFAULT nextval('sprint_master_radacct_sprint_master_radacctid_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY static_ip_pool ALTER COLUMN id SET DEFAULT nextval('static_ip_pool_id_seq'::regclass);
> 
> 
> --
> -- Name: reservation_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY static_ip_reservation ALTER COLUMN reservation_id SET DEFAULT nextval('static_ip_reservation_reservation_id_seq'::regclass);
> 
> 
> --
> -- Name: throw_away_min_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY throw_away_minutes ALTER COLUMN throw_away_min_id SET DEFAULT nextval('throw_away_minutes_throw_away_min_id_seq'::regclass);
> 
> 
> --
> -- Name: unique_identifier_history_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY unique_identifier_history ALTER COLUMN unique_identifier_history_id SET DEFAULT nextval('unique_identifier_history_unique_identifier_history_id_seq'::regclass);
> 
> 
> --
> -- Name: id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY usergroup ALTER COLUMN id SET DEFAULT nextval('usergroup_id_seq'::regclass);
> 
> 
> --
> -- Name: usergroup_error_log_id; Type: DEFAULT; Schema: csctoss; Owner: csctoss_owner
> --
> 
> ALTER TABLE ONLY usergroup_error_log ALTER COLUMN usergroup_error_log_id SET DEFAULT nextval('usergroup_error_log_usergroup_error_log_id_seq'::regclass);
> 
> 
> SET search_path = invoice, pg_catalog;
> 
> --
> -- Name: app_config_id; Type: DEFAULT; Schema: invoice; Owner: invoice_owner
> --
> 
> ALTER TABLE ONLY app_config ALTER COLUMN app_config_id SET DEFAULT nextval('app_config_app_config_id_seq'::regclass);
> 
> 
> --
> -- Name: billing_entity_id; Type: DEFAULT; Schema: invoice; Owner: invoice_owner
> --
> 
> ALTER TABLE ONLY billing_entity ALTER COLUMN billing_entity_id SET DEFAULT nextval('billing_entity_billing_entity_id_seq'::regclass);
> 
> 
> --
> -- Name: document_id; Type: DEFAULT; Schema: invoice; Owner: invoice_owner
> --
> 
> ALTER TABLE ONLY file_system ALTER COLUMN document_id SET DEFAULT nextval('file_system_document_id_seq'::regclass);
> 
> 
> SET search_path = _csctoss_repl, pg_catalog;
> 
> --
50512,51448c49933
< -- Name: scripactions_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< ALTER TABLE ONLY scripactions
<     ADD CONSTRAINT scripactions_pkey PRIMARY KEY (id);
< 
< 
< --
< -- Name: scripconditions_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< ALTER TABLE ONLY scripconditions
<     ADD CONSTRAINT scripconditions_pkey PRIMARY KEY (id);
< 
< 
< --
< -- Name: scrips_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< ALTER TABLE ONLY scrips
<     ADD CONSTRAINT scrips_pkey PRIMARY KEY (id);
< 
< 
< --
< -- Name: sessions_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< ALTER TABLE ONLY sessions
<     ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);
< 
< 
< --
< -- Name: templates_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< ALTER TABLE ONLY templates
<     ADD CONSTRAINT templates_pkey PRIMARY KEY (id);
< 
< 
< --
< -- Name: tickets_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< ALTER TABLE ONLY tickets
<     ADD CONSTRAINT tickets_pkey PRIMARY KEY (id);
< 
< 
< --
< -- Name: transactions_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< ALTER TABLE ONLY transactions
<     ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);
< 
< 
< --
< -- Name: users_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< ALTER TABLE ONLY users
<     ADD CONSTRAINT users_pkey PRIMARY KEY (id);
< 
< 
< SET search_path = _csctoss_repl, pg_catalog;
< 
< --
< -- Name: PartInd_csctoss_repl_sl_log_1-node-201; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
< --
< 
< CREATE INDEX "PartInd_csctoss_repl_sl_log_1-node-201" ON sl_log_1 USING btree (log_xid) WHERE (log_origin = 201);
< 
< 
< --
< -- Name: PartInd_csctoss_repl_sl_log_2-node-201; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
< --
< 
< CREATE INDEX "PartInd_csctoss_repl_sl_log_2-node-201" ON sl_log_2 USING btree (log_xid) WHERE (log_origin = 201);
< 
< 
< --
< -- Name: log_tableid_idx; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
< --
< 
< CREATE INDEX log_tableid_idx ON sl_log_2 USING btree (log_tableid);
< 
< 
< --
< -- Name: sl_confirm_idx1; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
< --
< 
< CREATE INDEX sl_confirm_idx1 ON sl_confirm USING btree (con_origin, con_received, con_seqno);
< 
< 
< --
< -- Name: sl_confirm_idx2; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
< --
< 
< CREATE INDEX sl_confirm_idx2 ON sl_confirm USING btree (con_received, con_seqno);
< 
< 
< --
< -- Name: sl_log_1_idx1; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
< --
< 
< CREATE INDEX sl_log_1_idx1 ON sl_log_1 USING btree (log_origin, log_xid, log_actionseq);
< 
< 
< --
< -- Name: sl_log_2_idx1; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
< --
< 
< CREATE INDEX sl_log_2_idx1 ON sl_log_2 USING btree (log_origin, log_xid, log_actionseq);
< 
< 
< --
< -- Name: sl_seqlog_idx; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
< --
< 
< CREATE INDEX sl_seqlog_idx ON sl_seqlog USING btree (seql_origin, seql_ev_seqno, seql_seqid);
< 
< 
< SET search_path = csctoss, pg_catalog;
< 
< --
< -- Name: billing_entity_name_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX billing_entity_name_idx ON billing_entity USING btree (name);
< 
< 
< --
< -- Name: billing_entity_name_uk; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE UNIQUE INDEX billing_entity_name_uk ON billing_entity USING btree (name) WHERE (billing_entity_type <> 'CONSUMER'::text);
< 
< 
< --
< -- Name: line_billing_entity_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_billing_entity_id_idx ON line USING btree (billing_entity_id);
< 
< 
< --
< -- Name: line_current_plan_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_current_plan_id_idx ON line USING btree (current_plan_id);
< 
< 
< --
< -- Name: line_line_id_varchar_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_line_id_varchar_idx ON line USING btree (((line_id)::character varying));
< 
< 
< --
< -- Name: line_usage_day_history_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_day_history_line_id_idx ON line_usage_day_history USING btree (line_id);
< 
< 
< --
< -- Name: line_usage_day_history_usage_date_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_day_history_usage_date_idx ON line_usage_day_history USING btree (usage_date);
< 
< 
< --
< -- Name: line_usage_day_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_day_line_id_idx ON line_usage_day USING btree (line_id);
< 
< 
< --
< -- Name: line_usage_day_usage_date_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_day_usage_date_idx ON line_usage_day USING btree (usage_date);
< 
< 
< --
< -- Name: line_usage_month_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_month_line_id_idx ON line_usage_month USING btree (line_id);
< 
< 
< --
< -- Name: line_usage_month_year_month_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_month_year_month_idx ON line_usage_month USING btree ("year", "month");
< 
< 
< --
< -- Name: line_usage_overage_calc_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_overage_calc_line_id_idx ON line_usage_overage_calc USING btree (line_id);
< 
< 
< --
< -- Name: line_usage_overage_calc_usage_calc_end_timestamp_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_overage_calc_usage_calc_end_timestamp_idx ON line_usage_overage_calc USING btree (usage_calc_end_timestamp);
< 
< 
< --
< -- Name: line_usage_overage_calc_usage_calc_start_timestamp_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX line_usage_overage_calc_usage_calc_start_timestamp_idx ON line_usage_overage_calc USING btree (usage_calc_start_timestamp);
< 
< 
< --
< -- Name: master_radpostauth_username_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX master_radpostauth_username_idx ON master_radpostauth USING btree (username);
< 
< 
< --
< -- Name: mrad_acct_stop_date_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX mrad_acct_stop_date_idx ON master_radacct USING btree (date_trunc('day'::text, timezone('UTC'::text, acctstoptime))) WHERE (acctstoptime IS NOT NULL);
< 
< 
< --
< -- Name: mrad_acctuniqueid_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX mrad_acctuniqueid_idx ON master_radacct USING btree (acctuniqueid);
< 
< 
< --
< -- Name: mrad_class_acctstoptime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX mrad_class_acctstoptime_idx ON master_radacct USING btree ("class", acctstoptime);
< 
< 
< --
< -- Name: mrad_source_hostname_radacctid_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX mrad_source_hostname_radacctid_idx ON master_radacct USING btree (source_hostname, radacctid);
< 
< 
< --
< -- Name: mrad_username_acctstarttime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX mrad_username_acctstarttime_idx ON master_radacct USING btree (username, acctstarttime);
< 
< 
< --
< -- Name: mrad_username_acctstoptime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX mrad_username_acctstoptime_idx ON master_radacct USING btree (username, acctstoptime);
< 
< 
< --
< -- Name: nas_nasname; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX nas_nasname ON nas USING btree (nasname);
< 
< 
< --
< -- Name: nas_nasname_shortname_uk; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE UNIQUE INDEX nas_nasname_shortname_uk ON nas USING btree (nasname, shortname);
< 
< 
< --
< -- Name: otaps_service_line_number_customer_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX otaps_service_line_number_customer_id_idx ON otaps_service_line_number USING btree (customer_id);
< 
< 
< --
< -- Name: otaps_service_line_number_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX otaps_service_line_number_line_id_idx ON otaps_service_line_number USING btree (line_id);
< 
< 
< --
< -- Name: plan_plan_type_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX plan_plan_type_id_idx ON plan USING btree (plan_type_id);
< 
< 
< --
< -- Name: radcheck_username; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX radcheck_username ON radcheck USING btree (username, attribute);
< 
< 
< --
< -- Name: radgroupcheck_groupname; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX radgroupcheck_groupname ON radgroupcheck USING btree (groupname, attribute);
< 
< 
< --
< -- Name: radgroupreply_groupname; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX radgroupreply_groupname ON radgroupreply USING btree (groupname, attribute);
< 
< 
< --
< -- Name: radreply_username; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX radreply_username ON radreply USING btree (username, attribute);
< 
< 
< --
< -- Name: smrac_acctstarttime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX smrac_acctstarttime_idx ON sprint_master_radacct USING btree (acctstarttime);
< 
< 
< --
< -- Name: smrac_acctstoptime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX smrac_acctstoptime_idx ON sprint_master_radacct USING btree (acctstoptime);
< 
< 
< --
< -- Name: smrac_username_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX smrac_username_idx ON sprint_master_radacct USING btree (username);
< 
< 
< --
< -- Name: soup_cellsignal_esn1_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX soup_cellsignal_esn1_idx ON soup_cellsignal USING btree (esn1);
< 
< 
< --
< -- Name: soup_cellsignal_esn2_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX soup_cellsignal_esn2_idx ON soup_cellsignal USING btree (esn2);
< 
< 
< --
< -- Name: soup_cellsignal_esn_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX soup_cellsignal_esn_idx ON soup_cellsignal USING btree (esn);
< 
< 
< --
< -- Name: soup_cellsignal_timestamp_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX soup_cellsignal_timestamp_idx ON soup_cellsignal USING btree ("timestamp");
< 
< 
< --
< -- Name: soup_config_info_equipment_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX soup_config_info_equipment_id_idx ON soup_config_info USING btree (equipment_id);
< 
< 
< --
< -- Name: soup_device_stats_table_serial_number_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX soup_device_stats_table_serial_number_idx ON soup_device_stats_table USING btree (serial_number);
< 
< 
< --
< -- Name: soup_device_table_eui_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX soup_device_table_eui_idx ON soup_device_table USING btree (eui);
< 
< 
< --
< -- Name: soup_device_table_serial_number_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX soup_device_table_serial_number_idx ON soup_device_table USING btree (serial_number);
< 
< 
< --
< -- Name: unique_identifier_value_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX unique_identifier_value_idx ON unique_identifier USING btree (value);
< 
< 
< --
< -- Name: usage_calc_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX usage_calc_idx ON usage_calc USING btree ("class", acctstoptime);
< 
< 
< --
< -- Name: usage_overage_calc_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX usage_overage_calc_idx ON usage_overage_calc USING btree ("class", acctstoptime);
< 
< 
< --
< -- Name: usergroup_username; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE INDEX usergroup_username ON usergroup USING btree (username);
< 
< 
< --
< -- Name: usergroup_username_groupname_priority_uk; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
< --
< 
< CREATE UNIQUE INDEX usergroup_username_groupname_priority_uk ON usergroup USING btree (username, groupname, priority);
< 
< 
< SET search_path = rt3, pg_catalog;
< 
< --
< -- Name: acl1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX acl1 ON acl USING btree (rightname, objecttype, objectid, principaltype, principalid);
< 
< 
< --
< -- Name: attachments1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX attachments1 ON attachments USING btree (parent);
< 
< 
< --
< -- Name: attachments2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX attachments2 ON attachments USING btree (transactionid);
< 
< 
< --
< -- Name: attachments3; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX attachments3 ON attachments USING btree (parent, transactionid);
< 
< 
< --
< -- Name: attributes1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX attributes1 ON attributes USING btree (name);
< 
< 
< --
< -- Name: attributes2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX attributes2 ON attributes USING btree (objecttype, objectid);
< 
< 
< --
< -- Name: cachedgroupmembers2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX cachedgroupmembers2 ON cachedgroupmembers USING btree (memberid);
< 
< 
< --
< -- Name: cachedgroupmembers3; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX cachedgroupmembers3 ON cachedgroupmembers USING btree (groupid);
< 
< 
< --
< -- Name: customfieldvalues1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX customfieldvalues1 ON customfieldvalues USING btree (customfield);
< 
< 
< --
< -- Name: disgroumem; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX disgroumem ON cachedgroupmembers USING btree (groupid, memberid, disabled);
< 
< 
< --
< -- Name: groups1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE UNIQUE INDEX groups1 ON groups USING btree ("domain", instance, "type", id, name);
< 
< 
< --
< -- Name: groups2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX groups2 ON groups USING btree ("type", instance, "domain");
< 
< 
< --
< -- Name: links1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE UNIQUE INDEX links1 ON links USING btree (base, target, "type");
< 
< 
< --
< -- Name: links4; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX links4 ON links USING btree ("type", localbase);
< 
< 
< --
< -- Name: objectcustomfieldvalues1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX objectcustomfieldvalues1 ON objectcustomfieldvalues USING btree (customfield, objecttype, objectid, content);
< 
< 
< --
< -- Name: objectcustomfieldvalues2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX objectcustomfieldvalues2 ON objectcustomfieldvalues USING btree (customfield, objecttype, objectid);
< 
< 
< --
< -- Name: principals2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX principals2 ON principals USING btree (objectid);
< 
< 
< --
< -- Name: queues1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE UNIQUE INDEX queues1 ON queues USING btree (name);
< 
< 
< --
< -- Name: tickets1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX tickets1 ON tickets USING btree (queue, status);
< 
< 
< --
< -- Name: tickets2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX tickets2 ON tickets USING btree ("owner");
< 
< 
< --
< -- Name: tickets3; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX tickets3 ON tickets USING btree (effectiveid);
< 
< 
< --
< -- Name: tickets4; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX tickets4 ON tickets USING btree (id, status);
< 
< 
< --
< -- Name: tickets5; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX tickets5 ON tickets USING btree (id, effectiveid);
< 
< 
< --
< -- Name: transactions1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX transactions1 ON transactions USING btree (objecttype, objectid);
< 
< 
< --
< -- Name: users1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE UNIQUE INDEX users1 ON users USING btree (name);
< 
< 
< --
< -- Name: users2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX users2 ON users USING btree (name);
< 
< 
< --
< -- Name: users3; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX users3 ON users USING btree (id, emailaddress);
< 
< 
< --
< -- Name: users4; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
< --
< 
< CREATE INDEX users4 ON users USING btree (emailaddress);
< 
< 
< SET search_path = csctoss, pg_catalog;
< 
< --
< -- Name: _csctoss_repl_logtrigger_1000; Type: TRIGGER; Schema: csctoss; Owner: slony
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1000
<     AFTER INSERT OR DELETE OR UPDATE ON system_parameter
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1000', 'kvvvvvvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1010; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1010
<     AFTER INSERT OR DELETE OR UPDATE ON staff
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1010', 'kvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1020; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1020
<     AFTER INSERT OR DELETE OR UPDATE ON staff_access
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1020', 'kk');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1030; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1030
<     AFTER INSERT OR DELETE OR UPDATE ON change_log
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1030', 'kvvvvvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1040; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1040
<     AFTER INSERT OR DELETE OR UPDATE ON last_change_log
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1040', 'vvk');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1050; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1050
<     AFTER INSERT OR DELETE OR UPDATE ON timezone
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1050', 'kvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1060; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1060
<     AFTER INSERT OR DELETE OR UPDATE ON replication_failure
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1060', 'kvvvvvvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1070; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1070
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_info_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1070', 'kvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1080; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1080
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_model
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1080', 'kvvvvvvvvvvvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1090; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1090
<     AFTER INSERT OR DELETE OR UPDATE ON unique_identifier_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1090', 'kvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1100; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1100
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1100', 'kvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1110; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1110
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_status_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1110', 'kv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1120; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1120
<     AFTER INSERT OR DELETE OR UPDATE ON receiving_lot
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1120', 'kvvvvvvvvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1130; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1130
<     AFTER INSERT OR DELETE OR UPDATE ON software
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1130', 'kvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1140; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1140
<     AFTER INSERT OR DELETE OR UPDATE ON app_config
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1140', 'kvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1150; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1150
<     AFTER INSERT OR DELETE OR UPDATE ON equipment
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1150', 'kvvvvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1160; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1160
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_info
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1160', 'kkv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1170; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1170
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_note
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1170', 'kkvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1180; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1180
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_software
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1180', 'kkvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1190; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1190
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_status
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1190', 'kvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1200; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1200
<     AFTER INSERT OR DELETE OR UPDATE ON unique_identifier
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1200', 'kkvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1210; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1210
<     AFTER INSERT OR DELETE OR UPDATE ON address_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1210', 'kv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1220; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1220
<     AFTER INSERT OR DELETE OR UPDATE ON location_label_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1220', 'kv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1230; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1230
<     AFTER INSERT OR DELETE OR UPDATE ON plan_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1230', 'kv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1240; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1240
<     AFTER INSERT OR DELETE OR UPDATE ON state_code
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1240', 'kvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1250; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1250
<     AFTER INSERT OR DELETE OR UPDATE ON address
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1250', 'kvvvvvvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1260; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1260
<     AFTER INSERT OR DELETE OR UPDATE ON billing_entity_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1260', 'kv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1270; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1270
<     AFTER INSERT OR DELETE OR UPDATE ON billing_entity
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1270', 'kvvvvvvvvvv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1280; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
< --
< 
< CREATE TRIGGER _csctoss_repl_logtrigger_1280
<     AFTER INSERT OR DELETE OR UPDATE ON contact_level
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1280', 'kv');
< 
< 
< --
< -- Name: _csctoss_repl_logtrigger_1290; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: scripactions_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
51451,51454c49936,49937
< CREATE TRIGGER _csctoss_repl_logtrigger_1290
<     AFTER INSERT OR DELETE OR UPDATE ON contact_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1290', 'kv');
---
> ALTER TABLE ONLY scripactions
>     ADD CONSTRAINT scripactions_pkey PRIMARY KEY (id);
51458c49941
< -- Name: _csctoss_repl_logtrigger_1300; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: scripconditions_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
51461,51464c49944,49945
< CREATE TRIGGER _csctoss_repl_logtrigger_1300
<     AFTER INSERT OR DELETE OR UPDATE ON contact
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1300', 'kvvvvvvvvvvvvv');
---
> ALTER TABLE ONLY scripconditions
>     ADD CONSTRAINT scripconditions_pkey PRIMARY KEY (id);
51468c49949
< -- Name: _csctoss_repl_logtrigger_1310; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: scrips_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
51471,51474c49952,49953
< CREATE TRIGGER _csctoss_repl_logtrigger_1310
<     AFTER INSERT OR DELETE OR UPDATE ON login_tracking
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1310', 'kkkvvv');
---
> ALTER TABLE ONLY scrips
>     ADD CONSTRAINT scrips_pkey PRIMARY KEY (id);
51478c49957
< -- Name: _csctoss_repl_logtrigger_1320; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: sessions_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
51481,51484c49960,49961
< CREATE TRIGGER _csctoss_repl_logtrigger_1320
<     AFTER INSERT OR DELETE OR UPDATE ON security_roles
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1320', 'kvv');
---
> ALTER TABLE ONLY sessions
>     ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);
51488c49965
< -- Name: _csctoss_repl_logtrigger_1330; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: templates_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
51491,51494c49968,49969
< CREATE TRIGGER _csctoss_repl_logtrigger_1330
<     AFTER INSERT OR DELETE OR UPDATE ON billing_entity_address
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1330', 'kkv');
---
> ALTER TABLE ONLY templates
>     ADD CONSTRAINT templates_pkey PRIMARY KEY (id);
51498c49973
< -- Name: _csctoss_repl_logtrigger_1340; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: tickets_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
51501,51504c49976,49977
< CREATE TRIGGER _csctoss_repl_logtrigger_1340
<     AFTER INSERT OR DELETE OR UPDATE ON contact_address
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1340', 'kkv');
---
> ALTER TABLE ONLY tickets
>     ADD CONSTRAINT tickets_pkey PRIMARY KEY (id);
51508c49981
< -- Name: _csctoss_repl_logtrigger_1350; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: transactions_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
51511,51514c49984,49985
< CREATE TRIGGER _csctoss_repl_logtrigger_1350
<     AFTER INSERT OR DELETE OR UPDATE ON product
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1350', 'kvvvvvvvvv');
---
> ALTER TABLE ONLY transactions
>     ADD CONSTRAINT transactions_pkey PRIMARY KEY (id);
51518c49989
< -- Name: _csctoss_repl_logtrigger_1360; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: users_pkey; Type: CONSTRAINT; Schema: rt3; Owner: rt_user; Tablespace: 
51521,51524c49992,49993
< CREATE TRIGGER _csctoss_repl_logtrigger_1360
<     AFTER INSERT OR DELETE OR UPDATE ON billing_entity_product
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1360', 'kkvv');
---
> ALTER TABLE ONLY users
>     ADD CONSTRAINT users_pkey PRIMARY KEY (id);
51526a49996,49997
> SET search_path = _csctoss_repl, pg_catalog;
> 
51528c49999
< -- Name: _csctoss_repl_logtrigger_1370; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: PartInd_csctoss_repl_sl_log_1-node-201; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
51531,51534c50002
< CREATE TRIGGER _csctoss_repl_logtrigger_1370
<     AFTER INSERT OR DELETE OR UPDATE ON api_key
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1370', 'kvvv');
---
> CREATE INDEX "PartInd_csctoss_repl_sl_log_1-node-201" ON sl_log_1 USING btree (log_xid) WHERE (log_origin = 201);
51538c50006
< -- Name: _csctoss_repl_logtrigger_1380; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: PartInd_csctoss_repl_sl_log_2-node-201; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
51541,51544c50009
< CREATE TRIGGER _csctoss_repl_logtrigger_1380
<     AFTER INSERT OR DELETE OR UPDATE ON api_request_log
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1380', 'kvvvvvvv');
---
> CREATE INDEX "PartInd_csctoss_repl_sl_log_2-node-201" ON sl_log_2 USING btree (log_xid) WHERE (log_origin = 201);
51548c50013
< -- Name: _csctoss_repl_logtrigger_1390; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: sl_confirm_idx1; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
51551,51554c50016
< CREATE TRIGGER _csctoss_repl_logtrigger_1390
<     AFTER INSERT OR DELETE OR UPDATE ON plan
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1390', 'kvvvvvvvvvvvvvv');
---
> CREATE INDEX sl_confirm_idx1 ON sl_confirm USING btree (con_origin, con_received, con_seqno);
51558c50020
< -- Name: _csctoss_repl_logtrigger_1400; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: sl_confirm_idx2; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
51561,51564c50023
< CREATE TRIGGER _csctoss_repl_logtrigger_1400
<     AFTER INSERT OR DELETE OR UPDATE ON report
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1400', 'kvvvvvvvvvvv');
---
> CREATE INDEX sl_confirm_idx2 ON sl_confirm USING btree (con_received, con_seqno);
51568c50027
< -- Name: _csctoss_repl_logtrigger_1410; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: sl_log_1_idx1; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
51571,51574c50030
< CREATE TRIGGER _csctoss_repl_logtrigger_1410
<     AFTER INSERT OR DELETE OR UPDATE ON shipment
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1410', 'kvvvvvvvvvvvv');
---
> CREATE INDEX sl_log_1_idx1 ON sl_log_1 USING btree (log_origin, log_xid, log_actionseq);
51578c50034
< -- Name: _csctoss_repl_logtrigger_1420; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: sl_log_2_idx1; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
51581,51584c50037
< CREATE TRIGGER _csctoss_repl_logtrigger_1420
<     AFTER INSERT OR DELETE OR UPDATE ON shipment_equipment
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1420', 'kkvv');
---
> CREATE INDEX sl_log_2_idx1 ON sl_log_2 USING btree (log_origin, log_xid, log_actionseq);
51588c50041
< -- Name: _csctoss_repl_logtrigger_1430; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: sl_seqlog_idx; Type: INDEX; Schema: _csctoss_repl; Owner: slony; Tablespace: 
51591,51594c50044,50045
< CREATE TRIGGER _csctoss_repl_logtrigger_1430
<     AFTER INSERT OR DELETE OR UPDATE ON billing_entity_location_label
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1430', 'kkvv');
---
> CREATE INDEX sl_seqlog_idx ON sl_seqlog USING btree (seql_origin, seql_ev_seqno, seql_seqid);
> 
51595a50047
> SET search_path = csctoss, pg_catalog;
51598c50050
< -- Name: _csctoss_repl_logtrigger_1440; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: billing_entity_name_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51601,51604c50053
< CREATE TRIGGER _csctoss_repl_logtrigger_1440
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_charge_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1440', 'kv');
---
> CREATE INDEX billing_entity_name_idx ON billing_entity USING btree (name);
51608c50057
< -- Name: _csctoss_repl_logtrigger_1450; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: billing_entity_name_uk; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51611,51614c50060
< CREATE TRIGGER _csctoss_repl_logtrigger_1450
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_charge_unit
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1450', 'kv');
---
> CREATE UNIQUE INDEX billing_entity_name_uk ON billing_entity USING btree (name) WHERE (billing_entity_type <> 'CONSUMER'::text);
51618c50064
< -- Name: _csctoss_repl_logtrigger_1460; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_billing_entity_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51621,51624c50067
< CREATE TRIGGER _csctoss_repl_logtrigger_1460
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_discount_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1460', 'kv');
---
> CREATE INDEX line_billing_entity_id_idx ON line USING btree (billing_entity_id);
51628c50071
< -- Name: _csctoss_repl_logtrigger_1470; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_current_plan_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51631,51634c50074
< CREATE TRIGGER _csctoss_repl_logtrigger_1470
<     AFTER INSERT OR DELETE OR UPDATE ON bp_charge_frequency
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1470', 'kv');
---
> CREATE INDEX line_current_plan_id_idx ON line USING btree (current_plan_id);
51638c50078
< -- Name: _csctoss_repl_logtrigger_1480; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_line_id_varchar_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51641,51644c50081
< CREATE TRIGGER _csctoss_repl_logtrigger_1480
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_calendar
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1480', 'kv');
---
> CREATE INDEX line_line_id_varchar_idx ON line USING btree (((line_id)::character varying));
51648c50085
< -- Name: _csctoss_repl_logtrigger_1490; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_day_history_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51651,51654c50088
< CREATE TRIGGER _csctoss_repl_logtrigger_1490
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_period
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1490', 'kvvvv');
---
> CREATE INDEX line_usage_day_history_line_id_idx ON line_usage_day_history USING btree (line_id);
51658c50092
< -- Name: _csctoss_repl_logtrigger_1500; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_day_history_usage_date_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51661,51664c50095
< CREATE TRIGGER _csctoss_repl_logtrigger_1500
<     AFTER INSERT OR DELETE OR UPDATE ON currency
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1500', 'kvvv');
---
> CREATE INDEX line_usage_day_history_usage_date_idx ON line_usage_day_history USING btree (usage_date);
51668c50099
< -- Name: _csctoss_repl_logtrigger_1510; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_day_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51671,51674c50102
< CREATE TRIGGER _csctoss_repl_logtrigger_1510
<     AFTER INSERT OR DELETE OR UPDATE ON carrier
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1510', 'kvv');
---
> CREATE INDEX line_usage_day_line_id_idx ON line_usage_day USING btree (line_id);
51678c50106
< -- Name: _csctoss_repl_logtrigger_1520; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_day_usage_date_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51681,51684c50109
< CREATE TRIGGER _csctoss_repl_logtrigger_1520
<     AFTER INSERT OR DELETE OR UPDATE ON bp_master_billing_plan
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1520', 'kvvvvvvv');
---
> CREATE INDEX line_usage_day_usage_date_idx ON line_usage_day USING btree (usage_date);
51688c50113
< -- Name: _csctoss_repl_logtrigger_1530; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_month_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51691,51694c50116
< CREATE TRIGGER _csctoss_repl_logtrigger_1530
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_entity_preferences
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1530', 'kvvvvvvvvvvv');
---
> CREATE INDEX line_usage_month_line_id_idx ON line_usage_month USING btree (line_id);
51698c50120
< -- Name: _csctoss_repl_logtrigger_1540; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_month_year_month_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51701,51704c50123
< CREATE TRIGGER _csctoss_repl_logtrigger_1540
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_charge
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1540', 'kvvvvvvvvvv');
---
> CREATE INDEX line_usage_month_year_month_idx ON line_usage_month USING btree ("year", "month");
51708c50127
< -- Name: _csctoss_repl_logtrigger_1550; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_overage_calc_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51711,51714c50130
< CREATE TRIGGER _csctoss_repl_logtrigger_1550
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_charge_static
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1550', 'kvvvvv');
---
> CREATE INDEX line_usage_overage_calc_line_id_idx ON line_usage_overage_calc USING btree (line_id);
51718c50134
< -- Name: _csctoss_repl_logtrigger_1560; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_overage_calc_usage_calc_end_timestamp_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51721,51724c50137
< CREATE TRIGGER _csctoss_repl_logtrigger_1560
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_charge_onetime
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1560', 'kvv');
---
> CREATE INDEX line_usage_overage_calc_usage_calc_end_timestamp_idx ON line_usage_overage_calc USING btree (usage_calc_end_timestamp);
51728c50141
< -- Name: _csctoss_repl_logtrigger_1570; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: line_usage_overage_calc_usage_calc_start_timestamp_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51731,51734c50144
< CREATE TRIGGER _csctoss_repl_logtrigger_1570
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_charge_usage
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1570', 'kvvvvv');
---
> CREATE INDEX line_usage_overage_calc_usage_calc_start_timestamp_idx ON line_usage_overage_calc USING btree (usage_calc_start_timestamp);
51738c50148
< -- Name: _csctoss_repl_logtrigger_1580; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: master_radpostauth_username_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51741,51744c50151
< CREATE TRIGGER _csctoss_repl_logtrigger_1580
<     AFTER INSERT OR DELETE OR UPDATE ON bp_usage_allotment
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1580', 'kvvvv');
---
> CREATE INDEX master_radpostauth_username_idx ON master_radpostauth USING btree (username);
51748c50155
< -- Name: _csctoss_repl_logtrigger_1590; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: mrad_acct_stop_date_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51751,51754c50158
< CREATE TRIGGER _csctoss_repl_logtrigger_1590
<     AFTER INSERT OR DELETE OR UPDATE ON bp_allotment_adjustment_history
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1590', 'kkkvvv');
---
> CREATE INDEX mrad_acct_stop_date_idx ON master_radacct USING btree (date_trunc('day'::text, timezone('UTC'::text, acctstoptime))) WHERE (acctstoptime IS NOT NULL);
51758c50162
< -- Name: _csctoss_repl_logtrigger_1600; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: mrad_acctuniqueid_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51761,51764c50165
< CREATE TRIGGER _csctoss_repl_logtrigger_1600
<     AFTER INSERT OR DELETE OR UPDATE ON bp_aggregate_usage_plan
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1600', 'kvvvvvvv');
---
> CREATE INDEX mrad_acctuniqueid_idx ON master_radacct USING btree (acctuniqueid);
51768c50169
< -- Name: _csctoss_repl_logtrigger_1610; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: mrad_class_acctstoptime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51771,51774c50172
< CREATE TRIGGER _csctoss_repl_logtrigger_1610
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_charge_discount
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1610', 'kvvvvvvv');
---
> CREATE INDEX mrad_class_acctstoptime_idx ON master_radacct USING btree ("class", acctstoptime);
51778c50176
< -- Name: _csctoss_repl_logtrigger_1620; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: mrad_source_hostname_radacctid_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51781,51784c50179
< CREATE TRIGGER _csctoss_repl_logtrigger_1620
<     AFTER INSERT OR DELETE OR UPDATE ON bp_past_due_charge
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1620', 'kvvvvvv');
---
> CREATE INDEX mrad_source_hostname_radacctid_idx ON master_radacct USING btree (source_hostname, radacctid);
51788c50183
< -- Name: _csctoss_repl_logtrigger_1630; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: mrad_username_acctstarttime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51791,51794c50186
< CREATE TRIGGER _csctoss_repl_logtrigger_1630
<     AFTER INSERT OR DELETE OR UPDATE ON bp_billing_equipment_assignment
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1630', 'kvvvvvv');
---
> CREATE INDEX mrad_username_acctstarttime_idx ON master_radacct USING btree (username, acctstarttime);
51798c50190
< -- Name: _csctoss_repl_logtrigger_1640; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: mrad_username_acctstoptime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51801,51804c50193
< CREATE TRIGGER _csctoss_repl_logtrigger_1640
<     AFTER INSERT OR DELETE OR UPDATE ON bp_period_billing_summary
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1640', 'kvvvv');
---
> CREATE INDEX mrad_username_acctstoptime_idx ON master_radacct USING btree (username, acctstoptime);
51808c50197
< -- Name: _csctoss_repl_logtrigger_1650; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: nas_nasname; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51811,51814c50200
< CREATE TRIGGER _csctoss_repl_logtrigger_1650
<     AFTER INSERT OR DELETE OR UPDATE ON bp_period_charge_summary
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1650', 'kvvvvvvvv');
---
> CREATE INDEX nas_nasname ON nas USING btree (nasname);
51818c50204
< -- Name: _csctoss_repl_logtrigger_1660; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: nas_nasname_shortname_uk; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51821,51824c50207
< CREATE TRIGGER _csctoss_repl_logtrigger_1660
<     AFTER INSERT OR DELETE OR UPDATE ON bp_period_change_summary
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1660', 'kkv');
---
> CREATE UNIQUE INDEX nas_nasname_shortname_uk ON nas USING btree (nasname, shortname);
51828c50211
< -- Name: _csctoss_repl_logtrigger_1670; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: otaps_service_line_number_customer_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51831,51834c50214
< CREATE TRIGGER _csctoss_repl_logtrigger_1670
<     AFTER INSERT OR DELETE OR UPDATE ON bp_period_usage_summary
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1670', 'kvvvvvv');
---
> CREATE INDEX otaps_service_line_number_customer_id_idx ON otaps_service_line_number USING btree (customer_id);
51838c50218
< -- Name: _csctoss_repl_logtrigger_1680; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: otaps_service_line_number_line_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51841,51844c50221
< CREATE TRIGGER _csctoss_repl_logtrigger_1680
<     AFTER INSERT OR DELETE OR UPDATE ON bp_period_status_summary
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1680', 'kkvvv');
---
> CREATE INDEX otaps_service_line_number_line_id_idx ON otaps_service_line_number USING btree (line_id);
51848c50225
< -- Name: _csctoss_repl_logtrigger_1690; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: plan_plan_type_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51851,51854c50228
< CREATE TRIGGER _csctoss_repl_logtrigger_1690
<     AFTER INSERT OR DELETE OR UPDATE ON portal_properties
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1690', 'kv');
---
> CREATE INDEX plan_plan_type_id_idx ON plan USING btree (plan_type_id);
51858c50232
< -- Name: _csctoss_repl_logtrigger_1700; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: radcheck_username; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51861,51864c50235
< CREATE TRIGGER _csctoss_repl_logtrigger_1700
<     AFTER INSERT OR DELETE OR UPDATE ON download_file_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1700', 'kv');
---
> CREATE INDEX radcheck_username ON radcheck USING btree (username, attribute);
51868c50239
< -- Name: _csctoss_repl_logtrigger_1710; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: radgroupcheck_groupname; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51871,51874c50242
< CREATE TRIGGER _csctoss_repl_logtrigger_1710
<     AFTER INSERT OR DELETE OR UPDATE ON billing_entity_download
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1710', 'kkvvvvvv');
---
> CREATE INDEX radgroupcheck_groupname ON radgroupcheck USING btree (groupname, attribute);
51878c50246
< -- Name: _csctoss_repl_logtrigger_1720; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: radgroupreply_groupname; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51881,51884c50249
< CREATE TRIGGER _csctoss_repl_logtrigger_1720
<     AFTER INSERT OR DELETE OR UPDATE ON broadcast_message_level
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1720', 'kvvvv');
---
> CREATE INDEX radgroupreply_groupname ON radgroupreply USING btree (groupname, attribute);
51888c50253
< -- Name: _csctoss_repl_logtrigger_1730; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: radreply_username; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51891,51894c50256
< CREATE TRIGGER _csctoss_repl_logtrigger_1730
<     AFTER INSERT OR DELETE OR UPDATE ON broadcast_message_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1730', 'kv');
---
> CREATE INDEX radreply_username ON radreply USING btree (username, attribute);
51898c50260
< -- Name: _csctoss_repl_logtrigger_1740; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: smrac_acctstarttime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51901,51904c50263
< CREATE TRIGGER _csctoss_repl_logtrigger_1740
<     AFTER INSERT OR DELETE OR UPDATE ON broadcast_message
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1740', 'kvvvvvvvvv');
---
> CREATE INDEX smrac_acctstarttime_idx ON sprint_master_radacct USING btree (acctstarttime);
51908c50267
< -- Name: _csctoss_repl_logtrigger_1750; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: smrac_acctstoptime_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51911,51914c50270
< CREATE TRIGGER _csctoss_repl_logtrigger_1750
<     AFTER INSERT OR DELETE OR UPDATE ON attribute_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1750', 'kv');
---
> CREATE INDEX smrac_acctstoptime_idx ON sprint_master_radacct USING btree (acctstoptime);
51918c50274
< -- Name: _csctoss_repl_logtrigger_1760; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: smrac_username_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51921,51924c50277
< CREATE TRIGGER _csctoss_repl_logtrigger_1760
<     AFTER INSERT OR DELETE OR UPDATE ON attribute
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1760', 'kvv');
---
> CREATE INDEX smrac_username_idx ON sprint_master_radacct USING btree (username);
51928c50281
< -- Name: _csctoss_repl_logtrigger_1780; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: soup_cellsignal_esn1_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51931,51934c50284
< CREATE TRIGGER _csctoss_repl_logtrigger_1780
<     AFTER INSERT OR DELETE OR UPDATE ON username
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1780', 'kvvvvvvvv');
---
> CREATE INDEX soup_cellsignal_esn1_idx ON soup_cellsignal USING btree (esn1);
51938c50288
< -- Name: _csctoss_repl_logtrigger_1790; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: soup_cellsignal_esn2_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51941,51944c50291
< CREATE TRIGGER _csctoss_repl_logtrigger_1790
<     AFTER INSERT OR DELETE OR UPDATE ON groupname
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1790', 'kvvvvv');
---
> CREATE INDEX soup_cellsignal_esn2_idx ON soup_cellsignal USING btree (esn2);
51948c50295
< -- Name: _csctoss_repl_logtrigger_1800; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: soup_cellsignal_esn_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51951,51954c50298
< CREATE TRIGGER _csctoss_repl_logtrigger_1800
<     AFTER INSERT OR DELETE OR UPDATE ON usergroup
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1800', 'kvvv');
---
> CREATE INDEX soup_cellsignal_esn_idx ON soup_cellsignal USING btree (esn);
51958c50302
< -- Name: _csctoss_repl_logtrigger_1810; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: soup_cellsignal_timestamp_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51961,51964c50305
< CREATE TRIGGER _csctoss_repl_logtrigger_1810
<     AFTER INSERT OR DELETE OR UPDATE ON nas
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1810', 'kvvvvvvv');
---
> CREATE INDEX soup_cellsignal_timestamp_idx ON soup_cellsignal USING btree ("timestamp");
51968c50309
< -- Name: _csctoss_repl_logtrigger_1820; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: soup_config_info_equipment_id_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51971,51974c50312
< CREATE TRIGGER _csctoss_repl_logtrigger_1820
<     AFTER INSERT OR DELETE OR UPDATE ON radcheck
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1820', 'kvvvv');
---
> CREATE INDEX soup_config_info_equipment_id_idx ON soup_config_info USING btree (equipment_id);
51978c50316
< -- Name: _csctoss_repl_logtrigger_1830; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: soup_device_stats_table_serial_number_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51981,51984c50319
< CREATE TRIGGER _csctoss_repl_logtrigger_1830
<     AFTER INSERT OR DELETE OR UPDATE ON radgroupcheck
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1830', 'kvvvv');
---
> CREATE INDEX soup_device_stats_table_serial_number_idx ON soup_device_stats_table USING btree (serial_number);
51988c50323
< -- Name: _csctoss_repl_logtrigger_1840; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: soup_device_table_eui_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
51991,51994c50326
< CREATE TRIGGER _csctoss_repl_logtrigger_1840
<     AFTER INSERT OR DELETE OR UPDATE ON radgroupreply
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1840', 'kvvvv');
---
> CREATE INDEX soup_device_table_eui_idx ON soup_device_table USING btree (eui);
51998c50330
< -- Name: _csctoss_repl_logtrigger_1850; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: soup_device_table_serial_number_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
52001,52004c50333
< CREATE TRIGGER _csctoss_repl_logtrigger_1850
<     AFTER INSERT OR DELETE OR UPDATE ON radreply
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1850', 'kvvvvv');
---
> CREATE INDEX soup_device_table_serial_number_idx ON soup_device_table USING btree (serial_number);
52008c50337
< -- Name: _csctoss_repl_logtrigger_1860; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: unique_identifier_value_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
52011,52014c50340
< CREATE TRIGGER _csctoss_repl_logtrigger_1860
<     AFTER INSERT OR DELETE OR UPDATE ON alert_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1860', 'kvvvv');
---
> CREATE INDEX unique_identifier_value_idx ON unique_identifier USING btree (value);
52018c50344
< -- Name: _csctoss_repl_logtrigger_1870; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: usage_calc_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
52021,52024c50347
< CREATE TRIGGER _csctoss_repl_logtrigger_1870
<     AFTER INSERT OR DELETE OR UPDATE ON alert_definition
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1870', 'kvvvvvvvvvvvvvvvv');
---
> CREATE INDEX usage_calc_idx ON usage_calc USING btree ("class", acctstoptime);
52028c50351
< -- Name: _csctoss_repl_logtrigger_1880; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: usage_overage_calc_idx; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
52031,52034c50354
< CREATE TRIGGER _csctoss_repl_logtrigger_1880
<     AFTER INSERT OR DELETE OR UPDATE ON alert_definition_contact
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1880', 'kkvvvv');
---
> CREATE INDEX usage_overage_calc_idx ON usage_overage_calc USING btree ("class", acctstoptime);
52038c50358
< -- Name: _csctoss_repl_logtrigger_1890; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: usergroup_username; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
52041,52044c50361
< CREATE TRIGGER _csctoss_repl_logtrigger_1890
<     AFTER INSERT OR DELETE OR UPDATE ON alert_definition_snmp
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1890', 'kvvv');
---
> CREATE INDEX usergroup_username ON usergroup USING btree (username);
52048c50365
< -- Name: _csctoss_repl_logtrigger_1900; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: usergroup_username_groupname_priority_uk; Type: INDEX; Schema: csctoss; Owner: csctoss_owner; Tablespace: 
52051,52054c50368,50369
< CREATE TRIGGER _csctoss_repl_logtrigger_1900
<     AFTER INSERT OR DELETE OR UPDATE ON alert_activity
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1900', 'kvvvvvvvv');
---
> CREATE UNIQUE INDEX usergroup_username_groupname_priority_uk ON usergroup USING btree (username, groupname, priority);
> 
52055a50371
> SET search_path = rt3, pg_catalog;
52058c50374
< -- Name: _csctoss_repl_logtrigger_1910; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: acl1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52061,52064c50377
< CREATE TRIGGER _csctoss_repl_logtrigger_1910
<     AFTER INSERT OR DELETE OR UPDATE ON atm_processor
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1910', 'kv');
---
> CREATE INDEX acl1 ON acl USING btree (rightname, objecttype, objectid, principaltype, principalid);
52068c50381
< -- Name: _csctoss_repl_logtrigger_1920; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: attachments1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52071,52074c50384
< CREATE TRIGGER _csctoss_repl_logtrigger_1920
<     AFTER INSERT OR DELETE OR UPDATE ON line_assignment_type
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1920', 'kv');
---
> CREATE INDEX attachments1 ON attachments USING btree (parent);
52078c50388
< -- Name: _csctoss_repl_logtrigger_1930; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: attachments2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52081,52084c50391
< CREATE TRIGGER _csctoss_repl_logtrigger_1930
<     AFTER INSERT OR DELETE OR UPDATE ON line
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1930', 'kvvvvvvvvvvvvvvvvvvvvvvvvvvvv');
---
> CREATE INDEX attachments2 ON attachments USING btree (transactionid);
52088c50395
< -- Name: _csctoss_repl_logtrigger_1940; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: attachments3; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52091,52094c50398
< CREATE TRIGGER _csctoss_repl_logtrigger_1940
<     AFTER INSERT OR DELETE OR UPDATE ON line_equipment
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1940', 'kkvvvvvv');
---
> CREATE INDEX attachments3 ON attachments USING btree (parent, transactionid);
52098c50402
< -- Name: _csctoss_repl_logtrigger_1950; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: attributes1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52101,52104c50405
< CREATE TRIGGER _csctoss_repl_logtrigger_1950
<     AFTER INSERT OR DELETE OR UPDATE ON line_terminal
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1950', 'kvv');
---
> CREATE INDEX attributes1 ON attributes USING btree (name);
52108c50409
< -- Name: _csctoss_repl_logtrigger_1960; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: attributes2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52111,52114c50412
< CREATE TRIGGER _csctoss_repl_logtrigger_1960
<     AFTER INSERT OR DELETE OR UPDATE ON mrad_duplicate
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1960', 'kvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv');
---
> CREATE INDEX attributes2 ON attributes USING btree (objecttype, objectid);
52118c50416
< -- Name: _csctoss_repl_logtrigger_1970; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: cachedgroupmembers2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52121,52124c50419
< CREATE TRIGGER _csctoss_repl_logtrigger_1970
<     AFTER INSERT OR DELETE OR UPDATE ON line_usage_day
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1970', 'kvkvvvvvvvvvv');
---
> CREATE INDEX cachedgroupmembers2 ON cachedgroupmembers USING btree (memberid);
52128c50423
< -- Name: _csctoss_repl_logtrigger_1980; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: cachedgroupmembers3; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52131,52134c50426
< CREATE TRIGGER _csctoss_repl_logtrigger_1980
<     AFTER INSERT OR DELETE OR UPDATE ON line_usage_month
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1980', 'kkkvvvvvvvvvvv');
---
> CREATE INDEX cachedgroupmembers3 ON cachedgroupmembers USING btree (groupid);
52138c50430
< -- Name: _csctoss_repl_logtrigger_1990; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: customfieldvalues1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52141,52144c50433
< CREATE TRIGGER _csctoss_repl_logtrigger_1990
<     AFTER INSERT OR DELETE OR UPDATE ON sales_order
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '1990', 'kv');
---
> CREATE INDEX customfieldvalues1 ON customfieldvalues USING btree (customfield);
52148c50437
< -- Name: _csctoss_repl_logtrigger_2000; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: disgroumem; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52151,52154c50440
< CREATE TRIGGER _csctoss_repl_logtrigger_2000
<     AFTER INSERT OR DELETE OR UPDATE ON cc_auth_log
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2000', 'kvvvvvvv');
---
> CREATE INDEX disgroumem ON cachedgroupmembers USING btree (groupid, memberid, disabled);
52158c50444
< -- Name: _csctoss_repl_logtrigger_2010; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: groups1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52161,52164c50447
< CREATE TRIGGER _csctoss_repl_logtrigger_2010
<     AFTER INSERT OR DELETE OR UPDATE ON cc_encrypt_key
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2010', 'kvvvv');
---
> CREATE UNIQUE INDEX groups1 ON groups USING btree ("domain", instance, "type", id, name);
52168c50451
< -- Name: _csctoss_repl_logtrigger_2020; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: groups2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52171,52174c50454
< CREATE TRIGGER _csctoss_repl_logtrigger_2020
<     AFTER INSERT OR DELETE OR UPDATE ON plan_log
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2020', 'kvvvvvv');
---
> CREATE INDEX groups2 ON groups USING btree ("type", instance, "domain");
52178c50458
< -- Name: _csctoss_repl_logtrigger_2040; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: links1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52181,52184c50461
< CREATE TRIGGER _csctoss_repl_logtrigger_2040
<     AFTER INSERT OR DELETE OR UPDATE ON parser_log
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2040', 'kvvvvvv');
---
> CREATE UNIQUE INDEX links1 ON links USING btree (base, target, "type");
52188c50465
< -- Name: _csctoss_repl_logtrigger_2050; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: links4; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52191,52194c50468
< CREATE TRIGGER _csctoss_repl_logtrigger_2050
<     AFTER INSERT OR DELETE OR UPDATE ON carrier_domain
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2050', 'kkv');
---
> CREATE INDEX links4 ON links USING btree ("type", localbase);
52198c50472
< -- Name: _csctoss_repl_logtrigger_2060; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: objectcustomfieldvalues1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52201,52204c50475
< CREATE TRIGGER _csctoss_repl_logtrigger_2060
<     AFTER INSERT OR DELETE OR UPDATE ON branding_button
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2060', 'kkvvvvv');
---
> CREATE INDEX objectcustomfieldvalues1 ON objectcustomfieldvalues USING btree (customfield, objecttype, objectid, content);
52208c50479
< -- Name: _csctoss_repl_logtrigger_2070; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: objectcustomfieldvalues2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52211,52214c50482
< CREATE TRIGGER _csctoss_repl_logtrigger_2070
<     AFTER INSERT OR DELETE OR UPDATE ON branding_content
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2070', 'kvvvvvvvvvvvvv');
---
> CREATE INDEX objectcustomfieldvalues2 ON objectcustomfieldvalues USING btree (customfield, objecttype, objectid);
52218c50486
< -- Name: _csctoss_repl_logtrigger_2080; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: principals2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52221,52224c50489
< CREATE TRIGGER _csctoss_repl_logtrigger_2080
<     AFTER INSERT OR DELETE OR UPDATE ON branding_presentation
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2080', 'kvvvvv');
---
> CREATE INDEX principals2 ON principals USING btree (objectid);
52228c50493
< -- Name: _csctoss_repl_logtrigger_2090; Type: TRIGGER; Schema: csctoss; Owner: slony
---
> -- Name: queues1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52231,52234c50496
< CREATE TRIGGER _csctoss_repl_logtrigger_2090
<     AFTER INSERT OR DELETE OR UPDATE ON soup_device
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2090', 'kvvvvvvvv');
---
> CREATE UNIQUE INDEX queues1 ON queues USING btree (name);
52238c50500
< -- Name: _csctoss_repl_logtrigger_2110; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: tickets1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52241,52244c50503
< CREATE TRIGGER _csctoss_repl_logtrigger_2110
<     AFTER INSERT OR DELETE OR UPDATE ON throw_away_minutes
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2110', 'kvvvv');
---
> CREATE INDEX tickets1 ON tickets USING btree (queue, status);
52248c50507
< -- Name: _csctoss_repl_logtrigger_2120; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: tickets2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52251,52254c50510
< CREATE TRIGGER _csctoss_repl_logtrigger_2120
<     AFTER INSERT OR DELETE OR UPDATE ON usergroup_error_log
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2120', 'kvvvvv');
---
> CREATE INDEX tickets2 ON tickets USING btree ("owner");
52258c50514
< -- Name: _csctoss_repl_logtrigger_2130; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: tickets3; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52261,52264c50517
< CREATE TRIGGER _csctoss_repl_logtrigger_2130
<     AFTER INSERT OR DELETE OR UPDATE ON purchase_log
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2130', 'kvvvvvvvvvvvv');
---
> CREATE INDEX tickets3 ON tickets USING btree (effectiveid);
52268c50521
< -- Name: _csctoss_repl_logtrigger_2140; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: tickets4; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52271,52274c50524
< CREATE TRIGGER _csctoss_repl_logtrigger_2140
<     AFTER INSERT OR DELETE OR UPDATE ON api_device_login
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2140', 'kvvvvv');
---
> CREATE INDEX tickets4 ON tickets USING btree (id, status);
52278c50528
< -- Name: _csctoss_repl_logtrigger_2150; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: tickets5; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52281,52284c50531
< CREATE TRIGGER _csctoss_repl_logtrigger_2150
<     AFTER INSERT OR DELETE OR UPDATE ON api_device_parser
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2150', 'kk');
---
> CREATE INDEX tickets5 ON tickets USING btree (id, effectiveid);
52288c50535
< -- Name: _csctoss_repl_logtrigger_2160; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: transactions1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52291,52294c50538
< CREATE TRIGGER _csctoss_repl_logtrigger_2160
<     AFTER INSERT OR DELETE OR UPDATE ON api_parser
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2160', 'kvvvvv');
---
> CREATE INDEX transactions1 ON transactions USING btree (objecttype, objectid);
52298c50542
< -- Name: _csctoss_repl_logtrigger_2170; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: users1; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52301,52304c50545
< CREATE TRIGGER _csctoss_repl_logtrigger_2170
<     AFTER INSERT OR DELETE OR UPDATE ON api_supported_device
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2170', 'kvv');
---
> CREATE UNIQUE INDEX users1 ON users USING btree (name);
52308c50549
< -- Name: _csctoss_repl_logtrigger_2180; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: users2; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52311,52314c50552
< CREATE TRIGGER _csctoss_repl_logtrigger_2180
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_credential
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2180', 'kvvvvv');
---
> CREATE INDEX users2 ON users USING btree (name);
52318c50556
< -- Name: _csctoss_repl_logtrigger_2190; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: users3; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52321,52324c50559
< CREATE TRIGGER _csctoss_repl_logtrigger_2190
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_firmware
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2190', 'kvvv');
---
> CREATE INDEX users3 ON users USING btree (id, emailaddress);
52328c50563
< -- Name: _csctoss_repl_logtrigger_2200; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: users4; Type: INDEX; Schema: rt3; Owner: rt_user; Tablespace: 
52331,52334c50566,50567
< CREATE TRIGGER _csctoss_repl_logtrigger_2200
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_model_credential
<     FOR EACH ROW
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2200', 'kkvvvv');
---
> CREATE INDEX users4 ON users USING btree (emailaddress);
> 
52335a50569
> SET search_path = csctoss, pg_catalog;
52338c50572
< -- Name: _csctoss_repl_logtrigger_2230; Type: TRIGGER; Schema: csctoss; Owner: postgres
---
> -- Name: _csctoss_repl_denyaccess_1000; Type: TRIGGER; Schema: csctoss; Owner: slony
52341,52342c50575,50576
< CREATE TRIGGER _csctoss_repl_logtrigger_2230
<     AFTER INSERT OR DELETE OR UPDATE ON lns_lookup
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1000
>     BEFORE INSERT OR DELETE OR UPDATE ON system_parameter
52344c50578
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2230', 'kvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52348c50582
< -- Name: _csctoss_repl_logtrigger_2240; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1010; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52351,52352c50585,50586
< CREATE TRIGGER _csctoss_repl_logtrigger_2240
<     AFTER INSERT OR DELETE OR UPDATE ON carrier_api_activity_log
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1010
>     BEFORE INSERT OR DELETE OR UPDATE ON staff
52354c50588
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2240', 'kvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52358c50592
< -- Name: _csctoss_repl_logtrigger_2250; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1020; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52361,52362c50595,50596
< CREATE TRIGGER _csctoss_repl_logtrigger_2250
<     AFTER INSERT OR DELETE OR UPDATE ON groupname_default
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1020
>     BEFORE INSERT OR DELETE OR UPDATE ON staff_access
52364c50598
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2250', 'kvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52368c50602
< -- Name: _csctoss_repl_logtrigger_2260; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1030; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52371,52372c50605,50606
< CREATE TRIGGER _csctoss_repl_logtrigger_2260
<     AFTER INSERT OR DELETE OR UPDATE ON line_alert
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1030
>     BEFORE INSERT OR DELETE OR UPDATE ON change_log
52374c50608
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2260', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52378c50612
< -- Name: _csctoss_repl_logtrigger_2270; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1040; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52381,52382c50615,50616
< CREATE TRIGGER _csctoss_repl_logtrigger_2270
<     AFTER INSERT OR DELETE OR UPDATE ON line_alert_email
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1040
>     BEFORE INSERT OR DELETE OR UPDATE ON last_change_log
52384c50618
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2270', 'kk');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52388c50622
< -- Name: _csctoss_repl_logtrigger_2280; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1050; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52391,52392c50625,50626
< CREATE TRIGGER _csctoss_repl_logtrigger_2280
<     AFTER INSERT OR DELETE OR UPDATE ON line_usage_overage_calc
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1050
>     BEFORE INSERT OR DELETE OR UPDATE ON timezone
52394c50628
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2280', 'kvkvvvvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52398c50632
< -- Name: _csctoss_repl_logtrigger_2290; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1060; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52401,52402c50635,50636
< CREATE TRIGGER _csctoss_repl_logtrigger_2290
<     AFTER INSERT OR DELETE OR UPDATE ON product_overage_threshold
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1060
>     BEFORE INSERT OR DELETE OR UPDATE ON replication_failure
52404c50638
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2290', 'kvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52408c50642
< -- Name: _csctoss_repl_logtrigger_2300; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1070; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52411,52412c50645,50646
< CREATE TRIGGER _csctoss_repl_logtrigger_2300
<     AFTER INSERT OR DELETE OR UPDATE ON soup_config
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1070
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_info_type
52414c50648
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2300', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52418c50652
< -- Name: _csctoss_repl_logtrigger_2310; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1080; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52421,52422c50655,50656
< CREATE TRIGGER _csctoss_repl_logtrigger_2310
<     AFTER INSERT OR DELETE OR UPDATE ON soup_dirnames
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1080
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_model
52424c50658
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2310', 'kvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52428c50662
< -- Name: _csctoss_repl_logtrigger_2320; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1090; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52431,52432c50665,50666
< CREATE TRIGGER _csctoss_repl_logtrigger_2320
<     AFTER INSERT OR DELETE OR UPDATE ON sprint_assignment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1090
>     BEFORE INSERT OR DELETE OR UPDATE ON unique_identifier_type
52434c50668
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2320', 'kvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52438c50672
< -- Name: _csctoss_repl_logtrigger_2330; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1100; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52441,52442c50675,50676
< CREATE TRIGGER _csctoss_repl_logtrigger_2330
<     AFTER INSERT OR DELETE OR UPDATE ON line_usage_day_history
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1100
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_type
52444c50678
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2330', 'kvkvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52448c50682
< -- Name: _csctoss_repl_logtrigger_2340; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1110; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52451,52452c50685,50686
< CREATE TRIGGER _csctoss_repl_logtrigger_2340
<     AFTER INSERT OR DELETE OR UPDATE ON alert_priority
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1110
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_status_type
52454c50688
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2340', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52458c50692
< -- Name: _csctoss_repl_logtrigger_2350; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1120; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52461,52462c50695,50696
< CREATE TRIGGER _csctoss_repl_logtrigger_2350
<     AFTER INSERT OR DELETE OR UPDATE ON alert_usage_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1120
>     BEFORE INSERT OR DELETE OR UPDATE ON receiving_lot
52464c50698
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2350', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52468c50702
< -- Name: _csctoss_repl_logtrigger_2360; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1130; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52471,52472c50705,50706
< CREATE TRIGGER _csctoss_repl_logtrigger_2360
<     AFTER INSERT OR DELETE OR UPDATE ON alerts
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1130
>     BEFORE INSERT OR DELETE OR UPDATE ON software
52474c50708
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2360', 'kvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52478c50712
< -- Name: _csctoss_repl_logtrigger_2370; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1140; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52481,52482c50715,50716
< CREATE TRIGGER _csctoss_repl_logtrigger_2370
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_model_status
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1140
>     BEFORE INSERT OR DELETE OR UPDATE ON app_config
52484c50718
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2370', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52488c50722
< -- Name: _csctoss_repl_logtrigger_2380; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1150; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52491,52492c50725,50726
< CREATE TRIGGER _csctoss_repl_logtrigger_2380
<     AFTER INSERT OR DELETE OR UPDATE ON static_ip_pool
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1150
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment
52494c50728
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2380', 'kvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52498c50732
< -- Name: _csctoss_repl_logtrigger_2390; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1160; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52501,52502c50735,50736
< CREATE TRIGGER _csctoss_repl_logtrigger_2390
<     AFTER INSERT OR DELETE OR UPDATE ON sprint_msl
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1160
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_info
52504c50738
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2390', 'kkvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52508c50742
< -- Name: _csctoss_repl_logtrigger_2400; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1170; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52511,52512c50745,50746
< CREATE TRIGGER _csctoss_repl_logtrigger_2400
<     AFTER INSERT OR DELETE OR UPDATE ON sprint_csa
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1170
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_note
52514c50748
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2400', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52518c50752
< -- Name: _csctoss_repl_logtrigger_2410; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1180; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52521,52522c50755,50756
< CREATE TRIGGER _csctoss_repl_logtrigger_2410
<     AFTER INSERT OR DELETE OR UPDATE ON static_ip_carrier_def
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1180
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_software
52524c50758
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2410', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52528c50762
< -- Name: _csctoss_repl_logtrigger_2420; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1190; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52531,52532c50765,50766
< CREATE TRIGGER _csctoss_repl_logtrigger_2420
<     AFTER INSERT OR DELETE OR UPDATE ON unique_identifier_history
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1190
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_status
52534c50768
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2420', 'kvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52538c50772
< -- Name: _csctoss_repl_logtrigger_2430; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1200; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52541,52542c50775,50776
< CREATE TRIGGER _csctoss_repl_logtrigger_2430
<     AFTER INSERT OR DELETE OR UPDATE ON webui_users
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1200
>     BEFORE INSERT OR DELETE OR UPDATE ON unique_identifier
52544c50778
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2430', 'kvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52548c50782
< -- Name: _csctoss_repl_logtrigger_2470; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1210; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52551,52552c50785,50786
< CREATE TRIGGER _csctoss_repl_logtrigger_2470
<     AFTER INSERT OR DELETE OR UPDATE ON userlevels
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1210
>     BEFORE INSERT OR DELETE OR UPDATE ON address_type
52554c50788
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2470', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52558c50792
< -- Name: _csctoss_repl_logtrigger_2480; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1220; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52561,52562c50795,50796
< CREATE TRIGGER _csctoss_repl_logtrigger_2480
<     AFTER INSERT OR DELETE OR UPDATE ON location_labels
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1220
>     BEFORE INSERT OR DELETE OR UPDATE ON location_label_type
52564c50798
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2480', 'kvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52568c50802
< -- Name: _csctoss_repl_logtrigger_2490; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1230; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52571,52572c50805,50806
< CREATE TRIGGER _csctoss_repl_logtrigger_2490
<     AFTER INSERT OR DELETE OR UPDATE ON oss_jbill_billing_entity_mapping
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1230
>     BEFORE INSERT OR DELETE OR UPDATE ON plan_type
52574c50808
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2490', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52578c50812
< -- Name: _csctoss_repl_logtrigger_2500; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1240; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52581,52582c50815,50816
< CREATE TRIGGER _csctoss_repl_logtrigger_2500
<     AFTER INSERT OR DELETE OR UPDATE ON device_monitor
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1240
>     BEFORE INSERT OR DELETE OR UPDATE ON state_code
52584c50818
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2500', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52588c50822
< -- Name: _csctoss_repl_logtrigger_2510; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1250; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52591,52592c50825,50826
< CREATE TRIGGER _csctoss_repl_logtrigger_2510
<     AFTER INSERT OR DELETE OR UPDATE ON config
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1250
>     BEFORE INSERT OR DELETE OR UPDATE ON address
52594c50828
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2510', 'kvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52598c50832
< -- Name: _csctoss_repl_logtrigger_2520; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1260; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52601,52602c50835,50836
< CREATE TRIGGER _csctoss_repl_logtrigger_2520
<     AFTER INSERT OR DELETE OR UPDATE ON config_equipment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1260
>     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_type
52604c50838
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2520', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52608c50842
< -- Name: _csctoss_repl_logtrigger_2530; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1270; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52611,52612c50845,50846
< CREATE TRIGGER _csctoss_repl_logtrigger_2530
<     AFTER INSERT OR DELETE OR UPDATE ON firmware
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1270
>     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity
52614c50848
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2530', 'kvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52618c50852
< -- Name: _csctoss_repl_logtrigger_2540; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1280; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52621,52622c50855,50856
< CREATE TRIGGER _csctoss_repl_logtrigger_2540
<     AFTER INSERT OR DELETE OR UPDATE ON firmware_equipment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1280
>     BEFORE INSERT OR DELETE OR UPDATE ON contact_level
52624c50858
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2540', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52628c50862
< -- Name: _csctoss_repl_logtrigger_2550; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1290; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52631,52632c50865,50866
< CREATE TRIGGER _csctoss_repl_logtrigger_2550
<     AFTER INSERT OR DELETE OR UPDATE ON otaps_service_line_number
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1290
>     BEFORE INSERT OR DELETE OR UPDATE ON contact_type
52634c50868
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2550', 'kvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52638c50872
< -- Name: _csctoss_repl_logtrigger_2560; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1300; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52641,52642c50875,50876
< CREATE TRIGGER _csctoss_repl_logtrigger_2560
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_warranty
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1300
>     BEFORE INSERT OR DELETE OR UPDATE ON contact
52644c50878
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2560', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52648c50882
< -- Name: _csctoss_repl_logtrigger_2570; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1310; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52651,52652c50885,50886
< CREATE TRIGGER _csctoss_repl_logtrigger_2570
<     AFTER INSERT OR DELETE OR UPDATE ON soup_config_info
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1310
>     BEFORE INSERT OR DELETE OR UPDATE ON login_tracking
52654c50888
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2570', 'kvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52658c50892
< -- Name: _csctoss_repl_logtrigger_2580; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1320; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52661,52662c50895,50896
< CREATE TRIGGER _csctoss_repl_logtrigger_2580
<     AFTER INSERT OR DELETE OR UPDATE ON equipment_warranty_rule
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1320
>     BEFORE INSERT OR DELETE OR UPDATE ON security_roles
52664c50898
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2580', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52668c50902
< -- Name: _csctoss_repl_logtrigger_2590; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1330; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52671,52672c50905,50906
< CREATE TRIGGER _csctoss_repl_logtrigger_2590
<     AFTER INSERT OR DELETE OR UPDATE ON radius_operator
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1330
>     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_address
52674c50908
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2590', 'kv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52678c50912
< -- Name: _csctoss_repl_logtrigger_2600; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1340; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52681,52682c50915,50916
< CREATE TRIGGER _csctoss_repl_logtrigger_2600
<     AFTER INSERT OR DELETE OR UPDATE ON rma_form
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1340
>     BEFORE INSERT OR DELETE OR UPDATE ON contact_address
52684c50918
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2600', 'kvvvvvvvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52688c50922
< -- Name: _csctoss_repl_logtrigger_2610; Type: TRIGGER; Schema: csctoss; Owner: postgres
---
> -- Name: _csctoss_repl_denyaccess_1350; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52691,52692c50925,50926
< CREATE TRIGGER _csctoss_repl_logtrigger_2610
<     AFTER INSERT OR DELETE OR UPDATE ON agreement_table
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1350
>     BEFORE INSERT OR DELETE OR UPDATE ON product
52694c50928
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2610', 'kvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52698c50932
< -- Name: _csctoss_repl_logtrigger_5300; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1360; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52701,52702c50935,50936
< CREATE TRIGGER _csctoss_repl_logtrigger_5300
<     AFTER INSERT OR DELETE OR UPDATE ON otaps_monthly_usage_summary
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1360
>     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_product
52704c50938
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5300', 'kvvvvvvvvvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52708c50942
< -- Name: _csctoss_repl_logtrigger_5310; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1370; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52711,52712c50945,50946
< CREATE TRIGGER _csctoss_repl_logtrigger_5310
<     AFTER INSERT OR DELETE OR UPDATE ON otaps_product_code_translation
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1370
>     BEFORE INSERT OR DELETE OR UPDATE ON api_key
52714c50948
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5310', 'vkvkvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52718c50952
< -- Name: _csctoss_repl_logtrigger_7000; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1380; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52721,52722c50955,50956
< CREATE TRIGGER _csctoss_repl_logtrigger_7000
<     AFTER INSERT OR DELETE OR UPDATE ON master_radpostauth
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1380
>     BEFORE INSERT OR DELETE OR UPDATE ON api_request_log
52724c50958
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '7000', 'kvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52728c50962
< -- Name: _csctoss_repl_logtrigger_8000; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1390; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52731,52732c50965,50966
< CREATE TRIGGER _csctoss_repl_logtrigger_8000
<     AFTER INSERT OR DELETE OR UPDATE ON sprint_master_radacct
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1390
>     BEFORE INSERT OR DELETE OR UPDATE ON plan
52734c50968
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '8000', 'kvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52738c50972
< -- Name: address_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1400; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52741,52742c50975,50976
< CREATE TRIGGER address_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON address
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1400
>     BEFORE INSERT OR DELETE OR UPDATE ON report
52744c50978
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52748c50982
< -- Name: address_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1410; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52751,52752c50985,50986
< CREATE TRIGGER address_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON address_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1410
>     BEFORE INSERT OR DELETE OR UPDATE ON shipment
52754c50988
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52758c50992
< -- Name: alert_definition_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1420; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52761,52762c50995,50996
< CREATE TRIGGER alert_definition_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON alert_definition
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1420
>     BEFORE INSERT OR DELETE OR UPDATE ON shipment_equipment
52764c50998
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52768c51002
< -- Name: alert_definition_contact_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1430; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52771,52772c51005,51006
< CREATE TRIGGER alert_definition_contact_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON alert_definition_contact
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1430
>     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_location_label
52774c51008
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52778c51012
< -- Name: alert_definition_snmp_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1440; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52781,52782c51015,51016
< CREATE TRIGGER alert_definition_snmp_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON alert_definition_snmp
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1440
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_type
52784c51018
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52788c51022
< -- Name: alert_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1450; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52791,52792c51025,51026
< CREATE TRIGGER alert_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON alert_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1450
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_unit
52794c51028
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52798c51032
< -- Name: api_device_login_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1460; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52801,52802c51035,51036
< CREATE TRIGGER api_device_login_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON api_device_login
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1460
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_discount_type
52804c51038
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52808c51042
< -- Name: api_device_parser_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1470; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52811,52812c51045,51046
< CREATE TRIGGER api_device_parser_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON api_device_parser
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1470
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_charge_frequency
52814c51048
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52818c51052
< -- Name: api_key_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1480; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52821,52822c51055,51056
< CREATE TRIGGER api_key_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON api_key
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1480
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_calendar
52824c51058
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52828c51062
< -- Name: api_parser_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1490; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52831,52832c51065,51066
< CREATE TRIGGER api_parser_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON api_parser
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1490
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_period
52834c51068
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52838c51072
< -- Name: api_supported_device_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1500; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52841,52842c51075,51076
< CREATE TRIGGER api_supported_device_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON api_supported_device
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1500
>     BEFORE INSERT OR DELETE OR UPDATE ON currency
52844c51078
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52848c51082
< -- Name: app_config_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1510; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52851,52852c51085,51086
< CREATE TRIGGER app_config_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON app_config
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1510
>     BEFORE INSERT OR DELETE OR UPDATE ON carrier
52854c51088
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52858c51092
< -- Name: atm_processor_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1520; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52861,52862c51095,51096
< CREATE TRIGGER atm_processor_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON atm_processor
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1520
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_master_billing_plan
52864c51098
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52868c51102
< -- Name: attribute_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1530; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52871,52872c51105,51106
< CREATE TRIGGER attribute_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON attribute
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1530
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_entity_preferences
52874c51108
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52878c51112
< -- Name: attribute_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1540; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52881,52882c51115,51116
< CREATE TRIGGER attribute_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON attribute_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1540
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge
52884c51118
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52888c51122
< -- Name: billing_entity_address_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1550; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52891,52892c51125,51126
< CREATE TRIGGER billing_entity_address_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_address
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1550
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_static
52894c51128
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52898c51132
< -- Name: billing_entity_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1560; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52901,52902c51135,51136
< CREATE TRIGGER billing_entity_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1560
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_onetime
52904c51138
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52908c51142
< -- Name: billing_entity_download_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1570; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52911,52912c51145,51146
< CREATE TRIGGER billing_entity_download_changelog
<     BEFORE INSERT OR UPDATE ON billing_entity_download
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1570
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_usage
52914c51148
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52918c51152
< -- Name: billing_entity_location_label_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1580; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52921,52922c51155,51156
< CREATE TRIGGER billing_entity_location_label_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_location_label
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1580
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_usage_allotment
52924c51158
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52928c51162
< -- Name: billing_entity_product_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1590; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52931,52932c51165,51166
< CREATE TRIGGER billing_entity_product_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_product
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1590
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_allotment_adjustment_history
52934c51168
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52938c51172
< -- Name: billing_entity_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1600; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52941,52942c51175,51176
< CREATE TRIGGER billing_entity_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1600
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_aggregate_usage_plan
52944c51178
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52948c51182
< -- Name: bp_aggregate_usage_plan_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1610; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52951,52952c51185,51186
< CREATE TRIGGER bp_aggregate_usage_plan_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_aggregate_usage_plan
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1610
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_discount
52954c51188
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52958c51192
< -- Name: bp_allotment_adjustment_history_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1620; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52961,52962c51195,51196
< CREATE TRIGGER bp_allotment_adjustment_history_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_allotment_adjustment_history
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1620
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_past_due_charge
52964c51198
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52968c51202
< -- Name: bp_billing_calendar_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1630; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52971,52972c51205,51206
< CREATE TRIGGER bp_billing_calendar_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_calendar
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1630
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_equipment_assignment
52974c51208
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52978c51212
< -- Name: bp_billing_charge_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1640; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52981,52982c51215,51216
< CREATE TRIGGER bp_billing_charge_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1640
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_billing_summary
52984c51218
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52988c51222
< -- Name: bp_billing_charge_discount_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1650; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
52991,52992c51225,51226
< CREATE TRIGGER bp_billing_charge_discount_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_discount
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1650
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_charge_summary
52994c51228
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
52998c51232
< -- Name: bp_billing_charge_onetime_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1660; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53001,53002c51235,51236
< CREATE TRIGGER bp_billing_charge_onetime_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_onetime
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1660
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_change_summary
53004c51238
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53008c51242
< -- Name: bp_billing_charge_pre_update_delete_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1670; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53011,53012c51245,51246
< CREATE TRIGGER bp_billing_charge_pre_update_delete_trig
<     BEFORE DELETE OR UPDATE ON bp_billing_charge
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1670
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_usage_summary
53014c51248
<     EXECUTE PROCEDURE bp_billing_charge_pre_update_delete();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53018c51252
< -- Name: bp_billing_charge_static_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1680; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53021,53022c51255,51256
< CREATE TRIGGER bp_billing_charge_static_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_static
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1680
>     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_status_summary
53024c51258
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53028c51262
< -- Name: bp_billing_charge_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1690; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53031,53032c51265,51266
< CREATE TRIGGER bp_billing_charge_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1690
>     BEFORE INSERT OR DELETE OR UPDATE ON portal_properties
53034c51268
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53038c51272
< -- Name: bp_billing_charge_unit_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1700; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53041,53042c51275,51276
< CREATE TRIGGER bp_billing_charge_unit_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_unit
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1700
>     BEFORE INSERT OR DELETE OR UPDATE ON download_file_type
53044c51278
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53048c51282
< -- Name: bp_billing_charge_usage_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1710; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53051,53052c51285,51286
< CREATE TRIGGER bp_billing_charge_usage_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_charge_usage
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1710
>     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity_download
53054c51288
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53058c51292
< -- Name: bp_billing_charge_usage_pre_insert_update_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1720; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53061,53062c51295,51296
< CREATE TRIGGER bp_billing_charge_usage_pre_insert_update_trig
<     BEFORE INSERT OR UPDATE ON bp_billing_charge_usage
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1720
>     BEFORE INSERT OR DELETE OR UPDATE ON broadcast_message_level
53064c51298
<     EXECUTE PROCEDURE bp_billing_charge_usage_pre_insert_update();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53068c51302
< -- Name: bp_billing_discount_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1730; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53071,53072c51305,51306
< CREATE TRIGGER bp_billing_discount_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_discount_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1730
>     BEFORE INSERT OR DELETE OR UPDATE ON broadcast_message_type
53074c51308
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53078c51312
< -- Name: bp_billing_entity_preferences_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1740; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53081,53082c51315,51316
< CREATE TRIGGER bp_billing_entity_preferences_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_entity_preferences
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1740
>     BEFORE INSERT OR DELETE OR UPDATE ON broadcast_message
53084c51318
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53088c51322
< -- Name: bp_billing_equipment_assignment_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1750; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53091,53092c51325,51326
< CREATE TRIGGER bp_billing_equipment_assignment_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_equipment_assignment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1750
>     BEFORE INSERT OR DELETE OR UPDATE ON attribute_type
53094c51328
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53098c51332
< -- Name: bp_billing_equipment_assignment_pre_insert_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1760; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53101,53102c51335,51336
< CREATE TRIGGER bp_billing_equipment_assignment_pre_insert_trig
<     BEFORE INSERT ON bp_billing_equipment_assignment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1760
>     BEFORE INSERT OR DELETE OR UPDATE ON attribute
53104c51338
<     EXECUTE PROCEDURE bp_billing_equipment_assignment_pre_insert();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53108c51342
< -- Name: bp_billing_equipment_assignment_pre_update_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1780; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53111,53112c51345,51346
< CREATE TRIGGER bp_billing_equipment_assignment_pre_update_trig
<     BEFORE UPDATE ON bp_billing_equipment_assignment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1780
>     BEFORE INSERT OR DELETE OR UPDATE ON username
53114c51348
<     EXECUTE PROCEDURE bp_billing_equipment_assignment_pre_update();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53118c51352
< -- Name: bp_billing_period_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1790; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53121,53122c51355,51356
< CREATE TRIGGER bp_billing_period_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_billing_period
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1790
>     BEFORE INSERT OR DELETE OR UPDATE ON groupname
53124c51358
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53128c51362
< -- Name: bp_billing_period_pre_insert_update_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1800; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53131,53132c51365,51366
< CREATE TRIGGER bp_billing_period_pre_insert_update_trig
<     BEFORE INSERT OR UPDATE ON bp_billing_period
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1800
>     BEFORE INSERT OR DELETE OR UPDATE ON usergroup
53134c51368
<     EXECUTE PROCEDURE bp_billing_period_pre_insert_update();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53138c51372
< -- Name: bp_charge_frequency_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1810; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53141,53142c51375,51376
< CREATE TRIGGER bp_charge_frequency_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_charge_frequency
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1810
>     BEFORE INSERT OR DELETE OR UPDATE ON nas
53144c51378
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53148c51382
< -- Name: bp_master_billing_plan_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1820; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53151,53152c51385,51386
< CREATE TRIGGER bp_master_billing_plan_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_master_billing_plan
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1820
>     BEFORE INSERT OR DELETE OR UPDATE ON radcheck
53154c51388
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53158c51392
< -- Name: bp_past_due_charge_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1830; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53161,53162c51395,51396
< CREATE TRIGGER bp_past_due_charge_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_past_due_charge
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1830
>     BEFORE INSERT OR DELETE OR UPDATE ON radgroupcheck
53164c51398
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53168c51402
< -- Name: bp_period_billing_summary_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1840; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53171,53172c51405,51406
< CREATE TRIGGER bp_period_billing_summary_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_billing_summary
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1840
>     BEFORE INSERT OR DELETE OR UPDATE ON radgroupreply
53174c51408
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53178c51412
< -- Name: bp_period_change_summary_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1850; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53181,53182c51415,51416
< CREATE TRIGGER bp_period_change_summary_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_change_summary
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1850
>     BEFORE INSERT OR DELETE OR UPDATE ON radreply
53184c51418
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53188c51422
< -- Name: bp_period_charge_summary_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1860; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53191,53192c51425,51426
< CREATE TRIGGER bp_period_charge_summary_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_charge_summary
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1860
>     BEFORE INSERT OR DELETE OR UPDATE ON alert_type
53194c51428
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53198c51432
< -- Name: bp_period_status_summary_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1870; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53201,53202c51435,51436
< CREATE TRIGGER bp_period_status_summary_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_status_summary
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1870
>     BEFORE INSERT OR DELETE OR UPDATE ON alert_definition
53204c51438
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53208c51442
< -- Name: bp_period_usage_summary_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1880; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53211,53212c51445,51446
< CREATE TRIGGER bp_period_usage_summary_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_period_usage_summary
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1880
>     BEFORE INSERT OR DELETE OR UPDATE ON alert_definition_contact
53214c51448
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53218c51452
< -- Name: bp_usage_allotment_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1890; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53221,53222c51455,51456
< CREATE TRIGGER bp_usage_allotment_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON bp_usage_allotment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1890
>     BEFORE INSERT OR DELETE OR UPDATE ON alert_definition_snmp
53224c51458
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53228c51462
< -- Name: branding_button_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1900; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53231,53232c51465,51466
< CREATE TRIGGER branding_button_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON branding_button
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1900
>     BEFORE INSERT OR DELETE OR UPDATE ON alert_activity
53234c51468
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53238c51472
< -- Name: branding_content_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1910; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53241,53242c51475,51476
< CREATE TRIGGER branding_content_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON branding_content
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1910
>     BEFORE INSERT OR DELETE OR UPDATE ON atm_processor
53244c51478
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53248c51482
< -- Name: branding_presentation_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1920; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53251,53252c51485,51486
< CREATE TRIGGER branding_presentation_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON branding_presentation
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1920
>     BEFORE INSERT OR DELETE OR UPDATE ON line_assignment_type
53254c51488
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53258c51492
< -- Name: broadcast_message_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1930; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53261,53262c51495,51496
< CREATE TRIGGER broadcast_message_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON broadcast_message
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1930
>     BEFORE INSERT OR DELETE OR UPDATE ON line
53264c51498
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53268c51502
< -- Name: broadcast_message_level_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1940; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53271,53272c51505,51506
< CREATE TRIGGER broadcast_message_level_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON broadcast_message_level
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1940
>     BEFORE INSERT OR DELETE OR UPDATE ON line_equipment
53274c51508
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53278c51512
< -- Name: broadcast_message_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1950; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53281,53282c51515,51516
< CREATE TRIGGER broadcast_message_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON broadcast_message_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1950
>     BEFORE INSERT OR DELETE OR UPDATE ON line_terminal
53284c51518
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53288c51522
< -- Name: carrier_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1960; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53291,53292c51525,51526
< CREATE TRIGGER carrier_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON carrier
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1960
>     BEFORE INSERT OR DELETE OR UPDATE ON mrad_duplicate
53294c51528
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53298c51532
< -- Name: carrier_domain_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1970; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53301,53302c51535,51536
< CREATE TRIGGER carrier_domain_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON carrier_domain
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1970
>     BEFORE INSERT OR DELETE OR UPDATE ON line_usage_day
53304c51538
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53308c51542
< -- Name: cc_auth_log_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1980; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53311,53312c51545,51546
< CREATE TRIGGER cc_auth_log_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON cc_auth_log
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1980
>     BEFORE INSERT OR DELETE OR UPDATE ON line_usage_month
53314c51548
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53318c51552
< -- Name: cc_encrypt_key_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_1990; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53321,53322c51555,51556
< CREATE TRIGGER cc_encrypt_key_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON cc_encrypt_key
---
> CREATE TRIGGER _csctoss_repl_denyaccess_1990
>     BEFORE INSERT OR DELETE OR UPDATE ON sales_order
53324c51558
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53328c51562
< -- Name: contact_address_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2000; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53331,53332c51565,51566
< CREATE TRIGGER contact_address_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON contact_address
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2000
>     BEFORE INSERT OR DELETE OR UPDATE ON cc_auth_log
53334c51568
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53338c51572
< -- Name: contact_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2010; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53341,53342c51575,51576
< CREATE TRIGGER contact_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON contact
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2010
>     BEFORE INSERT OR DELETE OR UPDATE ON cc_encrypt_key
53344c51578
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53348c51582
< -- Name: contact_level_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2020; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53351,53352c51585,51586
< CREATE TRIGGER contact_level_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON contact_level
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2020
>     BEFORE INSERT OR DELETE OR UPDATE ON plan_log
53354c51588
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53358c51592
< -- Name: contact_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2040; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53361,53362c51595,51596
< CREATE TRIGGER contact_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON contact_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2040
>     BEFORE INSERT OR DELETE OR UPDATE ON parser_log
53364c51598
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53368c51602
< -- Name: currency_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2050; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53371,53372c51605,51606
< CREATE TRIGGER currency_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON currency
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2050
>     BEFORE INSERT OR DELETE OR UPDATE ON carrier_domain
53374c51608
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53378c51612
< -- Name: download_file_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2060; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53381,53382c51615,51616
< CREATE TRIGGER download_file_type_changelog
<     BEFORE INSERT OR UPDATE ON download_file_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2060
>     BEFORE INSERT OR DELETE OR UPDATE ON branding_button
53384c51618
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53388c51622
< -- Name: emod_credential_pre_insert_update_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2070; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53391,53392c51625,51626
< CREATE TRIGGER emod_credential_pre_insert_update_trig
<     BEFORE INSERT OR UPDATE ON equipment_model_credential
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2070
>     BEFORE INSERT OR DELETE OR UPDATE ON branding_content
53394c51628
<     EXECUTE PROCEDURE emod_credential_pre_insert_update();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53398c51632
< -- Name: equipment_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2080; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53401,53402c51635,51636
< CREATE TRIGGER equipment_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2080
>     BEFORE INSERT OR DELETE OR UPDATE ON branding_presentation
53404c51638
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53408c51642
< -- Name: equipment_credential_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2090; Type: TRIGGER; Schema: csctoss; Owner: slony
53411,53412c51645,51646
< CREATE TRIGGER equipment_credential_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_credential
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2090
>     BEFORE INSERT OR DELETE OR UPDATE ON soup_device
53414c51648
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53418c51652
< -- Name: equipment_credential_pre_insert_update_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2110; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53421,53422c51655,51656
< CREATE TRIGGER equipment_credential_pre_insert_update_trig
<     BEFORE INSERT OR UPDATE ON equipment_credential
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2110
>     BEFORE INSERT OR DELETE OR UPDATE ON throw_away_minutes
53424c51658
<     EXECUTE PROCEDURE equipment_credential_pre_insert_update();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53428c51662
< -- Name: equipment_firmware_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2120; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53431,53432c51665,51666
< CREATE TRIGGER equipment_firmware_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_firmware
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2120
>     BEFORE INSERT OR DELETE OR UPDATE ON usergroup_error_log
53434c51668
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53438c51672
< -- Name: equipment_info_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2130; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53441,53442c51675,51676
< CREATE TRIGGER equipment_info_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_info
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2130
>     BEFORE INSERT OR DELETE OR UPDATE ON purchase_log
53444c51678
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53448c51682
< -- Name: equipment_info_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2140; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53451,53452c51685,51686
< CREATE TRIGGER equipment_info_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_info_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2140
>     BEFORE INSERT OR DELETE OR UPDATE ON api_device_login
53454c51688
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53458c51692
< -- Name: equipment_model_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2150; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53461,53462c51695,51696
< CREATE TRIGGER equipment_model_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_model
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2150
>     BEFORE INSERT OR DELETE OR UPDATE ON api_device_parser
53464c51698
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53468c51702
< -- Name: equipment_model_credential_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2160; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53471,53472c51705,51706
< CREATE TRIGGER equipment_model_credential_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_model_credential
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2160
>     BEFORE INSERT OR DELETE OR UPDATE ON api_parser
53474c51708
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53478c51712
< -- Name: equipment_note_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2170; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53481,53482c51715,51716
< CREATE TRIGGER equipment_note_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_note
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2170
>     BEFORE INSERT OR DELETE OR UPDATE ON api_supported_device
53484c51718
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53488c51722
< -- Name: equipment_software_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2180; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53491,53492c51725,51726
< CREATE TRIGGER equipment_software_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_software
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2180
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_credential
53494c51728
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53498c51732
< -- Name: equipment_status_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2190; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53501,53502c51735,51736
< CREATE TRIGGER equipment_status_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_status
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2190
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_firmware
53504c51738
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53508c51742
< -- Name: equipment_status_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2200; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53511,53512c51745,51746
< CREATE TRIGGER equipment_status_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_status_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2200
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_model_credential
53514c51748
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53518c51752
< -- Name: equipment_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2230; Type: TRIGGER; Schema: csctoss; Owner: postgres
53521,53522c51755,51756
< CREATE TRIGGER equipment_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2230
>     BEFORE INSERT OR DELETE OR UPDATE ON lns_lookup
53524c51758
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53528c51762
< -- Name: equipment_warranty_rule_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2240; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53531,53532c51765,51766
< CREATE TRIGGER equipment_warranty_rule_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON equipment_warranty_rule
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2240
>     BEFORE INSERT OR DELETE OR UPDATE ON carrier_api_activity_log
53534c51768
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53538c51772
< -- Name: groupname_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2250; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53541,53542c51775,51776
< CREATE TRIGGER groupname_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON groupname
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2250
>     BEFORE INSERT OR DELETE OR UPDATE ON groupname_default
53544c51778
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53548c51782
< -- Name: line_assignment_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2260; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53551,53552c51785,51786
< CREATE TRIGGER line_assignment_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON line_assignment_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2260
>     BEFORE INSERT OR DELETE OR UPDATE ON line_alert
53554c51788
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53558c51792
< -- Name: line_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2270; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53561,53562c51795,51796
< CREATE TRIGGER line_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON line
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2270
>     BEFORE INSERT OR DELETE OR UPDATE ON line_alert_email
53564c51798
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53568c51802
< -- Name: line_equipment_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2280; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53571,53572c51805,51806
< CREATE TRIGGER line_equipment_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON line_equipment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2280
>     BEFORE INSERT OR DELETE OR UPDATE ON line_usage_overage_calc
53574c51808
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53578c51812
< -- Name: line_equipment_pre_insert_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2290; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53581,53582c51815,51816
< CREATE TRIGGER line_equipment_pre_insert_trig
<     BEFORE INSERT ON line_equipment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2290
>     BEFORE INSERT OR DELETE OR UPDATE ON product_overage_threshold
53584c51818
<     EXECUTE PROCEDURE line_equipment_pre_insert();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53588c51822
< -- Name: line_equipment_pre_update_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2300; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53591,53592c51825,51826
< CREATE TRIGGER line_equipment_pre_update_trig
<     BEFORE UPDATE ON line_equipment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2300
>     BEFORE INSERT OR DELETE OR UPDATE ON soup_config
53594c51828
<     EXECUTE PROCEDURE line_equipment_pre_update();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53598c51832
< -- Name: line_pre_delete_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2310; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53601,53602c51835,51836
< CREATE TRIGGER line_pre_delete_trig
<     BEFORE DELETE ON line
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2310
>     BEFORE INSERT OR DELETE OR UPDATE ON soup_dirnames
53604c51838
<     EXECUTE PROCEDURE line_pre_delete();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53608c51842
< -- Name: line_pre_insert_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2320; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53611,53612c51845,51846
< CREATE TRIGGER line_pre_insert_trig
<     BEFORE INSERT ON line
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2320
>     BEFORE INSERT OR DELETE OR UPDATE ON sprint_assignment
53614c51848
<     EXECUTE PROCEDURE line_pre_insert();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53618c51852
< -- Name: line_terminal_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2330; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53621,53622c51855,51856
< CREATE TRIGGER line_terminal_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON line_terminal
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2330
>     BEFORE INSERT OR DELETE OR UPDATE ON line_usage_day_history
53624c51858
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53628c51862
< -- Name: lns_lookup_changelog; Type: TRIGGER; Schema: csctoss; Owner: postgres
---
> -- Name: _csctoss_repl_denyaccess_2340; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53631,53632c51865,51866
< CREATE TRIGGER lns_lookup_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON lns_lookup
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2340
>     BEFORE INSERT OR DELETE OR UPDATE ON alert_priority
53634c51868
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53638c51872
< -- Name: location_label_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2350; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53641,53642c51875,51876
< CREATE TRIGGER location_label_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON location_label_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2350
>     BEFORE INSERT OR DELETE OR UPDATE ON alert_usage_type
53644c51878
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53648c51882
< -- Name: nas_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2360; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53651,53652c51885,51886
< CREATE TRIGGER nas_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON nas
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2360
>     BEFORE INSERT OR DELETE OR UPDATE ON alerts
53654c51888
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53658c51892
< -- Name: plan_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2370; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53661,53662c51895,51896
< CREATE TRIGGER plan_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON plan
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2370
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_model_status
53664c51898
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53668c51902
< -- Name: plan_log_pre_update; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2380; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53671,53672c51905,51906
< CREATE TRIGGER plan_log_pre_update
<     BEFORE UPDATE ON plan
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2380
>     BEFORE INSERT OR DELETE OR UPDATE ON static_ip_pool
53674c51908
<     EXECUTE PROCEDURE plan_log_pre_update();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53678c51912
< -- Name: plan_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2390; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53681,53682c51915,51916
< CREATE TRIGGER plan_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON plan_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2390
>     BEFORE INSERT OR DELETE OR UPDATE ON sprint_msl
53684c51918
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53688c51922
< -- Name: portal_properties_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2400; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53691,53692c51925,51926
< CREATE TRIGGER portal_properties_changelog
<     BEFORE INSERT OR UPDATE ON portal_properties
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2400
>     BEFORE INSERT OR DELETE OR UPDATE ON sprint_csa
53694c51928
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53698c51932
< -- Name: product_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2410; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53701,53702c51935,51936
< CREATE TRIGGER product_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON product
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2410
>     BEFORE INSERT OR DELETE OR UPDATE ON static_ip_carrier_def
53704c51938
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53708c51942
< -- Name: radcheck_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2420; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53711,53712c51945,51946
< CREATE TRIGGER radcheck_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON radcheck
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2420
>     BEFORE INSERT OR DELETE OR UPDATE ON unique_identifier_history
53714c51948
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53718c51952
< -- Name: radgroupcheck_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2430; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53721,53722c51955,51956
< CREATE TRIGGER radgroupcheck_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON radgroupcheck
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2430
>     BEFORE INSERT OR DELETE OR UPDATE ON webui_users
53724c51958
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53728c51962
< -- Name: radgroupreply_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2470; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53731,53732c51965,51966
< CREATE TRIGGER radgroupreply_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON radgroupreply
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2470
>     BEFORE INSERT OR DELETE OR UPDATE ON userlevels
53734c51968
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53738c51972
< -- Name: radreply_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2480; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53741,53742c51975,51976
< CREATE TRIGGER radreply_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON radreply
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2480
>     BEFORE INSERT OR DELETE OR UPDATE ON location_labels
53744c51978
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53748c51982
< -- Name: radreply_pre_insert_update_trig; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2490; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53751,53752c51985,51986
< CREATE TRIGGER radreply_pre_insert_update_trig
<     BEFORE INSERT OR UPDATE ON radreply
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2490
>     BEFORE INSERT OR DELETE OR UPDATE ON oss_jbill_billing_entity_mapping
53754c51988
<     EXECUTE PROCEDURE radreply_pre_insert_update();
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53758c51992
< -- Name: receiving_lot_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2500; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53761,53762c51995,51996
< CREATE TRIGGER receiving_lot_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON receiving_lot
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2500
>     BEFORE INSERT OR DELETE OR UPDATE ON device_monitor
53764c51998
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53768c52002
< -- Name: report_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2510; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53771,53772c52005,52006
< CREATE TRIGGER report_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON report
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2510
>     BEFORE INSERT OR DELETE OR UPDATE ON config
53774c52008
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53778c52012
< -- Name: sales_order_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2520; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53781,53782c52015,52016
< CREATE TRIGGER sales_order_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON sales_order
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2520
>     BEFORE INSERT OR DELETE OR UPDATE ON config_equipment
53784c52018
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53788c52022
< -- Name: security_roles_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2530; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53791,53792c52025,52026
< CREATE TRIGGER security_roles_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON security_roles
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2530
>     BEFORE INSERT OR DELETE OR UPDATE ON firmware
53794c52028
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53798c52032
< -- Name: shipment_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2540; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53801,53802c52035,52036
< CREATE TRIGGER shipment_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON shipment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2540
>     BEFORE INSERT OR DELETE OR UPDATE ON firmware_equipment
53804c52038
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53808c52042
< -- Name: shipment_equipment_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2550; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53811,53812c52045,52046
< CREATE TRIGGER shipment_equipment_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON shipment_equipment
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2550
>     BEFORE INSERT OR DELETE OR UPDATE ON otaps_service_line_number
53814c52048
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53818c52052
< -- Name: software_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2560; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53821,53822c52055,52056
< CREATE TRIGGER software_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON software
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2560
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_warranty
53824c52058
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53828c52062
< -- Name: staff_access_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2570; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53831,53832c52065,52066
< CREATE TRIGGER staff_access_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON staff_access
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2570
>     BEFORE INSERT OR DELETE OR UPDATE ON soup_config_info
53834c52068
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53838c52072
< -- Name: staff_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2580; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53841,53842c52075,52076
< CREATE TRIGGER staff_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON staff
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2580
>     BEFORE INSERT OR DELETE OR UPDATE ON equipment_warranty_rule
53844c52078
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53848c52082
< -- Name: state_code_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2590; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53851,53852c52085,52086
< CREATE TRIGGER state_code_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON state_code
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2590
>     BEFORE INSERT OR DELETE OR UPDATE ON radius_operator
53854c52088
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53858c52092
< -- Name: system_parameter_changelog; Type: TRIGGER; Schema: csctoss; Owner: slony
---
> -- Name: _csctoss_repl_denyaccess_2600; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53861,53862c52095,52096
< CREATE TRIGGER system_parameter_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON system_parameter
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2600
>     BEFORE INSERT OR DELETE OR UPDATE ON rma_form
53864c52098
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53868c52102
< -- Name: timezone_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_2610; Type: TRIGGER; Schema: csctoss; Owner: postgres
53871,53872c52105,52106
< CREATE TRIGGER timezone_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON timezone
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2610
>     BEFORE INSERT OR DELETE OR UPDATE ON agreement_table
53874c52108
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53878c52112
< -- Name: unique_identifier_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_5300; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53881,53882c52115,52116
< CREATE TRIGGER unique_identifier_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON unique_identifier
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5300
>     BEFORE INSERT OR DELETE OR UPDATE ON otaps_monthly_usage_summary
53884c52118
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53888c52122
< -- Name: unique_identifier_type_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_5310; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53891,53892c52125,52126
< CREATE TRIGGER unique_identifier_type_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON unique_identifier_type
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5310
>     BEFORE INSERT OR DELETE OR UPDATE ON otaps_product_code_translation
53894c52128
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53898c52132
< -- Name: usergroup_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_7000; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53901,53902c52135,52136
< CREATE TRIGGER usergroup_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON usergroup
---
> CREATE TRIGGER _csctoss_repl_denyaccess_7000
>     BEFORE INSERT OR DELETE OR UPDATE ON master_radpostauth
53904c52138
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53908c52142
< -- Name: username_changelog; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
---
> -- Name: _csctoss_repl_denyaccess_8000; Type: TRIGGER; Schema: csctoss; Owner: csctoss_owner
53911,53912c52145,52146
< CREATE TRIGGER username_changelog
<     BEFORE INSERT OR DELETE OR UPDATE ON username
---
> CREATE TRIGGER _csctoss_repl_denyaccess_8000
>     BEFORE INSERT OR DELETE OR UPDATE ON sprint_master_radacct
53914c52148
<     EXECUTE PROCEDURE public.change_log('change_log', ',');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53920c52154
< -- Name: _csctoss_repl_logtrigger_2440; Type: TRIGGER; Schema: invoice; Owner: invoice_owner
---
> -- Name: _csctoss_repl_denyaccess_2440; Type: TRIGGER; Schema: invoice; Owner: invoice_owner
53923,53924c52157,52158
< CREATE TRIGGER _csctoss_repl_logtrigger_2440
<     AFTER INSERT OR DELETE OR UPDATE ON app_config
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2440
>     BEFORE INSERT OR DELETE OR UPDATE ON app_config
53926c52160
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2440', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53930c52164
< -- Name: _csctoss_repl_logtrigger_2450; Type: TRIGGER; Schema: invoice; Owner: invoice_owner
---
> -- Name: _csctoss_repl_denyaccess_2450; Type: TRIGGER; Schema: invoice; Owner: invoice_owner
53933,53934c52167,52168
< CREATE TRIGGER _csctoss_repl_logtrigger_2450
<     AFTER INSERT OR DELETE OR UPDATE ON billing_entity
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2450
>     BEFORE INSERT OR DELETE OR UPDATE ON billing_entity
53936c52170
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2450', 'kvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53940c52174
< -- Name: _csctoss_repl_logtrigger_2460; Type: TRIGGER; Schema: invoice; Owner: invoice_owner
---
> -- Name: _csctoss_repl_denyaccess_2460; Type: TRIGGER; Schema: invoice; Owner: invoice_owner
53943,53944c52177,52178
< CREATE TRIGGER _csctoss_repl_logtrigger_2460
<     AFTER INSERT OR DELETE OR UPDATE ON file_system
---
> CREATE TRIGGER _csctoss_repl_denyaccess_2460
>     BEFORE INSERT OR DELETE OR UPDATE ON file_system
53946c52180
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '2460', 'kvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53952c52186
< -- Name: _csctoss_repl_logtrigger_5000; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5000; Type: TRIGGER; Schema: rt3; Owner: rt_user
53955,53956c52189,52190
< CREATE TRIGGER _csctoss_repl_logtrigger_5000
<     AFTER INSERT OR DELETE OR UPDATE ON acl
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5000
>     BEFORE INSERT OR DELETE OR UPDATE ON acl
53958c52192
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5000', 'kvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53962c52196
< -- Name: _csctoss_repl_logtrigger_5010; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5010; Type: TRIGGER; Schema: rt3; Owner: rt_user
53965,53966c52199,52200
< CREATE TRIGGER _csctoss_repl_logtrigger_5010
<     AFTER INSERT OR DELETE OR UPDATE ON attachments
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5010
>     BEFORE INSERT OR DELETE OR UPDATE ON attachments
53968c52202
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5010', 'kvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53972c52206
< -- Name: _csctoss_repl_logtrigger_5020; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5020; Type: TRIGGER; Schema: rt3; Owner: rt_user
53975,53976c52209,52210
< CREATE TRIGGER _csctoss_repl_logtrigger_5020
<     AFTER INSERT OR DELETE OR UPDATE ON attributes
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5020
>     BEFORE INSERT OR DELETE OR UPDATE ON attributes
53978c52212
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5020', 'kvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53982c52216
< -- Name: _csctoss_repl_logtrigger_5030; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5030; Type: TRIGGER; Schema: rt3; Owner: rt_user
53985,53986c52219,52220
< CREATE TRIGGER _csctoss_repl_logtrigger_5030
<     AFTER INSERT OR DELETE OR UPDATE ON cachedgroupmembers
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5030
>     BEFORE INSERT OR DELETE OR UPDATE ON cachedgroupmembers
53988c52222
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5030', 'kvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
53992c52226
< -- Name: _csctoss_repl_logtrigger_5040; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5040; Type: TRIGGER; Schema: rt3; Owner: rt_user
53995,53996c52229,52230
< CREATE TRIGGER _csctoss_repl_logtrigger_5040
<     AFTER INSERT OR DELETE OR UPDATE ON customfields
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5040
>     BEFORE INSERT OR DELETE OR UPDATE ON customfields
53998c52232
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5040', 'kvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54002c52236
< -- Name: _csctoss_repl_logtrigger_5050; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5050; Type: TRIGGER; Schema: rt3; Owner: rt_user
54005,54006c52239,52240
< CREATE TRIGGER _csctoss_repl_logtrigger_5050
<     AFTER INSERT OR DELETE OR UPDATE ON customfieldvalues
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5050
>     BEFORE INSERT OR DELETE OR UPDATE ON customfieldvalues
54008c52242
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5050', 'kvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54012c52246
< -- Name: _csctoss_repl_logtrigger_5060; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5060; Type: TRIGGER; Schema: rt3; Owner: rt_user
54015,54016c52249,52250
< CREATE TRIGGER _csctoss_repl_logtrigger_5060
<     AFTER INSERT OR DELETE OR UPDATE ON groupmembers
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5060
>     BEFORE INSERT OR DELETE OR UPDATE ON groupmembers
54018c52252
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5060', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54022c52256
< -- Name: _csctoss_repl_logtrigger_5070; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5070; Type: TRIGGER; Schema: rt3; Owner: rt_user
54025,54026c52259,52260
< CREATE TRIGGER _csctoss_repl_logtrigger_5070
<     AFTER INSERT OR DELETE OR UPDATE ON groups
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5070
>     BEFORE INSERT OR DELETE OR UPDATE ON groups
54028c52262
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5070', 'kvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54032c52266
< -- Name: _csctoss_repl_logtrigger_5080; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5080; Type: TRIGGER; Schema: rt3; Owner: rt_user
54035,54036c52269,52270
< CREATE TRIGGER _csctoss_repl_logtrigger_5080
<     AFTER INSERT OR DELETE OR UPDATE ON links
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5080
>     BEFORE INSERT OR DELETE OR UPDATE ON links
54038c52272
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5080', 'kvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54042c52276
< -- Name: _csctoss_repl_logtrigger_5090; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5090; Type: TRIGGER; Schema: rt3; Owner: rt_user
54045,54046c52279,52280
< CREATE TRIGGER _csctoss_repl_logtrigger_5090
<     AFTER INSERT OR DELETE OR UPDATE ON objectcustomfields
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5090
>     BEFORE INSERT OR DELETE OR UPDATE ON objectcustomfields
54048c52282
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5090', 'kvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54052c52286
< -- Name: _csctoss_repl_logtrigger_5100; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5100; Type: TRIGGER; Schema: rt3; Owner: rt_user
54055,54056c52289,52290
< CREATE TRIGGER _csctoss_repl_logtrigger_5100
<     AFTER INSERT OR DELETE OR UPDATE ON objectcustomfieldvalues
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5100
>     BEFORE INSERT OR DELETE OR UPDATE ON objectcustomfieldvalues
54058c52292
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5100', 'kvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54062c52296
< -- Name: _csctoss_repl_logtrigger_5110; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5110; Type: TRIGGER; Schema: rt3; Owner: rt_user
54065,54066c52299,52300
< CREATE TRIGGER _csctoss_repl_logtrigger_5110
<     AFTER INSERT OR DELETE OR UPDATE ON principals
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5110
>     BEFORE INSERT OR DELETE OR UPDATE ON principals
54068c52302
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5110', 'kvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54072c52306
< -- Name: _csctoss_repl_logtrigger_5120; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5120; Type: TRIGGER; Schema: rt3; Owner: rt_user
54075,54076c52309,52310
< CREATE TRIGGER _csctoss_repl_logtrigger_5120
<     AFTER INSERT OR DELETE OR UPDATE ON queues
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5120
>     BEFORE INSERT OR DELETE OR UPDATE ON queues
54078c52312
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5120', 'kvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54082c52316
< -- Name: _csctoss_repl_logtrigger_5130; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5130; Type: TRIGGER; Schema: rt3; Owner: rt_user
54085,54086c52319,52320
< CREATE TRIGGER _csctoss_repl_logtrigger_5130
<     AFTER INSERT OR DELETE OR UPDATE ON scripactions
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5130
>     BEFORE INSERT OR DELETE OR UPDATE ON scripactions
54088c52322
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5130', 'kvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54092c52326
< -- Name: _csctoss_repl_logtrigger_5140; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5140; Type: TRIGGER; Schema: rt3; Owner: rt_user
54095,54096c52329,52330
< CREATE TRIGGER _csctoss_repl_logtrigger_5140
<     AFTER INSERT OR DELETE OR UPDATE ON scripconditions
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5140
>     BEFORE INSERT OR DELETE OR UPDATE ON scripconditions
54098c52332
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5140', 'kvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54102c52336
< -- Name: _csctoss_repl_logtrigger_5150; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5150; Type: TRIGGER; Schema: rt3; Owner: rt_user
54105,54106c52339,52340
< CREATE TRIGGER _csctoss_repl_logtrigger_5150
<     AFTER INSERT OR DELETE OR UPDATE ON scrips
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5150
>     BEFORE INSERT OR DELETE OR UPDATE ON scrips
54108c52342
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5150', 'kvvvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54112c52346
< -- Name: _csctoss_repl_logtrigger_5160; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5160; Type: TRIGGER; Schema: rt3; Owner: rt_user
54115,54116c52349,52350
< CREATE TRIGGER _csctoss_repl_logtrigger_5160
<     AFTER INSERT OR DELETE OR UPDATE ON sessions
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5160
>     BEFORE INSERT OR DELETE OR UPDATE ON sessions
54118c52352
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5160', 'kvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54122c52356
< -- Name: _csctoss_repl_logtrigger_5170; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5170; Type: TRIGGER; Schema: rt3; Owner: rt_user
54125,54126c52359,52360
< CREATE TRIGGER _csctoss_repl_logtrigger_5170
<     AFTER INSERT OR DELETE OR UPDATE ON templates
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5170
>     BEFORE INSERT OR DELETE OR UPDATE ON templates
54128c52362
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5170', 'kvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54132c52366
< -- Name: _csctoss_repl_logtrigger_5180; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5180; Type: TRIGGER; Schema: rt3; Owner: rt_user
54135,54136c52369,52370
< CREATE TRIGGER _csctoss_repl_logtrigger_5180
<     AFTER INSERT OR DELETE OR UPDATE ON tickets
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5180
>     BEFORE INSERT OR DELETE OR UPDATE ON tickets
54138c52372
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5180', 'kvvvvvvvvvvvvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54142c52376
< -- Name: _csctoss_repl_logtrigger_5190; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5190; Type: TRIGGER; Schema: rt3; Owner: rt_user
54145,54146c52379,52380
< CREATE TRIGGER _csctoss_repl_logtrigger_5190
<     AFTER INSERT OR DELETE OR UPDATE ON transactions
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5190
>     BEFORE INSERT OR DELETE OR UPDATE ON transactions
54148c52382
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5190', 'kvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
54152c52386
< -- Name: _csctoss_repl_logtrigger_5200; Type: TRIGGER; Schema: rt3; Owner: rt_user
---
> -- Name: _csctoss_repl_denyaccess_5200; Type: TRIGGER; Schema: rt3; Owner: rt_user
54155,54156c52389,52390
< CREATE TRIGGER _csctoss_repl_logtrigger_5200
<     AFTER INSERT OR DELETE OR UPDATE ON users
---
> CREATE TRIGGER _csctoss_repl_denyaccess_5200
>     BEFORE INSERT OR DELETE OR UPDATE ON users
54158c52392
<     EXECUTE PROCEDURE _csctoss_repl.logtrigger('_csctoss_repl', '5200', 'kvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv');
---
>     EXECUTE PROCEDURE _csctoss_repl.denyaccess('_csctoss_repl');
55719d53952
< GRANT ALL ON SCHEMA public TO PUBLIC;
55720a53954
> GRANT ALL ON SCHEMA public TO PUBLIC;
56373a54608
> GRANT ALL ON FUNCTION ops_api_expire(text) TO PUBLIC;
56376d54610
< GRANT ALL ON FUNCTION ops_api_expire(text) TO PUBLIC;
56385a54620
> GRANT ALL ON FUNCTION ops_api_expire(text, boolean) TO PUBLIC;
56388d54622
< GRANT ALL ON FUNCTION ops_api_expire(text, boolean) TO PUBLIC;
56397a54632
> GRANT ALL ON FUNCTION ops_api_expire_ex(text) TO PUBLIC;
56400d54634
< GRANT ALL ON FUNCTION ops_api_expire_ex(text) TO PUBLIC;
56505a54740
> GRANT ALL ON FUNCTION ops_api_user_restore(text) TO PUBLIC;
56508d54742
< GRANT ALL ON FUNCTION ops_api_user_restore(text) TO PUBLIC;
56517a54752
> GRANT ALL ON FUNCTION ops_api_user_restore(text, text) TO PUBLIC;
56520d54754
< GRANT ALL ON FUNCTION ops_api_user_restore(text, text) TO PUBLIC;
56529a54764
> GRANT ALL ON FUNCTION ops_api_user_suspend(text) TO PUBLIC;
56532d54766
< GRANT ALL ON FUNCTION ops_api_user_suspend(text) TO PUBLIC;
56541a54776
> GRANT ALL ON FUNCTION ops_api_user_suspend(text, text) TO PUBLIC;
56544d54778
< GRANT ALL ON FUNCTION ops_api_user_suspend(text, text) TO PUBLIC;
56672a54907
> GRANT ALL ON FUNCTION rma_device_info(text) TO PUBLIC;
56675d54909
< GRANT ALL ON FUNCTION rma_device_info(text) TO PUBLIC;
56989,56990d55222
< GRANT ALL ON FUNCTION replchk_attribute(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_attribute(text) TO postgres;
57000,57001d55231
< GRANT ALL ON FUNCTION replchk_attribute_type(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_attribute_type(text) TO postgres;
57011,57012d55240
< GRANT ALL ON FUNCTION replchk_groupname(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_groupname(text) TO postgres;
57022,57023d55249
< GRANT ALL ON FUNCTION replchk_nas(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_nas(text) TO postgres;
57033,57034d55258
< GRANT ALL ON FUNCTION replchk_radcheck(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_radcheck(text) TO postgres;
57044,57045d55267
< GRANT ALL ON FUNCTION replchk_radgroupcheck(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_radgroupcheck(text) TO postgres;
57055,57056d55276
< GRANT ALL ON FUNCTION replchk_radgroupreply(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_radgroupreply(text) TO postgres;
57066,57067d55285
< GRANT ALL ON FUNCTION replchk_radreply(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_radreply(text) TO postgres;
57077,57078d55294
< GRANT ALL ON FUNCTION replchk_usergroup(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_usergroup(text) TO postgres;
57088,57089d55303
< GRANT ALL ON FUNCTION replchk_username(text) TO csctoss_owner;
< GRANT ALL ON FUNCTION replchk_username(text) TO postgres;
57110c55324
< GRANT SELECT,UPDATE ON SEQUENCE sl_rowid_seq TO slony;
---
> GRANT ALL ON SEQUENCE sl_rowid_seq TO slony;
57206d55419
< GRANT SELECT ON TABLE equipment TO password_reset;
57218d55430
< GRANT SELECT ON TABLE equipment_model TO password_reset;
57231d55442
< GRANT SELECT ON TABLE line TO password_reset;
57243d55453
< GRANT SELECT ON TABLE line_equipment TO password_reset;
57256,57257d55465
< GRANT SELECT ON TABLE radreply TO slony;
< GRANT SELECT ON TABLE radreply TO password_reset;
57270d55477
< GRANT SELECT ON TABLE unique_identifier TO password_reset;
57282d55488
< GRANT SELECT ON TABLE usergroup TO slony;
57302c55508
< GRANT SELECT,UPDATE ON SEQUENCE address_address_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE address_address_id_seq TO csctoss_owner;
57335c55541
< GRANT SELECT,UPDATE ON SEQUENCE alert_activity_alert_activity_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE alert_activity_alert_activity_id_seq TO csctoss_owner;
57357c55563
< GRANT SELECT,UPDATE ON SEQUENCE alert_definition_alert_definition_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE alert_definition_alert_definition_id_seq TO csctoss_owner;
57404c55610
< GRANT SELECT,UPDATE ON SEQUENCE alert_type_alert_type_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE alert_type_alert_type_id_seq TO csctoss_owner;
57428d55633
< GRANT SELECT ON TABLE attribute TO slony;
57440d55644
< GRANT SELECT ON TABLE attribute_type TO slony;
57461c55665
< GRANT SELECT,UPDATE ON SEQUENCE billing_entity_billing_entity_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE billing_entity_billing_entity_id_seq TO csctoss_owner;
57896,57905d56099
< -- Name: equipment_credential; Type: ACL; Schema: csctoss; Owner: csctoss_owner
< --
< 
< REVOKE ALL ON TABLE equipment_credential FROM PUBLIC;
< REVOKE ALL ON TABLE equipment_credential FROM csctoss_owner;
< GRANT ALL ON TABLE equipment_credential TO csctoss_owner;
< GRANT SELECT,INSERT,DELETE,UPDATE ON TABLE equipment_credential TO password_reset;
< 
< 
< --
57911c56105
< GRANT SELECT,UPDATE ON SEQUENCE equipment_equipment_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE equipment_equipment_id_seq TO csctoss_owner;
57953,57954c56147,56148
< GRANT SELECT,UPDATE ON SEQUENCE equipment_model_equipment_model_id_seq TO csctoss_owner;
< GRANT SELECT,UPDATE ON SEQUENCE equipment_model_equipment_model_id_seq TO radius_writer;
---
> GRANT ALL ON SEQUENCE equipment_model_equipment_model_id_seq TO csctoss_owner;
> GRANT ALL ON SEQUENCE equipment_model_equipment_model_id_seq TO radius_writer;
58032d56225
< GRANT SELECT ON TABLE username TO slony;
58075d56267
< GRANT SELECT ON TABLE groupname TO slony;
58138c56330
< GRANT SELECT,UPDATE ON SEQUENCE line_line_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE line_line_id_seq TO csctoss_owner;
58286d56477
< GRANT SELECT ON TABLE nas TO slony;
58295c56486
< GRANT SELECT,UPDATE ON SEQUENCE nas_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE nas_id_seq TO csctoss_owner;
58351c56542
< GRANT SELECT,UPDATE ON SEQUENCE plan_plan_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE plan_plan_id_seq TO csctoss_owner;
58427d56617
< GRANT SELECT ON TABLE radcheck TO slony;
58436c56626
< GRANT SELECT,UPDATE ON SEQUENCE radcheck_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE radcheck_id_seq TO csctoss_owner;
58449d56638
< GRANT SELECT ON TABLE radgroupcheck TO slony;
58458c56647
< GRANT SELECT,UPDATE ON SEQUENCE radgroupcheck_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE radgroupcheck_id_seq TO csctoss_owner;
58471d56659
< GRANT SELECT ON TABLE radgroupreply TO slony;
58480c56668
< GRANT SELECT,UPDATE ON SEQUENCE radgroupreply_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE radgroupreply_id_seq TO csctoss_owner;
58501c56689
< GRANT SELECT,UPDATE ON SEQUENCE radreply_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE radreply_id_seq TO csctoss_owner;
58522c56710
< GRANT SELECT,UPDATE ON SEQUENCE receiving_lot_receiving_lot_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE receiving_lot_receiving_lot_id_seq TO csctoss_owner;
58587c56775
< GRANT SELECT,UPDATE ON SEQUENCE shipment_shipment_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE shipment_shipment_id_seq TO csctoss_owner;
58850c57038
< GRANT SELECT,UPDATE ON SEQUENCE usergroup_id_seq TO csctoss_owner;
---
> GRANT ALL ON SEQUENCE usergroup_id_seq TO csctoss_owner;
